using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Web_API_AIS_SN.ResultModels;
using Web_API_AIS_SN.SNModels;

#nullable disable

namespace Web_API_AIS_SN.Context
{
    public partial class SNContext : DbContext
    {
        private readonly string conectionString; //="Data Source=Dev1-Srv.aisgorod.ru;Initial Catalog=sn_dg_test;User ID=lk;Password=lk2011"

        public SNContext()
        {
        }

        public SNContext(string conectionString)
        {
            this.conectionString = conectionString;
        }

        public SNContext(DbContextOptions<SNContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //optionsBuilder.UseSqlServer("Data Source=Dev1-Srv.aisgorod.ru;Initial Catalog=sn_dg_test;User ID=lk;Password=lk2011");
                optionsBuilder.UseSqlServer(conectionString);
            }
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Account1> Accounts1 { get; set; }
        public virtual DbSet<AccountCase> AccountCases { get; set; }
        public virtual DbSet<AccountCaseStatus> AccountCaseStatuses { get; set; }
        public virtual DbSet<AccountCasesService> AccountCasesServices { get; set; }
        public virtual DbSet<AccountCashlessPropertiesView> AccountCashlessPropertiesViews { get; set; }
        public virtual DbSet<AccountCashlessProperty> AccountCashlessProperties { get; set; }
        public virtual DbSet<AccountConsumerGroupsView> AccountConsumerGroupsViews { get; set; }
        public virtual DbSet<AccountDebt> AccountDebts { get; set; }
        public virtual DbSet<AccountDebtorsInfoForRia> AccountDebtorsInfoForRias { get; set; }
        public virtual DbSet<AccountDebtorsInfoForRiasview> AccountDebtorsInfoForRiasviews { get; set; }
        public virtual DbSet<AccountDebtorsInfoForRiaswithDebtAction> AccountDebtorsInfoForRiaswithDebtActions { get; set; }
        public virtual DbSet<AccountDocument> AccountDocuments { get; set; }
        public virtual DbSet<AccountDocumentDynamicParameter> AccountDocumentDynamicParameters { get; set; }
        public virtual DbSet<AccountDocumentServiceType> AccountDocumentServiceTypes { get; set; }
        public virtual DbSet<AccountDocumentServiceTypesView> AccountDocumentServiceTypesViews { get; set; }
        public virtual DbSet<AccountDocumentsView> AccountDocumentsViews { get; set; }
        public virtual DbSet<AccountHouseHolder> AccountHouseHolders { get; set; }
        public virtual DbSet<AccountHouseHoldersView> AccountHouseHoldersViews { get; set; }
        public virtual DbSet<AccountInfoMessage> AccountInfoMessages { get; set; }
        public virtual DbSet<AccountMessanger> AccountMessangers { get; set; }
        public virtual DbSet<AccountMessangerView> AccountMessangerViews { get; set; }
        public virtual DbSet<AccountNumber> AccountNumbers { get; set; }
        public virtual DbSet<AccountNumbersView> AccountNumbersViews { get; set; }
        public virtual DbSet<AccountOption> AccountOptions { get; set; }
        public virtual DbSet<AccountPaymentSystemView> AccountPaymentSystemViews { get; set; }
        public virtual DbSet<AccountPenaltyRemission> AccountPenaltyRemissions { get; set; }
        public virtual DbSet<AccountPenaltyRemissionView> AccountPenaltyRemissionViews { get; set; }
        public virtual DbSet<AccountPeriodFkr> AccountPeriodFkrs { get; set; }
        public virtual DbSet<AccountPeriodFkrV2> AccountPeriodFkrV2s { get; set; }
        public virtual DbSet<AccountPeriodPe> AccountPeriodPes { get; set; }
        public virtual DbSet<AccountPropertiesView> AccountPropertiesViews { get; set; }
        public virtual DbSet<AccountProperty> AccountProperties { get; set; }
        public virtual DbSet<AccountProvider> AccountProviders { get; set; }
        public virtual DbSet<AccountProviderProperty> AccountProviderProperties { get; set; }
        public virtual DbSet<AccountProvidersView> AccountProvidersViews { get; set; }
        public virtual DbSet<AccountReport> AccountReports { get; set; }
        public virtual DbSet<AccountReportType> AccountReportTypes { get; set; }
        public virtual DbSet<AccountSbpQrCode> AccountSbpQrCodes { get; set; }
        public virtual DbSet<AccountService> AccountServices { get; set; }
        public virtual DbSet<AccountService1> AccountServices1 { get; set; }
        public virtual DbSet<AccountService2> AccountServices2 { get; set; }
        public virtual DbSet<AccountService3> AccountServices3 { get; set; }
        public virtual DbSet<AccountService4> AccountServices4 { get; set; }
        public virtual DbSet<AccountServiceCounter> AccountServiceCounters { get; set; }
        public virtual DbSet<AccountServiceCounter1> AccountServiceCounters1 { get; set; }
        public virtual DbSet<AccountServiceCountersView> AccountServiceCountersViews { get; set; }
        public virtual DbSet<AccountServiceDocument> AccountServiceDocuments { get; set; }
        public virtual DbSet<AccountServiceDocumentsView> AccountServiceDocumentsViews { get; set; }
        public virtual DbSet<AccountServiceEquipment> AccountServiceEquipments { get; set; }
        public virtual DbSet<AccountServiceEquipmentsView> AccountServiceEquipmentsViews { get; set; }
        public virtual DbSet<AccountServiceInfo> AccountServiceInfos { get; set; }
        public virtual DbSet<AccountServiceInfosView> AccountServiceInfosViews { get; set; }
        public virtual DbSet<AccountServiceJudgment> AccountServiceJudgments { get; set; }
        public virtual DbSet<AccountServiceNorm> AccountServiceNorms { get; set; }
        public virtual DbSet<AccountServiceNormType> AccountServiceNormTypes { get; set; }
        public virtual DbSet<AccountServiceNormTypesView> AccountServiceNormTypesViews { get; set; }
        public virtual DbSet<AccountServiceNormTypesWithLastNormView> AccountServiceNormTypesWithLastNormViews { get; set; }
        public virtual DbSet<AccountServiceNormsView> AccountServiceNormsViews { get; set; }
        public virtual DbSet<AccountServicePaymentInstallment> AccountServicePaymentInstallments { get; set; }
        public virtual DbSet<AccountServicePaymentInstallmentPart> AccountServicePaymentInstallmentParts { get; set; }
        public virtual DbSet<AccountServicePaymentInstallmentsView> AccountServicePaymentInstallmentsViews { get; set; }
        public virtual DbSet<AccountServicePenaltyRemission> AccountServicePenaltyRemissions { get; set; }
        public virtual DbSet<AccountServicePenaltyRemissionView> AccountServicePenaltyRemissionViews { get; set; }
        public virtual DbSet<AccountServiceRelation> AccountServiceRelations { get; set; }
        public virtual DbSet<AccountServiceRelationsView> AccountServiceRelationsViews { get; set; }
        public virtual DbSet<AccountServiceSubQuality> AccountServiceSubQualities { get; set; }
        public virtual DbSet<AccountServiceSubQualityView> AccountServiceSubQualityViews { get; set; }
        public virtual DbSet<AccountServiceSuspension> AccountServiceSuspensions { get; set; }
        public virtual DbSet<AccountServiceSuspensionSquare> AccountServiceSuspensionSquares { get; set; }
        public virtual DbSet<AccountServiceSuspensionView> AccountServiceSuspensionViews { get; set; }
        public virtual DbSet<AccountServiceTariff> AccountServiceTariffs { get; set; }
        public virtual DbSet<AccountServiceTariffNormView> AccountServiceTariffNormViews { get; set; }
        public virtual DbSet<AccountServiceTariffType> AccountServiceTariffTypes { get; set; }
        public virtual DbSet<AccountServiceTariffTypesView> AccountServiceTariffTypesViews { get; set; }
        public virtual DbSet<AccountServiceTariffsView> AccountServiceTariffsViews { get; set; }
        public virtual DbSet<AccountServiceTransfer> AccountServiceTransfers { get; set; }
        public virtual DbSet<AccountServiceTransfersView> AccountServiceTransfersViews { get; set; }
        public virtual DbSet<AccountServicesSubQuality> AccountServicesSubQualities { get; set; }
        public virtual DbSet<AccountServicesSubQuality1> AccountServicesSubQualities1 { get; set; }
        public virtual DbSet<AccountServicesToRecalc> AccountServicesToRecalcs { get; set; }
        public virtual DbSet<AccountServicesView> AccountServicesViews { get; set; }
        public virtual DbSet<AccountServicesViewForLk> AccountServicesViewForLks { get; set; }
        public virtual DbSet<AccountServicesViewUi> AccountServicesViewUis { get; set; }
        public virtual DbSet<AccountServicesViewWithBalance> AccountServicesViewWithBalances { get; set; }
        public virtual DbSet<AccountServicesViewWithBalance1> AccountServicesViewWithBalances1 { get; set; }
        public virtual DbSet<AccountServicesViewWithMaxCharge> AccountServicesViewWithMaxCharges { get; set; }
        public virtual DbSet<AccountServicesViewWithMaxCharge1> AccountServicesViewWithMaxCharges1 { get; set; }
        public virtual DbSet<AccountServicesViewWithoutMaxCharge> AccountServicesViewWithoutMaxCharges { get; set; }
        public virtual DbSet<AccountServicesWithArchivView> AccountServicesWithArchivViews { get; set; }
        public virtual DbSet<AccountTypeDocument> AccountTypeDocuments { get; set; }
        public virtual DbSet<AccountTypeDocumentsView> AccountTypeDocumentsViews { get; set; }
        public virtual DbSet<AccountsOtherView> AccountsOtherViews { get; set; }
        public virtual DbSet<AccountsOtherWithDebtView> AccountsOtherWithDebtViews { get; set; }
        public virtual DbSet<AccountsView> AccountsViews { get; set; }
        public virtual DbSet<AccountsView1> AccountsViews1 { get; set; }
        public virtual DbSet<AccountsViewNotArchived> AccountsViewNotArchiveds { get; set; }
        public virtual DbSet<SNModels.Action> Actions { get; set; }
        public virtual DbSet<Action1> Actions1 { get; set; }
        public virtual DbSet<ActionDistributed> ActionDistributeds { get; set; }
        public virtual DbSet<ActionDistributedPart> ActionDistributedParts { get; set; }
        public virtual DbSet<ActionDistributedPartFile> ActionDistributedPartFiles { get; set; }
        public virtual DbSet<ActionDistributedPartsView> ActionDistributedPartsViews { get; set; }
        public virtual DbSet<ActionInsertedObject> ActionInsertedObjects { get; set; }
        public virtual DbSet<ActionInsertedObjectsView> ActionInsertedObjectsViews { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<ActionParameter> ActionParameters { get; set; }
        public virtual DbSet<ActionReportDbfResult> ActionReportDbfResults { get; set; }
        public virtual DbSet<ActionReportSaveListResult> ActionReportSaveListResults { get; set; }
        public virtual DbSet<ActionReportSaveListResult1> ActionReportSaveListResults1 { get; set; }
        public virtual DbSet<ActionTemplate> ActionTemplates { get; set; }
        public virtual DbSet<ActionsView> ActionsViews { get; set; }
        public virtual DbSet<AddressObject> AddressObjects { get; set; }
        public virtual DbSet<AddressesFromP> AddressesFromPs { get; set; }
        public virtual DbSet<Apartment> Apartments { get; set; }
        public virtual DbSet<Apartment1> Apartments1 { get; set; }
        public virtual DbSet<ApartmentArea> ApartmentAreas { get; set; }
        public virtual DbSet<ApartmentAreasView> ApartmentAreasViews { get; set; }
        public virtual DbSet<ApartmentCanonicalType> ApartmentCanonicalTypes { get; set; }
        public virtual DbSet<ApartmentCanonicalTypesView> ApartmentCanonicalTypesViews { get; set; }
        public virtual DbSet<ApartmentCharacteristic> ApartmentCharacteristics { get; set; }
        public virtual DbSet<ApartmentCharacteristicsView> ApartmentCharacteristicsViews { get; set; }
        public virtual DbSet<ApartmentCountRoom> ApartmentCountRooms { get; set; }
        public virtual DbSet<ApartmentCountRoomsView> ApartmentCountRoomsViews { get; set; }
        public virtual DbSet<ApartmentCounter> ApartmentCounters { get; set; }
        public virtual DbSet<ApartmentCounterBetweenCheckInterval> ApartmentCounterBetweenCheckIntervals { get; set; }
        public virtual DbSet<ApartmentCounterBetweenCheckIntervalsView> ApartmentCounterBetweenCheckIntervalsViews { get; set; }
        public virtual DbSet<ApartmentCounterCheckInterval> ApartmentCounterCheckIntervals { get; set; }
        public virtual DbSet<ApartmentCounterCheckIntervalsView> ApartmentCounterCheckIntervalsViews { get; set; }
        public virtual DbSet<ApartmentCounterIndication> ApartmentCounterIndications { get; set; }
        public virtual DbSet<ApartmentCounterIndication1> ApartmentCounterIndications1 { get; set; }
        public virtual DbSet<ApartmentCounterIndicationsToRecalc> ApartmentCounterIndicationsToRecalcs { get; set; }
        public virtual DbSet<ApartmentCounterIndicationsView> ApartmentCounterIndicationsViews { get; set; }
        public virtual DbSet<ApartmentCounterIndicationsViewService> ApartmentCounterIndicationsViewServices { get; set; }
        public virtual DbSet<ApartmentCounterIndicationsWithArchivView> ApartmentCounterIndicationsWithArchivViews { get; set; }
        public virtual DbSet<ApartmentCounterLinkage> ApartmentCounterLinkages { get; set; }
        public virtual DbSet<ApartmentCounterLinkagesView> ApartmentCounterLinkagesViews { get; set; }
        public virtual DbSet<ApartmentCounterLinkagesViewForLk> ApartmentCounterLinkagesViewForLks { get; set; }
        public virtual DbSet<ApartmentCounterName> ApartmentCounterNames { get; set; }
        public virtual DbSet<ApartmentCounterNameView> ApartmentCounterNameViews { get; set; }
        public virtual DbSet<ApartmentCounterPlace> ApartmentCounterPlaces { get; set; }
        public virtual DbSet<ApartmentCounterPlaceFactor> ApartmentCounterPlaceFactors { get; set; }
        public virtual DbSet<ApartmentCounterPlaceFactorsView> ApartmentCounterPlaceFactorsViews { get; set; }
        public virtual DbSet<ApartmentCounterPlacesView> ApartmentCounterPlacesViews { get; set; }
        public virtual DbSet<ApartmentCounterSeal> ApartmentCounterSeals { get; set; }
        public virtual DbSet<ApartmentCounterSealsView> ApartmentCounterSealsViews { get; set; }
        public virtual DbSet<ApartmentCounterShare> ApartmentCounterShares { get; set; }
        public virtual DbSet<ApartmentCounterSharesView> ApartmentCounterSharesViews { get; set; }
        public virtual DbSet<ApartmentCounterValuesMpa> ApartmentCounterValuesMpas { get; set; }
        public virtual DbSet<ApartmentCounterVolume> ApartmentCounterVolumes { get; set; }
        public virtual DbSet<ApartmentCounterVolumesView> ApartmentCounterVolumesViews { get; set; }
        public virtual DbSet<ApartmentCountersIndicationsForLk> ApartmentCountersIndicationsForLks { get; set; }
        public virtual DbSet<ApartmentCountersIndicationsInputView> ApartmentCountersIndicationsInputViews { get; set; }
        public virtual DbSet<ApartmentCountersIndicationsInputViewForLk> ApartmentCountersIndicationsInputViewForLks { get; set; }
        public virtual DbSet<ApartmentCountersIndicationsInputViewForMpa> ApartmentCountersIndicationsInputViewForMpas { get; set; }
        public virtual DbSet<ApartmentCountersIndicationsView> ApartmentCountersIndicationsViews { get; set; }
        public virtual DbSet<ApartmentCountersView> ApartmentCountersViews { get; set; }
        public virtual DbSet<ApartmentCountersViewForLk> ApartmentCountersViewForLks { get; set; }
        public virtual DbSet<ApartmentCountersViewWithIndication> ApartmentCountersViewWithIndications { get; set; }
        public virtual DbSet<ApartmentCountersViewWithLinkage> ApartmentCountersViewWithLinkages { get; set; }
        public virtual DbSet<ApartmentEquipment> ApartmentEquipments { get; set; }
        public virtual DbSet<ApartmentEquipmentCounter> ApartmentEquipmentCounters { get; set; }
        public virtual DbSet<ApartmentEquipmentCountersView> ApartmentEquipmentCountersViews { get; set; }
        public virtual DbSet<ApartmentEquipmentHousekeeping> ApartmentEquipmentHousekeepings { get; set; }
        public virtual DbSet<ApartmentEquipmentHousekeepingsView> ApartmentEquipmentHousekeepingsViews { get; set; }
        public virtual DbSet<ApartmentEquipmentsView> ApartmentEquipmentsViews { get; set; }
        public virtual DbSet<ApartmentExternalHouseParameter> ApartmentExternalHouseParameters { get; set; }
        public virtual DbSet<ApartmentExternalHouseParametersView> ApartmentExternalHouseParametersViews { get; set; }
        public virtual DbSet<ApartmentHeatPointsTplu> ApartmentHeatPointsTplus { get; set; }
        public virtual DbSet<ApartmentHouseHolder> ApartmentHouseHolders { get; set; }
        public virtual DbSet<ApartmentHouseHolder1> ApartmentHouseHolders1 { get; set; }
        public virtual DbSet<ApartmentHouseHoldersView> ApartmentHouseHoldersViews { get; set; }
        public virtual DbSet<ApartmentHousekeeping> ApartmentHousekeepings { get; set; }
        public virtual DbSet<ApartmentHousekeepingsView> ApartmentHousekeepingsViews { get; set; }
        public virtual DbSet<ApartmentIndicationsFile> ApartmentIndicationsFiles { get; set; }
        public virtual DbSet<ApartmentInfo> ApartmentInfos { get; set; }
        public virtual DbSet<ApartmentLink> ApartmentLinks { get; set; }
        public virtual DbSet<ApartmentLinksView> ApartmentLinksViews { get; set; }
        public virtual DbSet<ApartmentMergeHistory> ApartmentMergeHistories { get; set; }
        public virtual DbSet<ApartmentMergeHistoryView> ApartmentMergeHistoryViews { get; set; }
        public virtual DbSet<ApartmentNote> ApartmentNotes { get; set; }
        public virtual DbSet<ApartmentNotesView> ApartmentNotesViews { get; set; }
        public virtual DbSet<ApartmentOwner> ApartmentOwners { get; set; }
        public virtual DbSet<ApartmentOwnersView> ApartmentOwnersViews { get; set; }
        public virtual DbSet<ApartmentOwnersWithApartmentInfoView> ApartmentOwnersWithApartmentInfoViews { get; set; }
        public virtual DbSet<ApartmentOwnershipLegalization> ApartmentOwnershipLegalizations { get; set; }
        public virtual DbSet<ApartmentPersonBenefitsView> ApartmentPersonBenefitsViews { get; set; }
        public virtual DbSet<ApartmentPropertiesFullView> ApartmentPropertiesFullViews { get; set; }
        public virtual DbSet<ApartmentPropertiesToMaxfromDateView> ApartmentPropertiesToMaxfromDateViews { get; set; }
        public virtual DbSet<ApartmentPropertiesView> ApartmentPropertiesViews { get; set; }
        public virtual DbSet<ApartmentProperty> ApartmentProperties { get; set; }
        public virtual DbSet<ApartmentProperty1> ApartmentProperties1 { get; set; }
        public virtual DbSet<ApartmentRequest> ApartmentRequests { get; set; }
        public virtual DbSet<ApartmentRequestAccount> ApartmentRequestAccounts { get; set; }
        public virtual DbSet<ApartmentRequestsView> ApartmentRequestsViews { get; set; }
        public virtual DbSet<ApartmentResident> ApartmentResidents { get; set; }
        public virtual DbSet<ApartmentResidentBenefit> ApartmentResidentBenefits { get; set; }
        public virtual DbSet<ApartmentResidentBenefitPropertiesView> ApartmentResidentBenefitPropertiesViews { get; set; }
        public virtual DbSet<ApartmentResidentBenefitProperty> ApartmentResidentBenefitProperties { get; set; }
        public virtual DbSet<ApartmentResidentBenefitsServiceTypesView> ApartmentResidentBenefitsServiceTypesViews { get; set; }
        public virtual DbSet<ApartmentResidentBenefitsView> ApartmentResidentBenefitsViews { get; set; }
        public virtual DbSet<ApartmentResidentVacation> ApartmentResidentVacations { get; set; }
        public virtual DbSet<ApartmentResidentVacationServiceType> ApartmentResidentVacationServiceTypes { get; set; }
        public virtual DbSet<ApartmentResidentVacationServiceTypesView> ApartmentResidentVacationServiceTypesViews { get; set; }
        public virtual DbSet<ApartmentResidentVacationsView> ApartmentResidentVacationsViews { get; set; }
        public virtual DbSet<ApartmentResidentsView> ApartmentResidentsViews { get; set; }
        public virtual DbSet<ApartmentRoom> ApartmentRooms { get; set; }
        public virtual DbSet<ApartmentTerritorialSubdivision> ApartmentTerritorialSubdivisions { get; set; }
        public virtual DbSet<ApartmentTerritorialSubdivisionsView> ApartmentTerritorialSubdivisionsViews { get; set; }
        public virtual DbSet<ApartmentTkocontainer> ApartmentTkocontainers { get; set; }
        public virtual DbSet<ApartmentTkoplatform> ApartmentTkoplatforms { get; set; }
        public virtual DbSet<ApartmentTkoplatformsView> ApartmentTkoplatformsViews { get; set; }
        public virtual DbSet<ApartmentType> ApartmentTypes { get; set; }
        public virtual DbSet<ApartmentTypesView> ApartmentTypesViews { get; set; }
        public virtual DbSet<ApartmentTypesViewWithToDate> ApartmentTypesViewWithToDates { get; set; }
        public virtual DbSet<ApartmentWorkTime> ApartmentWorkTimes { get; set; }
        public virtual DbSet<ApartmentWorkTimeTable> ApartmentWorkTimeTables { get; set; }
        public virtual DbSet<ApartmentWorkTimeTableView> ApartmentWorkTimeTableViews { get; set; }
        public virtual DbSet<ApartmentWorkTimesView> ApartmentWorkTimesViews { get; set; }
        public virtual DbSet<ApartmentsOwnersFio> ApartmentsOwnersFios { get; set; }
        public virtual DbSet<ApartmentsView> ApartmentsViews { get; set; }
        public virtual DbSet<ApartmentsViewUi> ApartmentsViewUis { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<AreaAccount> AreaAccounts { get; set; }
        public virtual DbSet<AreaAddress> AreaAddresses { get; set; }
        public virtual DbSet<AreaApartment> AreaApartments { get; set; }
        public virtual DbSet<AreaEmail> AreaEmails { get; set; }
        public virtual DbSet<AreaGroup> AreaGroups { get; set; }
        public virtual DbSet<AreaOrganization> AreaOrganizations { get; set; }
        public virtual DbSet<AreaPropertiesView> AreaPropertiesViews { get; set; }
        public virtual DbSet<AreaProperty> AreaProperties { get; set; }
        public virtual DbSet<AreasView> AreasViews { get; set; }
        public virtual DbSet<AuditNoticeAccountService> AuditNoticeAccountServices { get; set; }
        public virtual DbSet<Bailiff> Bailiffs { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<BankAccountProvider> BankAccountProviders { get; set; }
        public virtual DbSet<BankAccountProvidersView> BankAccountProvidersViews { get; set; }
        public virtual DbSet<BankAccountsView> BankAccountsViews { get; set; }
        public virtual DbSet<BankPaymentOrder> BankPaymentOrders { get; set; }
        public virtual DbSet<BankPaymentOrderRecordExternalProcessing> BankPaymentOrderRecordExternalProcessings { get; set; }
        public virtual DbSet<BankPaymentOrderRecordJn> BankPaymentOrderRecordJns { get; set; }
        public virtual DbSet<BankPaymentOrdersRecord> BankPaymentOrdersRecords { get; set; }
        public virtual DbSet<BankPaymentOrdersRecordAccount> BankPaymentOrdersRecordAccounts { get; set; }
        public virtual DbSet<BankPaymentOrdersRecordAccountsView> BankPaymentOrdersRecordAccountsViews { get; set; }
        public virtual DbSet<BankPaymentOrdersRecordError> BankPaymentOrdersRecordErrors { get; set; }
        public virtual DbSet<BankPaymentOrdersRecordsView> BankPaymentOrdersRecordsViews { get; set; }
        public virtual DbSet<BankPaymentOrdersView> BankPaymentOrdersViews { get; set; }
        public virtual DbSet<BarCode128> BarCode128s { get; set; }
        public virtual DbSet<Benefit> Benefits { get; set; }
        public virtual DbSet<Benefit1> Benefits1 { get; set; }
        public virtual DbSet<BenefitAccount> BenefitAccounts { get; set; }
        public virtual DbSet<BenefitApartment> BenefitApartments { get; set; }
        public virtual DbSet<BenefitArea> BenefitAreas { get; set; }
        public virtual DbSet<BenefitAreaView> BenefitAreaViews { get; set; }
        public virtual DbSet<BenefitDebt> BenefitDebts { get; set; }
        public virtual DbSet<BenefitDebtsView> BenefitDebtsViews { get; set; }
        public virtual DbSet<BenefitDiffEsrn> BenefitDiffEsrns { get; set; }
        public virtual DbSet<BenefitDiffKszn> BenefitDiffKszns { get; set; }
        public virtual DbSet<BenefitLaw> BenefitLaws { get; set; }
        public virtual DbSet<BenefitNormsForElectric> BenefitNormsForElectrics { get; set; }
        public virtual DbSet<BenefitNormsForElectricView> BenefitNormsForElectricViews { get; set; }
        public virtual DbSet<BenefitNormsForGa> BenefitNormsForGas { get; set; }
        public virtual DbSet<BenefitNormsForGasResultView> BenefitNormsForGasResultViews { get; set; }
        public virtual DbSet<BenefitNormsForGasView> BenefitNormsForGasViews { get; set; }
        public virtual DbSet<BenefitNormsForSquare> BenefitNormsForSquares { get; set; }
        public virtual DbSet<BenefitNormsForSquareResultView> BenefitNormsForSquareResultViews { get; set; }
        public virtual DbSet<BenefitNormsForSquareView> BenefitNormsForSquareViews { get; set; }
        public virtual DbSet<BenefitServiceType> BenefitServiceTypes { get; set; }
        public virtual DbSet<BenefitServiceTypeLink> BenefitServiceTypeLinks { get; set; }
        public virtual DbSet<BenefitsGt> BenefitsGts { get; set; }
        public virtual DbSet<BenefitsView> BenefitsViews { get; set; }
        public virtual DbSet<Boiler> Boilers { get; set; }
        public virtual DbSet<BoilersView> BoilersViews { get; set; }
        public virtual DbSet<BoilersVolume> BoilersVolumes { get; set; }
        public virtual DbSet<BoilersVolumeView> BoilersVolumeViews { get; set; }
        public virtual DbSet<BranchCounterInvoice> BranchCounterInvoices { get; set; }
        public virtual DbSet<Budget> Budgets { get; set; }
        public virtual DbSet<Cache> Caches { get; set; }
        public virtual DbSet<CacheSnaccount> CacheSnaccounts { get; set; }
        public virtual DbSet<Calc> Calcs { get; set; }
        public virtual DbSet<Calc1> Calcs1 { get; set; }
        public virtual DbSet<Calc2> Calcs2 { get; set; }
        public virtual DbSet<Calc3> Calcs3 { get; set; }
        public virtual DbSet<CalcAlg> CalcAlgs { get; set; }
        public virtual DbSet<CalcAlgWithOdnbyNormLink> CalcAlgWithOdnbyNormLinks { get; set; }
        public virtual DbSet<CalcAlgWithOdnbyNormLinksView> CalcAlgWithOdnbyNormLinksViews { get; set; }
        public virtual DbSet<CalcAlgorithm> CalcAlgorithms { get; set; }
        public virtual DbSet<CalcAlgorithmBenefitNormFormula> CalcAlgorithmBenefitNormFormulas { get; set; }
        public virtual DbSet<CalcAlgorithmChargeFormula> CalcAlgorithmChargeFormulas { get; set; }
        public virtual DbSet<CalcAlgorithmChargeFormulasView> CalcAlgorithmChargeFormulasViews { get; set; }
        public virtual DbSet<CalcAlgsView> CalcAlgsViews { get; set; }
        public virtual DbSet<CalcError> CalcErrors { get; set; }
        public virtual DbSet<CalcHouseCounter> CalcHouseCounters { get; set; }
        public virtual DbSet<CalcHouseCounter1> CalcHouseCounters1 { get; set; }
        public virtual DbSet<CalcHouseCounter2> CalcHouseCounters2 { get; set; }
        public virtual DbSet<CalcHouseCounter3> CalcHouseCounters3 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountService> CalcHouseCounterAccountServices { get; set; }
        public virtual DbSet<CalcHouseCounterAccountService1> CalcHouseCounterAccountServices1 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceCounter> CalcHouseCounterAccountServiceCounters { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceCounter1> CalcHouseCounterAccountServiceCounters1 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceCounter2> CalcHouseCounterAccountServiceCounters2 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNonResidential> CalcHouseCounterAccountServiceNonResidentials { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNonResidential1> CalcHouseCounterAccountServiceNonResidentials1 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNonResidential2> CalcHouseCounterAccountServiceNonResidentials2 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNormativ> CalcHouseCounterAccountServiceNormativs { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNormativ1> CalcHouseCounterAccountServiceNormativs1 { get; set; }
        public virtual DbSet<CalcHouseCounterAccountServiceNormativ2> CalcHouseCounterAccountServiceNormativs2 { get; set; }
        public virtual DbSet<CalcHouseCounterService> CalcHouseCounterServices { get; set; }
        public virtual DbSet<CalcHouseCounterService1> CalcHouseCounterServices1 { get; set; }
        public virtual DbSet<CalcHouseCounterService2> CalcHouseCounterServices2 { get; set; }
        public virtual DbSet<CalcHouseCounterServicesByDay> CalcHouseCounterServicesByDays { get; set; }
        public virtual DbSet<CalcHouseCounterServicesByDay1> CalcHouseCounterServicesByDays1 { get; set; }
        public virtual DbSet<CalcHouseCounterServicesByDay2> CalcHouseCounterServicesByDays2 { get; set; }
        public virtual DbSet<CalcHouseCounterSubCounter> CalcHouseCounterSubCounters { get; set; }
        public virtual DbSet<CalcHouseCounterSubCounter1> CalcHouseCounterSubCounters1 { get; set; }
        public virtual DbSet<CalcHouseCounterSubCounter2> CalcHouseCounterSubCounters2 { get; set; }
        public virtual DbSet<CalcHouseCountersByDay> CalcHouseCountersByDays { get; set; }
        public virtual DbSet<CalcHouseCountersByDay1> CalcHouseCountersByDays1 { get; set; }
        public virtual DbSet<CalcHouseCountersByDay2> CalcHouseCountersByDays2 { get; set; }
        public virtual DbSet<CalcHouseCountersByDaysView> CalcHouseCountersByDaysViews { get; set; }
        public virtual DbSet<CalcHouseCountersServiceByDaysView> CalcHouseCountersServiceByDaysViews { get; set; }
        public virtual DbSet<CalcHouseCountersView> CalcHouseCountersViews { get; set; }
        public virtual DbSet<CalcMessage> CalcMessages { get; set; }
        public virtual DbSet<CalcNode> CalcNodes { get; set; }
        public virtual DbSet<CalcNodeCurrentCharge> CalcNodeCurrentCharges { get; set; }
        public virtual DbSet<CalcNodeMessage> CalcNodeMessages { get; set; }
        public virtual DbSet<CalcNodeParameter> CalcNodeParameters { get; set; }
        public virtual DbSet<CalcNodeStatus> CalcNodeStatuses { get; set; }
        public virtual DbSet<CalcNodesView> CalcNodesViews { get; set; }
        public virtual DbSet<CalcOperation> CalcOperations { get; set; }
        public virtual DbSet<CalcOperationGroup> CalcOperationGroups { get; set; }
        public virtual DbSet<CalcOperationGroupContent> CalcOperationGroupContents { get; set; }
        public virtual DbSet<CalcOperationGroupContentsView> CalcOperationGroupContentsViews { get; set; }
        public virtual DbSet<CalcParameter> CalcParameters { get; set; }
        public virtual DbSet<CalcPeriod> CalcPeriods { get; set; }
        public virtual DbSet<CalcPeriodRestriction> CalcPeriodRestrictions { get; set; }
        public virtual DbSet<CalcPeriodRestrictionAccount> CalcPeriodRestrictionAccounts { get; set; }
        public virtual DbSet<CalcPeriodRestrictionsView> CalcPeriodRestrictionsViews { get; set; }
        public virtual DbSet<CalcPeriodsView> CalcPeriodsViews { get; set; }
        public virtual DbSet<CalcReadyForSaveResult> CalcReadyForSaveResults { get; set; }
        public virtual DbSet<CalcService> CalcServices { get; set; }
        public virtual DbSet<CalcService1> CalcServices1 { get; set; }
        public virtual DbSet<CalcService2> CalcServices2 { get; set; }
        public virtual DbSet<CalcService3> CalcServices3 { get; set; }
        public virtual DbSet<CalcServiceBenefit> CalcServiceBenefits { get; set; }
        public virtual DbSet<CalcServiceBenefit1> CalcServiceBenefits1 { get; set; }
        public virtual DbSet<CalcServiceBenefit2> CalcServiceBenefits2 { get; set; }
        public virtual DbSet<CalcServiceBenefitNormsForGa> CalcServiceBenefitNormsForGas { get; set; }
        public virtual DbSet<CalcServiceBenefitNormsForGa1> CalcServiceBenefitNormsForGas1 { get; set; }
        public virtual DbSet<CalcServiceBenefitNormsForGa2> CalcServiceBenefitNormsForGas2 { get; set; }
        public virtual DbSet<CalcServiceBenefitsByDay> CalcServiceBenefitsByDays { get; set; }
        public virtual DbSet<CalcServiceBenefitsByDay1> CalcServiceBenefitsByDays1 { get; set; }
        public virtual DbSet<CalcServiceBenefitsByDay2> CalcServiceBenefitsByDays2 { get; set; }
        public virtual DbSet<CalcServiceBenefitsByDaysView> CalcServiceBenefitsByDaysViews { get; set; }
        public virtual DbSet<CalcServiceCountersByDay> CalcServiceCountersByDays { get; set; }
        public virtual DbSet<CalcServiceCountersByDay1> CalcServiceCountersByDays1 { get; set; }
        public virtual DbSet<CalcServiceCountersByDay2> CalcServiceCountersByDays2 { get; set; }
        public virtual DbSet<CalcServiceCountersByDay3> CalcServiceCountersByDays3 { get; set; }
        public virtual DbSet<CalcServiceCountersByDaysView> CalcServiceCountersByDaysViews { get; set; }
        public virtual DbSet<CalcServiceTypeSubQuality> CalcServiceTypeSubQualities { get; set; }
        public virtual DbSet<CalcServiceTypeSubQuality1> CalcServiceTypeSubQualities1 { get; set; }
        public virtual DbSet<CalcServiceTypeSubQuality2> CalcServiceTypeSubQualities2 { get; set; }
        public virtual DbSet<CalcServiceTypeSubQualityByDay> CalcServiceTypeSubQualityByDays { get; set; }
        public virtual DbSet<CalcServiceTypeSubQualityByDay1> CalcServiceTypeSubQualityByDays1 { get; set; }
        public virtual DbSet<CalcServiceTypeSubQualityByDay2> CalcServiceTypeSubQualityByDays2 { get; set; }
        public virtual DbSet<CalcServiceTypeSubQualityByDaysView> CalcServiceTypeSubQualityByDaysViews { get; set; }
        public virtual DbSet<CalcServicesByDay> CalcServicesByDays { get; set; }
        public virtual DbSet<CalcServicesByDay1> CalcServicesByDays1 { get; set; }
        public virtual DbSet<CalcServicesByDay2> CalcServicesByDays2 { get; set; }
        public virtual DbSet<CalcServicesByDay3> CalcServicesByDays3 { get; set; }
        public virtual DbSet<CalcServicesByDaysView> CalcServicesByDaysViews { get; set; }
        public virtual DbSet<CalcServicesByDaysViewForLk> CalcServicesByDaysViewForLks { get; set; }
        public virtual DbSet<CalcServicesHousekeepingsByDay> CalcServicesHousekeepingsByDays { get; set; }
        public virtual DbSet<CalcServicesHousekeepingsByDay1> CalcServicesHousekeepingsByDays1 { get; set; }
        public virtual DbSet<CalcServicesHousekeepingsByDay2> CalcServicesHousekeepingsByDays2 { get; set; }
        public virtual DbSet<CalcServicesView> CalcServicesViews { get; set; }
        public virtual DbSet<CalcStatus> CalcStatuses { get; set; }
        public virtual DbSet<CalcsView> CalcsViews { get; set; }
        public virtual DbSet<CanonicalService> CanonicalServices { get; set; }
        public virtual DbSet<CanonicalService1> CanonicalServices1 { get; set; }
        public virtual DbSet<CanonicalServicePropertiesView> CanonicalServicePropertiesViews { get; set; }
        public virtual DbSet<CanonicalServiceProperty> CanonicalServiceProperties { get; set; }
        public virtual DbSet<CanonicalServiceSetting> CanonicalServiceSettings { get; set; }
        public virtual DbSet<CanonicalServiceSettingsView> CanonicalServiceSettingsViews { get; set; }
        public virtual DbSet<CanonicalServicesView> CanonicalServicesViews { get; set; }
        public virtual DbSet<ClassifireOfDepartment> ClassifireOfDepartments { get; set; }
        public virtual DbSet<ColumnsTempTable> ColumnsTempTables { get; set; }
        public virtual DbSet<CompareCalc> CompareCalcs { get; set; }
        public virtual DbSet<CompareCalcJn> CompareCalcJns { get; set; }
        public virtual DbSet<CompareCalcJnCalcCounterParam> CompareCalcJnCalcCounterParams { get; set; }
        public virtual DbSet<CompareCalcJnCalcHouseCounterParam> CompareCalcJnCalcHouseCounterParams { get; set; }
        public virtual DbSet<CompareCalcJnCalcParam> CompareCalcJnCalcParams { get; set; }
        public virtual DbSet<CompareCalcNoticeAccountService> CompareCalcNoticeAccountServices { get; set; }
        public virtual DbSet<CompareCalcNoticeHouseCounterAccountService> CompareCalcNoticeHouseCounterAccountServices { get; set; }
        public virtual DbSet<Constant> Constants { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<CounterIndicationsFile> CounterIndicationsFiles { get; set; }
        public virtual DbSet<CounterIndicationsSid> CounterIndicationsSids { get; set; }
        public virtual DbSet<CounterIndicationsSidView> CounterIndicationsSidViews { get; set; }
        public virtual DbSet<CounterMark> CounterMarks { get; set; }
        public virtual DbSet<CounterMarksView> CounterMarksViews { get; set; }
        public virtual DbSet<CounterModel> CounterModels { get; set; }
        public virtual DbSet<CounterModelsView> CounterModelsViews { get; set; }
        public virtual DbSet<CountersView> CountersViews { get; set; }
        public virtual DbSet<CrmrequestsView> CrmrequestsViews { get; set; }
        public virtual DbSet<CustomReporParam> CustomReporParams { get; set; }
        public virtual DbSet<CustomReportColumnsTable> CustomReportColumnsTables { get; set; }
        public virtual DbSet<CustomReportColumnsTablesView> CustomReportColumnsTablesViews { get; set; }
        public virtual DbSet<CustomReportHierarchyTable> CustomReportHierarchyTables { get; set; }
        public virtual DbSet<DebtAccount> DebtAccounts { get; set; }
        public virtual DbSet<DebtAccountAttachCharge> DebtAccountAttachCharges { get; set; }
        public virtual DbSet<DebtAccountAttachChargesView> DebtAccountAttachChargesViews { get; set; }
        public virtual DbSet<DebtAccountAttachPayment> DebtAccountAttachPayments { get; set; }
        public virtual DbSet<DebtAccountAttachPaymentsView> DebtAccountAttachPaymentsViews { get; set; }
        public virtual DbSet<DebtAccountInform> DebtAccountInforms { get; set; }
        public virtual DbSet<DebtAccountInformsView> DebtAccountInformsViews { get; set; }
        public virtual DbSet<DebtAccountService> DebtAccountServices { get; set; }
        public virtual DbSet<DebtAccountServicesByPeriod> DebtAccountServicesByPeriods { get; set; }
        public virtual DbSet<DebtAccountServicesByPeriodView> DebtAccountServicesByPeriodViews { get; set; }
        public virtual DbSet<DebtAccountServicesView> DebtAccountServicesViews { get; set; }
        public virtual DbSet<DebtAccountStatus> DebtAccountStatuses { get; set; }
        public virtual DbSet<DebtAccountStatusContent> DebtAccountStatusContents { get; set; }
        public virtual DbSet<DebtAccountStatusContentsView> DebtAccountStatusContentsViews { get; set; }
        public virtual DbSet<DebtAccountsView> DebtAccountsViews { get; set; }
        public virtual DbSet<DebtAccountsViewSummPayment> DebtAccountsViewSummPayments { get; set; }
        public virtual DbSet<DebtAction> DebtActions { get; set; }
        public virtual DbSet<DebtActionCourtContent> DebtActionCourtContents { get; set; }
        public virtual DbSet<DebtActionCourtContentsView> DebtActionCourtContentsViews { get; set; }
        public virtual DbSet<DebtActionCourtStage> DebtActionCourtStages { get; set; }
        public virtual DbSet<DebtActionEvent> DebtActionEvents { get; set; }
        public virtual DbSet<DebtActionNotice> DebtActionNotices { get; set; }
        public virtual DbSet<DebtActionNoticesExecProcIdDateHistory> DebtActionNoticesExecProcIdDateHistories { get; set; }
        public virtual DbSet<DebtActionNoticesView> DebtActionNoticesViews { get; set; }
        public virtual DbSet<DebtActionStatus> DebtActionStatuses { get; set; }
        public virtual DbSet<DebtActionStatusContent> DebtActionStatusContents { get; set; }
        public virtual DbSet<DebtActionStatusCourtStage> DebtActionStatusCourtStages { get; set; }
        public virtual DbSet<DebtActionsView> DebtActionsViews { get; set; }
        public virtual DbSet<DebtAffair> DebtAffairs { get; set; }
        public virtual DbSet<DebtAffairOwner> DebtAffairOwners { get; set; }
        public virtual DbSet<DebtAffairOwnersView> DebtAffairOwnersViews { get; set; }
        public virtual DbSet<DebtAffairsView> DebtAffairsViews { get; set; }
        public virtual DbSet<DebtDocument> DebtDocuments { get; set; }
        public virtual DbSet<DebtDocumentsView> DebtDocumentsViews { get; set; }
        public virtual DbSet<DebtExecutoryProcessStage> DebtExecutoryProcessStages { get; set; }
        public virtual DbSet<DebtExecutoryProcessStagesView> DebtExecutoryProcessStagesViews { get; set; }
        public virtual DbSet<DebtListNotice> DebtListNotices { get; set; }
        public virtual DbSet<DebtListNoticesView> DebtListNoticesViews { get; set; }
        public virtual DbSet<DebtNotificationsRendered> DebtNotificationsRendereds { get; set; }
        public virtual DbSet<DebtNotificationsRenderedView> DebtNotificationsRenderedViews { get; set; }
        public virtual DbSet<DebtPircontent> DebtPircontents { get; set; }
        public virtual DbSet<DebtPircontentsView> DebtPircontentsViews { get; set; }
        public virtual DbSet<DebtRecoveredAmount> DebtRecoveredAmounts { get; set; }
        public virtual DbSet<DebtStateAction> DebtStateActions { get; set; }
        public virtual DbSet<DebtStateActionsView> DebtStateActionsViews { get; set; }
        public virtual DbSet<DebtorCard> DebtorCards { get; set; }
        public virtual DbSet<DebugSnapshot> DebugSnapshots { get; set; }
        public virtual DbSet<DebugSnapshotsView> DebugSnapshotsViews { get; set; }
        public virtual DbSet<DistributionOfOrganizationsPrioritiesView> DistributionOfOrganizationsPrioritiesViews { get; set; }
        public virtual DbSet<DistributionOfOrganizationsPriority> DistributionOfOrganizationsPriorities { get; set; }
        public virtual DbSet<DocumentService> DocumentServices { get; set; }
        public virtual DbSet<DocumentServiceOrg> DocumentServiceOrgs { get; set; }
        public virtual DbSet<DocumentServiceOrgsView> DocumentServiceOrgsViews { get; set; }
        public virtual DbSet<DocumentServicesView> DocumentServicesViews { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<Element> Elements { get; set; }
        public virtual DbSet<EnergyResource> EnergyResources { get; set; }
        public virtual DbSet<EntranceApartment> EntranceApartments { get; set; }
        public virtual DbSet<EntranceApartmentsView> EntranceApartmentsViews { get; set; }
        public virtual DbSet<EqualAccountNumb> EqualAccountNumbs { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<ErrorsView> ErrorsViews { get; set; }
        public virtual DbSet<EtlLog> EtlLogs { get; set; }
        public virtual DbSet<EventRegistration> EventRegistrations { get; set; }
        public virtual DbSet<EventRegistrationsView> EventRegistrationsViews { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<EventType1> EventTypes1 { get; set; }
        public virtual DbSet<EventTypesView> EventTypesViews { get; set; }
        public virtual DbSet<EventsForSendSm> EventsForSendSms { get; set; }
        public virtual DbSet<EventsForSendSmsView> EventsForSendSmsViews { get; set; }
        public virtual DbSet<ExchangeRequest> ExchangeRequests { get; set; }
        public virtual DbSet<ExchangeRequestGroup> ExchangeRequestGroups { get; set; }
        public virtual DbSet<ExchangeRequestsView> ExchangeRequestsViews { get; set; }
        public virtual DbSet<ExchangeRequestsWithoutXmlView> ExchangeRequestsWithoutXmlViews { get; set; }
        public virtual DbSet<ExportDocument> ExportDocuments { get; set; }
        public virtual DbSet<ExportInfo> ExportInfoes { get; set; }
        public virtual DbSet<ExportOperation> ExportOperations { get; set; }
        public virtual DbSet<ExportToHmWebAccount> ExportToHmWebAccounts { get; set; }
        public virtual DbSet<ExportToHmWebAccountAddress> ExportToHmWebAccountAddresses { get; set; }
        public virtual DbSet<ExportToHmWebAccountDebt> ExportToHmWebAccountDebts { get; set; }
        public virtual DbSet<ExportToHmWebAccountProvider> ExportToHmWebAccountProviders { get; set; }
        public virtual DbSet<ExportToHmWebAccountProvidersTest280122> ExportToHmWebAccountProvidersTest280122s { get; set; }
        public virtual DbSet<ExportToHmWebAcknowledgement> ExportToHmWebAcknowledgements { get; set; }
        public virtual DbSet<ExportToHmWebAddress> ExportToHmWebAddresses { get; set; }
        public virtual DbSet<ExportToHmWebApartment> ExportToHmWebApartments { get; set; }
        public virtual DbSet<ExportToHmWebArchivedAccount> ExportToHmWebArchivedAccounts { get; set; }
        public virtual DbSet<ExportToHmWebClosedAccount> ExportToHmWebClosedAccounts { get; set; }
        public virtual DbSet<ExportToHmWebHistory> ExportToHmWebHistories { get; set; }
        public virtual DbSet<ExportToHmWebJn> ExportToHmWebJns { get; set; }
        public virtual DbSet<ExportToHmWebJnRep> ExportToHmWebJnReps { get; set; }
        public virtual DbSet<ExportToHmWebMeter> ExportToHmWebMeters { get; set; }
        public virtual DbSet<ExportToHmWebMeterAccount> ExportToHmWebMeterAccounts { get; set; }
        public virtual DbSet<ExportToHmWebMeterApartment> ExportToHmWebMeterApartments { get; set; }
        public virtual DbSet<ExportToHmWebMeterValue> ExportToHmWebMeterValues { get; set; }
        public virtual DbSet<ExportToHmWebMeterVerification> ExportToHmWebMeterVerifications { get; set; }
        public virtual DbSet<ExportToHmWebPaymentDocument> ExportToHmWebPaymentDocuments { get; set; }
        public virtual DbSet<ExportToHmWebPaymentDocumentIncome> ExportToHmWebPaymentDocumentIncomes { get; set; }
        public virtual DbSet<ExportToHmWebPaymentDocumentServiceGroup> ExportToHmWebPaymentDocumentServiceGroups { get; set; }
        public virtual DbSet<ExportToHmWebRate> ExportToHmWebRates { get; set; }
        public virtual DbSet<ExportToHmWebService> ExportToHmWebServices { get; set; }
        public virtual DbSet<ExportToTplusReceipt> ExportToTplusReceipts { get; set; }
        public virtual DbSet<ExportToTplusReceiptItem> ExportToTplusReceiptItems { get; set; }
        public virtual DbSet<ExternalHouseParameter> ExternalHouseParameters { get; set; }
        public virtual DbSet<ExternalHouseParametersView> ExternalHouseParametersViews { get; set; }
        public virtual DbSet<ExternalProcessing> ExternalProcessings { get; set; }
        public virtual DbSet<ExternalProcessingFileRecord> ExternalProcessingFileRecords { get; set; }
        public virtual DbSet<ExternalProcessingFileRecordsParseFieldView> ExternalProcessingFileRecordsParseFieldViews { get; set; }
        public virtual DbSet<ExternalProcessingFileRecordsView> ExternalProcessingFileRecordsViews { get; set; }
        public virtual DbSet<ExternalProcessingGroup> ExternalProcessingGroups { get; set; }
        public virtual DbSet<ExternalProcessingParameter> ExternalProcessingParameters { get; set; }
        public virtual DbSet<ExternalProcessingTemplate> ExternalProcessingTemplates { get; set; }
        public virtual DbSet<ExternalProcessingTemplateParameter> ExternalProcessingTemplateParameters { get; set; }
        public virtual DbSet<ExternalProcessingTemplateParametersView> ExternalProcessingTemplateParametersViews { get; set; }
        public virtual DbSet<ExternalProcessingsView> ExternalProcessingsViews { get; set; }
        public virtual DbSet<Faset> Fasets { get; set; }
        public virtual DbSet<FasetItem> FasetItems { get; set; }
        public virtual DbSet<FasetItemsHierarchy> FasetItemsHierarchies { get; set; }
        public virtual DbSet<FasetItemsView> FasetItemsViews { get; set; }
        public virtual DbSet<FavoriteReportTemplate> FavoriteReportTemplates { get; set; }
        public virtual DbSet<FavoriteReportTemplatesView> FavoriteReportTemplatesViews { get; set; }
        public virtual DbSet<FiasAccountInfo> FiasAccountInfos { get; set; }
        public virtual DbSet<FilterAccountPeriod> FilterAccountPeriods { get; set; }
        public virtual DbSet<GetPenaltyRemissionWithDoc> GetPenaltyRemissionWithDocs { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupOperCalcCounterParam> GroupOperCalcCounterParams { get; set; }
        public virtual DbSet<GroupOperCalcCounterParam1> GroupOperCalcCounterParams1 { get; set; }
        public virtual DbSet<GroupOperCalcCounterParamsView> GroupOperCalcCounterParamsViews { get; set; }
        public virtual DbSet<GroupOperCalcHouseCounterParam> GroupOperCalcHouseCounterParams { get; set; }
        public virtual DbSet<GroupOperCalcHouseCounterParam1> GroupOperCalcHouseCounterParams1 { get; set; }
        public virtual DbSet<GroupOperCalcHouseCounterParamsView> GroupOperCalcHouseCounterParamsViews { get; set; }
        public virtual DbSet<GroupOperCalcParam> GroupOperCalcParams { get; set; }
        public virtual DbSet<GroupOperCalcParam1> GroupOperCalcParams1 { get; set; }
        public virtual DbSet<GroupOperCalcParam2> GroupOperCalcParams2 { get; set; }
        public virtual DbSet<GroupOperCalcParamUiFormula> GroupOperCalcParamUiFormulas { get; set; }
        public virtual DbSet<GroupOperCalcParamsView> GroupOperCalcParamsViews { get; set; }
        public virtual DbSet<GroupOperation> GroupOperations { get; set; }
        public virtual DbSet<GroupOperationSequence> GroupOperationSequences { get; set; }
        public virtual DbSet<GroupOperationSequencesView> GroupOperationSequencesViews { get; set; }
        public virtual DbSet<GroupOperationsRunning> GroupOperationsRunnings { get; set; }
        public virtual DbSet<GroupOperationsView> GroupOperationsViews { get; set; }
        public virtual DbSet<GroupOperationsViewNoOriginalSumm> GroupOperationsViewNoOriginalSumms { get; set; }
        public virtual DbSet<GroupsAndOption> GroupsAndOptions { get; set; }
        public virtual DbSet<GroupsAndOptionsView> GroupsAndOptionsViews { get; set; }
        public virtual DbSet<HeatPointsTplu> HeatPointsTplus { get; set; }
        public virtual DbSet<HeavyReport> HeavyReports { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<HolidayAndWeekend> HolidayAndWeekends { get; set; }
        public virtual DbSet<House> Houses { get; set; }
        public virtual DbSet<HouseApartmentCounter> HouseApartmentCounters { get; set; }
        public virtual DbSet<HouseApartmentCountersAllLinkageView> HouseApartmentCountersAllLinkageViews { get; set; }
        public virtual DbSet<HouseApartmentCountersView> HouseApartmentCountersViews { get; set; }
        public virtual DbSet<HouseArea> HouseAreas { get; set; }
        public virtual DbSet<HouseAreasView> HouseAreasViews { get; set; }
        public virtual DbSet<HouseBankAccount> HouseBankAccounts { get; set; }
        public virtual DbSet<HouseBankAccountServiceType> HouseBankAccountServiceTypes { get; set; }
        public virtual DbSet<HouseBankAccountServiceTypesView> HouseBankAccountServiceTypesViews { get; set; }
        public virtual DbSet<HouseBankAccountsView> HouseBankAccountsViews { get; set; }
        public virtual DbSet<HouseBoiler> HouseBoilers { get; set; }
        public virtual DbSet<HouseBoilersView> HouseBoilersViews { get; set; }
        public virtual DbSet<HouseCanonicalType> HouseCanonicalTypes { get; set; }
        public virtual DbSet<HouseCounter> HouseCounters { get; set; }
        public virtual DbSet<HouseCounter1> HouseCounters1 { get; set; }
        public virtual DbSet<HouseCounter2> HouseCounters2 { get; set; }
        public virtual DbSet<HouseCounterAccount> HouseCounterAccounts { get; set; }
        public virtual DbSet<HouseCounterAccountService> HouseCounterAccountServices { get; set; }
        public virtual DbSet<HouseCounterAccountService1> HouseCounterAccountServices1 { get; set; }
        public virtual DbSet<HouseCounterAccountServicesViewWithMaxCharge> HouseCounterAccountServicesViewWithMaxCharges { get; set; }
        public virtual DbSet<HouseCounterApartment> HouseCounterApartments { get; set; }
        public virtual DbSet<HouseCounterApartmentsView> HouseCounterApartmentsViews { get; set; }
        public virtual DbSet<HouseCounterArea> HouseCounterAreas { get; set; }
        public virtual DbSet<HouseCounterAreasView> HouseCounterAreasViews { get; set; }
        public virtual DbSet<HouseCounterBetweenCheckInterval> HouseCounterBetweenCheckIntervals { get; set; }
        public virtual DbSet<HouseCounterBetweenCheckIntervalsView> HouseCounterBetweenCheckIntervalsViews { get; set; }
        public virtual DbSet<HouseCounterDeltaView> HouseCounterDeltaViews { get; set; }
        public virtual DbSet<HouseCounterDeltum> HouseCounterDelta { get; set; }
        public virtual DbSet<HouseCounterHierarchy> HouseCounterHierarchies { get; set; }
        public virtual DbSet<HouseCounterHierarchyView> HouseCounterHierarchyViews { get; set; }
        public virtual DbSet<HouseCounterIndication> HouseCounterIndications { get; set; }
        public virtual DbSet<HouseCounterIndicationsView> HouseCounterIndicationsViews { get; set; }
        public virtual DbSet<HouseCounterNonresidentialApartmentConsumption> HouseCounterNonresidentialApartmentConsumptions { get; set; }
        public virtual DbSet<HouseCounterService> HouseCounterServices { get; set; }
        public virtual DbSet<HouseCounterServiceCounter> HouseCounterServiceCounters { get; set; }
        public virtual DbSet<HouseCounterServiceCountersView> HouseCounterServiceCountersViews { get; set; }
        public virtual DbSet<HouseCounterServiceNorm> HouseCounterServiceNorms { get; set; }
        public virtual DbSet<HouseCounterServiceNormView> HouseCounterServiceNormViews { get; set; }
        public virtual DbSet<HouseCounterServicesView> HouseCounterServicesViews { get; set; }
        public virtual DbSet<HouseCounterSuspension> HouseCounterSuspensions { get; set; }
        public virtual DbSet<HouseCounterSuspensionsView> HouseCounterSuspensionsViews { get; set; }
        public virtual DbSet<HouseCountersIndicationsInputView> HouseCountersIndicationsInputViews { get; set; }
        public virtual DbSet<HouseCountersMop> HouseCountersMops { get; set; }
        public virtual DbSet<HouseCountersView> HouseCountersViews { get; set; }
        public virtual DbSet<HouseEntrance> HouseEntrances { get; set; }
        public virtual DbSet<HouseEntrancesView> HouseEntrancesViews { get; set; }
        public virtual DbSet<HouseExternalKpinfo> HouseExternalKpinfos { get; set; }
        public virtual DbSet<HouseFormControl> HouseFormControls { get; set; }
        public virtual DbSet<HouseFormControlsView> HouseFormControlsViews { get; set; }
        public virtual DbSet<HouseGeneralContractor> HouseGeneralContractors { get; set; }
        public virtual DbSet<HouseGeneralContractorsView> HouseGeneralContractorsViews { get; set; }
        public virtual DbSet<HouseHolder4PaymentSystemService> HouseHolder4PaymentSystemServices { get; set; }
        public virtual DbSet<HouseHouseHolder> HouseHouseHolders { get; set; }
        public virtual DbSet<HouseHouseHoldersView> HouseHouseHoldersViews { get; set; }
        public virtual DbSet<HouseHouseHoldersView1> HouseHouseHoldersViews1 { get; set; }
        public virtual DbSet<HouseIndicationsFile> HouseIndicationsFiles { get; set; }
        public virtual DbSet<HouseOuterInformation> HouseOuterInformations { get; set; }
        public virtual DbSet<HousePasportNote> HousePasportNotes { get; set; }
        public virtual DbSet<HousePowerServiceEconomy> HousePowerServiceEconomies { get; set; }
        public virtual DbSet<HousePropertiesView> HousePropertiesViews { get; set; }
        public virtual DbSet<HouseProperty> HouseProperties { get; set; }
        public virtual DbSet<HouseRequest> HouseRequests { get; set; }
        public virtual DbSet<HouseRequestsView> HouseRequestsViews { get; set; }
        public virtual DbSet<HouseResourceProvider> HouseResourceProviders { get; set; }
        public virtual DbSet<HouseResourceProvidersView> HouseResourceProvidersViews { get; set; }
        public virtual DbSet<HouseServiceNorm> HouseServiceNorms { get; set; }
        public virtual DbSet<HouseServiceNormBenefit> HouseServiceNormBenefits { get; set; }
        public virtual DbSet<HouseServiceNormType> HouseServiceNormTypes { get; set; }
        public virtual DbSet<HouseServiceNormTypesWithNormView> HouseServiceNormTypesWithNormViews { get; set; }
        public virtual DbSet<HouseServiceNormsView> HouseServiceNormsViews { get; set; }
        public virtual DbSet<HouseServiceNormtypesView> HouseServiceNormtypesViews { get; set; }
        public virtual DbSet<HouseServiceProvider> HouseServiceProviders { get; set; }
        public virtual DbSet<HouseServiceProvidersView> HouseServiceProvidersViews { get; set; }
        public virtual DbSet<HouseServiceRestrictionsOnUnloading> HouseServiceRestrictionsOnUnloadings { get; set; }
        public virtual DbSet<HouseServiceRestrictionsOnUnloadingView> HouseServiceRestrictionsOnUnloadingViews { get; set; }
        public virtual DbSet<HouseServiceSeason> HouseServiceSeasons { get; set; }
        public virtual DbSet<HouseServiceSeasonsView> HouseServiceSeasonsViews { get; set; }
        public virtual DbSet<HouseServiceTariff> HouseServiceTariffs { get; set; }
        public virtual DbSet<HouseServiceTariffType> HouseServiceTariffTypes { get; set; }
        public virtual DbSet<HouseServiceTariffTypeWithTariffsView> HouseServiceTariffTypeWithTariffsViews { get; set; }
        public virtual DbSet<HouseServiceTariffTypesView> HouseServiceTariffTypesViews { get; set; }
        public virtual DbSet<HouseServiceTariffsView> HouseServiceTariffsViews { get; set; }
        public virtual DbSet<HouseTreatyCommitment> HouseTreatyCommitments { get; set; }
        public virtual DbSet<HouseTreatyCommitmentsView> HouseTreatyCommitmentsViews { get; set; }
        public virtual DbSet<HouseTreatyCommitmentsWithPeriodsView> HouseTreatyCommitmentsWithPeriodsViews { get; set; }
        public virtual DbSet<HouseWithServiceTariffsServicesNewView> HouseWithServiceTariffsServicesNewViews { get; set; }
        public virtual DbSet<HouseWithServiceTariffsServicesView> HouseWithServiceTariffsServicesViews { get; set; }
        public virtual DbSet<HouseWithServiceTariffsView> HouseWithServiceTariffsViews { get; set; }
        public virtual DbSet<HousesView> HousesViews { get; set; }
        public virtual DbSet<IgnoreTest> IgnoreTests { get; set; }
        public virtual DbSet<ImportFile> ImportFiles { get; set; }
        public virtual DbSet<ImportFilesView> ImportFilesViews { get; set; }
        public virtual DbSet<Indication> Indications { get; set; }
        public virtual DbSet<InterfaceDynamicParameter> InterfaceDynamicParameters { get; set; }
        public virtual DbSet<InterfaceDynamicParametersView> InterfaceDynamicParametersViews { get; set; }
        public virtual DbSet<Jn> Jns { get; set; }
        public virtual DbSet<Jn1> Jns1 { get; set; }
        public virtual DbSet<JnAccountsView> JnAccountsViews { get; set; }
        public virtual DbSet<JnBankPaymentOrderOutput> JnBankPaymentOrderOutputs { get; set; }
        public virtual DbSet<JnBenefit> JnBenefits { get; set; }
        public virtual DbSet<JnBenefit1> JnBenefits1 { get; set; }
        public virtual DbSet<JnBenefitAccount> JnBenefitAccounts { get; set; }
        public virtual DbSet<JnBenefitsView> JnBenefitsViews { get; set; }
        public virtual DbSet<JnCalcCounterParam> JnCalcCounterParams { get; set; }
        public virtual DbSet<JnCalcHouseCounterParam> JnCalcHouseCounterParams { get; set; }
        public virtual DbSet<JnCalcParam> JnCalcParams { get; set; }
        public virtual DbSet<JnCommission> JnCommissions { get; set; }
        public virtual DbSet<JnDeleted> JnDeleteds { get; set; }
        public virtual DbSet<JnGroupView> JnGroupViews { get; set; }
        public virtual DbSet<JnInfosView> JnInfosViews { get; set; }
        public virtual DbSet<JnOrganization> JnOrganizations { get; set; }
        public virtual DbSet<JnPenalty> JnPenalties { get; set; }
        public virtual DbSet<JnPenaltyByDay> JnPenaltyByDays { get; set; }
        public virtual DbSet<JnSaldo> JnSaldos { get; set; }
        public virtual DbSet<JnSaldoAccount> JnSaldoAccounts { get; set; }
        public virtual DbSet<JnSaldoSumm> JnSaldoSumms { get; set; }
        public virtual DbSet<JnSaldoSummUpdatedJn> JnSaldoSummUpdatedJns { get; set; }
        public virtual DbSet<JnSendPayment> JnSendPayments { get; set; }
        public virtual DbSet<JnSingleView> JnSingleViews { get; set; }
        public virtual DbSet<JnStorno> JnStornos { get; set; }
        public virtual DbSet<JnSumUploadedProvider> JnSumUploadedProviders { get; set; }
        public virtual DbSet<JnSumm> JnSumms { get; set; }
        public virtual DbSet<JnView> JnViews { get; set; }
        public virtual DbSet<JnWithArchivView> JnWithArchivViews { get; set; }
        public virtual DbSet<KbkserviceType> KbkserviceTypes { get; set; }
        public virtual DbSet<KbkserviceTypesView> KbkserviceTypesViews { get; set; }
        public virtual DbSet<Law> Laws { get; set; }
        public virtual DbSet<LawsView> LawsViews { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<Load> Loads { get; set; }
        public virtual DbSet<LoadAbonent> LoadAbonents { get; set; }
        public virtual DbSet<LoadAddrConformance> LoadAddrConformances { get; set; }
        public virtual DbSet<LoadCharge> LoadCharges { get; set; }
        public virtual DbSet<LoadCounter> LoadCounters { get; set; }
        public virtual DbSet<LoadHouseInfo> LoadHouseInfos { get; set; }
        public virtual DbSet<LoadProvider> LoadProviders { get; set; }
        public virtual DbSet<LoadProvidersSynonim> LoadProvidersSynonims { get; set; }
        public virtual DbSet<LoadService> LoadServices { get; set; }
        public virtual DbSet<LocalAddress> LocalAddresses { get; set; }
        public virtual DbSet<LocalAddressOrganizationSynonym> LocalAddressOrganizationSynonyms { get; set; }
        public virtual DbSet<LocalAddressOrganizationSynonymsView> LocalAddressOrganizationSynonymsViews { get; set; }
        public virtual DbSet<LocalAddressSocr> LocalAddressSocrs { get; set; }
        public virtual DbSet<LocalAddressSynonym> LocalAddressSynonyms { get; set; }
        public virtual DbSet<LocalAddressSynonymsView> LocalAddressSynonymsViews { get; set; }
        public virtual DbSet<LocalAddressesView> LocalAddressesViews { get; set; }
        public virtual DbSet<LocalAddressesWithFullName> LocalAddressesWithFullNames { get; set; }
        public virtual DbSet<LocalDistrict> LocalDistricts { get; set; }
        public virtual DbSet<LocalDistrictsInCity> LocalDistrictsInCities { get; set; }
        public virtual DbSet<LocalDistrictsInCityView> LocalDistrictsInCityViews { get; set; }
        public virtual DbSet<LocalTransaction> LocalTransactions { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Log1> Logs1 { get; set; }
        public virtual DbSet<LogCreateTable> LogCreateTables { get; set; }
        public virtual DbSet<LogGroupNoticeRenderedNotice> LogGroupNoticeRenderedNotices { get; set; }
        public virtual DbSet<LogNoticeRenderedNotice> LogNoticeRenderedNotices { get; set; }
        public virtual DbSet<LogRepBase> LogRepBases { get; set; }
        public virtual DbSet<LogReportTemplate> LogReportTemplates { get; set; }
        public virtual DbSet<LogsView> LogsViews { get; set; }
        public virtual DbSet<LsMpa010222JnInsertDeleted> LsMpa010222JnInsertDeleteds { get; set; }
        public virtual DbSet<LsMpa110122GroupOperation> LsMpa110122GroupOperations { get; set; }
        public virtual DbSet<LsMpa110122HouseCounterDeltum> LsMpa110122HouseCounterDelta { get; set; }
        public virtual DbSet<LsMpa110122Jn> LsMpa110122Jns { get; set; }
        public virtual DbSet<LsMpa110122JnLishnee> LsMpa110122JnLishnees { get; set; }
        public virtual DbSet<LsMpa110122RequestItem> LsMpa110122RequestItems { get; set; }
        public virtual DbSet<LsMpa120122JnDel> LsMpa120122JnDels { get; set; }
        public virtual DbSet<LsMpa120122JnDel2> LsMpa120122JnDel2s { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<MenuItemGroup> MenuItemGroups { get; set; }
        public virtual DbSet<MenuItemGroupContent> MenuItemGroupContents { get; set; }
        public virtual DbSet<MenuItemsView> MenuItemsViews { get; set; }
        public virtual DbSet<MenuItemsViewByCurrentUser> MenuItemsViewByCurrentUsers { get; set; }
        public virtual DbSet<MenuItemsViewWithParentName> MenuItemsViewWithParentNames { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleRight> ModuleRights { get; set; }
        public virtual DbSet<Node> Nodes { get; set; }
        public virtual DbSet<NodeService> NodeServices { get; set; }
        public virtual DbSet<NodeServiceType> NodeServiceTypes { get; set; }
        public virtual DbSet<NodeServicesView> NodeServicesViews { get; set; }
        public virtual DbSet<NodeStatus> NodeStatuses { get; set; }
        public virtual DbSet<NodesView> NodesViews { get; set; }
        public virtual DbSet<NonresidentialApartment> NonresidentialApartments { get; set; }
        public virtual DbSet<NonresidentialApartmentHouseCounter> NonresidentialApartmentHouseCounters { get; set; }
        public virtual DbSet<NonresidentialApartmentHouseCountersView> NonresidentialApartmentHouseCountersViews { get; set; }
        public virtual DbSet<NonresidentialApartmentPropertiesView> NonresidentialApartmentPropertiesViews { get; set; }
        public virtual DbSet<NonresidentialApartmentProperty> NonresidentialApartmentProperties { get; set; }
        public virtual DbSet<NonresidentialApartmentsView> NonresidentialApartmentsViews { get; set; }
        public virtual DbSet<NormsForElectric> NormsForElectrics { get; set; }
        public virtual DbSet<NormsForElectricView> NormsForElectricViews { get; set; }
        public virtual DbSet<NormsForHeatingEnergy> NormsForHeatingEnergies { get; set; }
        public virtual DbSet<NormsForHeatingEnergyView> NormsForHeatingEnergyViews { get; set; }
        public virtual DbSet<NormsForTko> NormsForTkos { get; set; }
        public virtual DbSet<NormsForTkoview> NormsForTkoviews { get; set; }
        public virtual DbSet<NormsForWater> NormsForWaters { get; set; }
        public virtual DbSet<NormsForWaterView> NormsForWaterViews { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<NoticeAccountInfoTax> NoticeAccountInfoTaxes { get; set; }
        public virtual DbSet<NoticeAdditionalSetting> NoticeAdditionalSettings { get; set; }
        public virtual DbSet<NoticeAdditionalSettingsParam> NoticeAdditionalSettingsParams { get; set; }
        public virtual DbSet<NoticeAdditionalSettingsView> NoticeAdditionalSettingsViews { get; set; }
        public virtual DbSet<NoticeBenefit> NoticeBenefits { get; set; }
        public virtual DbSet<NoticeCounter> NoticeCounters { get; set; }
        public virtual DbSet<NoticeHeader> NoticeHeaders { get; set; }
        public virtual DbSet<NoticeHouseCounter> NoticeHouseCounters { get; set; }
        public virtual DbSet<NoticeInfoCalc> NoticeInfoCalcs { get; set; }
        public virtual DbSet<NoticeInformationAddress> NoticeInformationAddresses { get; set; }
        public virtual DbSet<NoticeInformationAddress1> NoticeInformationAddresses1 { get; set; }
        public virtual DbSet<NoticeInformationAddressesView> NoticeInformationAddressesViews { get; set; }
        public virtual DbSet<NoticeInformationAddressesView1> NoticeInformationAddressesViews1 { get; set; }
        public virtual DbSet<NoticeNoticeAdditionalSetting> NoticeNoticeAdditionalSettings { get; set; }
        public virtual DbSet<NoticePay> NoticePays { get; set; }
        public virtual DbSet<NoticeProvider> NoticeProviders { get; set; }
        public virtual DbSet<NoticeRecalc> NoticeRecalcs { get; set; }
        public virtual DbSet<NoticeService> NoticeServices { get; set; }
        public virtual DbSet<NoticeServiceByPeriod> NoticeServiceByPeriods { get; set; }
        public virtual DbSet<NoticeServiceByPeriodFuture> NoticeServiceByPeriodFutures { get; set; }
        public virtual DbSet<NoticeServiceCounter> NoticeServiceCounters { get; set; }
        public virtual DbSet<NoticeTemplate> NoticeTemplates { get; set; }
        public virtual DbSet<NoticeTemplateParticalProvider> NoticeTemplateParticalProviders { get; set; }
        public virtual DbSet<NoticeTemplateProvider> NoticeTemplateProviders { get; set; }
        public virtual DbSet<NoticeTemplateSetting> NoticeTemplateSettings { get; set; }
        public virtual DbSet<NoticeTemplateSettingBlock> NoticeTemplateSettingBlocks { get; set; }
        public virtual DbSet<NoticeTemplateSettingBlockParameter> NoticeTemplateSettingBlockParameters { get; set; }
        public virtual DbSet<NoticeTemplateSettingParameter> NoticeTemplateSettingParameters { get; set; }
        public virtual DbSet<NoticeTemplateSettingProvider> NoticeTemplateSettingProviders { get; set; }
        public virtual DbSet<NoticeTemplateSettingReplaceRicOrg> NoticeTemplateSettingReplaceRicOrgs { get; set; }
        public virtual DbSet<NoticeTemplateSettingRightOrganization> NoticeTemplateSettingRightOrganizations { get; set; }
        public virtual DbSet<NoticeTemplateSettingsView> NoticeTemplateSettingsViews { get; set; }
        public virtual DbSet<NoticeXmlcounter> NoticeXmlcounters { get; set; }
        public virtual DbSet<NoticeXmldata13> NoticeXmldata13s { get; set; }
        public virtual DbSet<NoticeXmldata2> NoticeXmldata2s { get; set; }
        public virtual DbSet<NoticeXmldata4> NoticeXmldata4s { get; set; }
        public virtual DbSet<NoticeXmldata9> NoticeXmldata9s { get; set; }
        public virtual DbSet<NoticeXmlnotice> NoticeXmlnotices { get; set; }
        public virtual DbSet<NoticeXmlpay> NoticeXmlpays { get; set; }
        public virtual DbSet<NoticeXmlresultAccount> NoticeXmlresultAccounts { get; set; }
        public virtual DbSet<NoticesView> NoticesViews { get; set; }
        public virtual DbSet<Number> Numbers { get; set; }
        public virtual DbSet<NumbersView> NumbersViews { get; set; }
        public virtual DbSet<ObjectInfoFull> ObjectInfoFulls { get; set; }
        public virtual DbSet<ObjectInfoFullAvailableDocument> ObjectInfoFullAvailableDocuments { get; set; }
        public virtual DbSet<OpCode> OpCodes { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDocument> OrderDocuments { get; set; }
        public virtual DbSet<Org> Orgs { get; set; }
        public virtual DbSet<OrgDocument> OrgDocuments { get; set; }
        public virtual DbSet<OrgDocumentTypeDoc> OrgDocumentTypeDocs { get; set; }
        public virtual DbSet<OrgDocumentTypeDocsView> OrgDocumentTypeDocsViews { get; set; }
        public virtual DbSet<OrgDocumentsEventLog> OrgDocumentsEventLogs { get; set; }
        public virtual DbSet<OrgDocumentsEventLogsView> OrgDocumentsEventLogsViews { get; set; }
        public virtual DbSet<OrgDocumentsView> OrgDocumentsViews { get; set; }
        public virtual DbSet<OrgFreeAccountMask> OrgFreeAccountMasks { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Organization1> Organizations1 { get; set; }
        public virtual DbSet<OrganizationCommission> OrganizationCommissions { get; set; }
        public virtual DbSet<OrganizationEconomic> OrganizationEconomics { get; set; }
        public virtual DbSet<OrganizationEconomicView> OrganizationEconomicViews { get; set; }
        public virtual DbSet<OrganizationGroup> OrganizationGroups { get; set; }
        public virtual DbSet<OrganizationGroupContent> OrganizationGroupContents { get; set; }
        public virtual DbSet<OrganizationGroupContentsView> OrganizationGroupContentsViews { get; set; }
        public virtual DbSet<OrganizationInfo> OrganizationInfos { get; set; }
        public virtual DbSet<OrganizationLicense> OrganizationLicenses { get; set; }
        public virtual DbSet<OrganizationLicensesView> OrganizationLicensesViews { get; set; }
        public virtual DbSet<OrganizationMaterial> OrganizationMaterials { get; set; }
        public virtual DbSet<OrganizationMaterialsView> OrganizationMaterialsViews { get; set; }
        public virtual DbSet<OrganizationPenaltiesSuspension> OrganizationPenaltiesSuspensions { get; set; }
        public virtual DbSet<OrganizationPersonal> OrganizationPersonals { get; set; }
        public virtual DbSet<OrganizationPersonalView> OrganizationPersonalViews { get; set; }
        public virtual DbSet<OrganizationPropertiesView> OrganizationPropertiesViews { get; set; }
        public virtual DbSet<OrganizationProperty> OrganizationProperties { get; set; }
        public virtual DbSet<OrganizationWage> OrganizationWages { get; set; }
        public virtual DbSet<OrganizationWagesView> OrganizationWagesViews { get; set; }
        public virtual DbSet<OrganizationWasteClassificator> OrganizationWasteClassificators { get; set; }
        public virtual DbSet<OrganizationsUdb> OrganizationsUdbs { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<OwnersFromP> OwnersFromPs { get; set; }
        public virtual DbSet<OwnersFromSn> OwnersFromSns { get; set; }
        public virtual DbSet<OwnersView> OwnersViews { get; set; }
        public virtual DbSet<PayJn> PayJns { get; set; }
        public virtual DbSet<PayJnView> PayJnViews { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentMoreFixedSum> PaymentMoreFixedSums { get; set; }
        public virtual DbSet<PaymentOrder> PaymentOrders { get; set; }
        public virtual DbSet<PaymentOrder1> PaymentOrders1 { get; set; }
        public virtual DbSet<PaymentOrderAccount> PaymentOrderAccounts { get; set; }
        public virtual DbSet<PaymentOrderAccountsView> PaymentOrderAccountsViews { get; set; }
        public virtual DbSet<PaymentOrderLink> PaymentOrderLinks { get; set; }
        public virtual DbSet<PaymentOrderLinksView> PaymentOrderLinksViews { get; set; }
        public virtual DbSet<PaymentOrderPack> PaymentOrderPacks { get; set; }
        public virtual DbSet<PaymentOrderPackPayment> PaymentOrderPackPayments { get; set; }
        public virtual DbSet<PaymentOrderPackPaymentsView> PaymentOrderPackPaymentsViews { get; set; }
        public virtual DbSet<PaymentOrderPacksView> PaymentOrderPacksViews { get; set; }
        public virtual DbSet<PaymentOrderPayLink> PaymentOrderPayLinks { get; set; }
        public virtual DbSet<PaymentOrderTemplate> PaymentOrderTemplates { get; set; }
        public virtual DbSet<PaymentOrdersCashierView> PaymentOrdersCashierViews { get; set; }
        public virtual DbSet<PaymentOrdersView> PaymentOrdersViews { get; set; }
        public virtual DbSet<PaymentOrdersView1> PaymentOrdersViews1 { get; set; }
        public virtual DbSet<PaymentSystem> PaymentSystems { get; set; }
        public virtual DbSet<PaymentSystemAgent> PaymentSystemAgents { get; set; }
        public virtual DbSet<PaymentSystemAgentsView> PaymentSystemAgentsViews { get; set; }
        public virtual DbSet<PaymentSystemsView> PaymentSystemsViews { get; set; }
        public virtual DbSet<PaymentsView> PaymentsViews { get; set; }
        public virtual DbSet<PeopleFromP> PeopleFromPs { get; set; }
        public virtual DbSet<PeopleFromSn> PeopleFromSns { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<PersonBenefit> PersonBenefits { get; set; }
        public virtual DbSet<PersonBenefitDocument> PersonBenefitDocuments { get; set; }
        public virtual DbSet<PersonBenefitOut> PersonBenefitOuts { get; set; }
        public virtual DbSet<PersonBenefitOutServiceType> PersonBenefitOutServiceTypes { get; set; }
        public virtual DbSet<PersonBenefitOutServiceTypesView> PersonBenefitOutServiceTypesViews { get; set; }
        public virtual DbSet<PersonBenefitOutsView> PersonBenefitOutsViews { get; set; }
        public virtual DbSet<PersonBenefitsView> PersonBenefitsViews { get; set; }
        public virtual DbSet<PersonByOrganization> PersonByOrganizations { get; set; }
        public virtual DbSet<PersonByOrganizationsView> PersonByOrganizationsViews { get; set; }
        public virtual DbSet<PersonDeclaration> PersonDeclarations { get; set; }
        public virtual DbSet<PersonFamily> PersonFamilies { get; set; }
        public virtual DbSet<PersonFamilyView> PersonFamilyViews { get; set; }
        public virtual DbSet<PersonPhone> PersonPhones { get; set; }
        public virtual DbSet<PersonPhoneEventType> PersonPhoneEventTypes { get; set; }
        public virtual DbSet<PersonPhoneEventTypesView> PersonPhoneEventTypesViews { get; set; }
        public virtual DbSet<PersonPhoneView> PersonPhoneViews { get; set; }
        public virtual DbSet<PersonPropertiesView> PersonPropertiesViews { get; set; }
        public virtual DbSet<PersonProperty> PersonProperties { get; set; }
        public virtual DbSet<PersonsView> PersonsViews { get; set; }
        public virtual DbSet<ProviderCode> ProviderCodes { get; set; }
        public virtual DbSet<Query> Queries { get; set; }
        public virtual DbSet<Reester> Reesters { get; set; }
        public virtual DbSet<ReesterRecord> ReesterRecords { get; set; }
        public virtual DbSet<ReesterRecordError> ReesterRecordErrors { get; set; }
        public virtual DbSet<ReesterRecordErrorsView> ReesterRecordErrorsViews { get; set; }
        public virtual DbSet<ReesterRecordsView> ReesterRecordsViews { get; set; }
        public virtual DbSet<ReestersNotProcessedView> ReestersNotProcessedViews { get; set; }
        public virtual DbSet<ReestersView> ReestersViews { get; set; }
        public virtual DbSet<ReestersViewNoCheckSumm> ReestersViewNoCheckSumms { get; set; }
        public virtual DbSet<RefinancingRatesByPeriod> RefinancingRatesByPeriods { get; set; }
        public virtual DbSet<RegistrationsFromP> RegistrationsFromPs { get; set; }
        public virtual DbSet<RegistrationsFromSn> RegistrationsFromSns { get; set; }
        public virtual DbSet<Remittee> Remittees { get; set; }
        public virtual DbSet<RemitteePaymentOrder> RemitteePaymentOrders { get; set; }
        public virtual DbSet<RemitteePaymentOrderUploading> RemitteePaymentOrderUploadings { get; set; }
        public virtual DbSet<RemitteePaymentOrdersView> RemitteePaymentOrdersViews { get; set; }
        public virtual DbSet<RemitteeService> RemitteeServices { get; set; }
        public virtual DbSet<RemitteeServicesView> RemitteeServicesViews { get; set; }
        public virtual DbSet<RemitteesView> RemitteesViews { get; set; }
        public virtual DbSet<RenderedNotice> RenderedNotices { get; set; }
        public virtual DbSet<RenderedNoticesView> RenderedNoticesViews { get; set; }
        public virtual DbSet<RepReportTemplatesBackup> RepReportTemplatesBackups { get; set; }
        public virtual DbSet<ReplicateJob> ReplicateJobs { get; set; }
        public virtual DbSet<ReplicateJobParameter> ReplicateJobParameters { get; set; }
        public virtual DbSet<ReplicateJobParametersView> ReplicateJobParametersViews { get; set; }
        public virtual DbSet<ReplicateJobPartial> ReplicateJobPartials { get; set; }
        public virtual DbSet<ReplicateJobPartialAccountService> ReplicateJobPartialAccountServices { get; set; }
        public virtual DbSet<ReplicateJobPartialLocalTask> ReplicateJobPartialLocalTasks { get; set; }
        public virtual DbSet<ReplicateJobPartialLocalTasksParameter> ReplicateJobPartialLocalTasksParameters { get; set; }
        public virtual DbSet<ReplicateJobPartialMessage> ReplicateJobPartialMessages { get; set; }
        public virtual DbSet<ReplicateJobPartialMessagesView> ReplicateJobPartialMessagesViews { get; set; }
        public virtual DbSet<ReplicateJobsView> ReplicateJobsViews { get; set; }
        public virtual DbSet<ReplicateServer> ReplicateServers { get; set; }
        public virtual DbSet<ReplicateServersView> ReplicateServersViews { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportGroup> ReportGroups { get; set; }
        public virtual DbSet<ReportPackedResult> ReportPackedResults { get; set; }
        public virtual DbSet<ReportParameter> ReportParameters { get; set; }
        public virtual DbSet<ReportPrintEnvelope> ReportPrintEnvelopes { get; set; }
        public virtual DbSet<ReportPrintNotice> ReportPrintNotices { get; set; }
        public virtual DbSet<ReportPrintPrint> ReportPrintPrints { get; set; }
        public virtual DbSet<ReportReportSheduler> ReportReportShedulers { get; set; }
        public virtual DbSet<ReportResult> ReportResults { get; set; }
        public virtual DbSet<ReportServiceStatus> ReportServiceStatuses { get; set; }
        public virtual DbSet<ReportSheduler> ReportShedulers { get; set; }
        public virtual DbSet<ReportShedulerParameter> ReportShedulerParameters { get; set; }
        public virtual DbSet<ReportShedulersView> ReportShedulersViews { get; set; }
        public virtual DbSet<ReportTemplate> ReportTemplates { get; set; }
        public virtual DbSet<ReportTemplateBu> ReportTemplateBus { get; set; }
        public virtual DbSet<ReportTemplatesView> ReportTemplatesViews { get; set; }
        public virtual DbSet<ReportsView> ReportsViews { get; set; }
        public virtual DbSet<Request> Requests { get; set; }
        public virtual DbSet<Request1> Requests1 { get; set; }
        public virtual DbSet<Request2> Requests2 { get; set; }
        public virtual DbSet<Request3> Requests3 { get; set; }
        public virtual DbSet<RequestAccountService> RequestAccountServices { get; set; }
        public virtual DbSet<RequestAccountServiceDebtByPeriod> RequestAccountServiceDebtByPeriods { get; set; }
        public virtual DbSet<RequestAccountServiceFilter> RequestAccountServiceFilters { get; set; }
        public virtual DbSet<RequestAccountServiceFilterParameter> RequestAccountServiceFilterParameters { get; set; }
        public virtual DbSet<RequestAccountServiceFilterParametersView> RequestAccountServiceFilterParametersViews { get; set; }
        public virtual DbSet<RequestAccountServiceFiltersView> RequestAccountServiceFiltersViews { get; set; }
        public virtual DbSet<RequestAccountServicePenalty> RequestAccountServicePenalties { get; set; }
        public virtual DbSet<RequestAccountServicesInfo> RequestAccountServicesInfos { get; set; }
        public virtual DbSet<RequestAccountServicesInfoView> RequestAccountServicesInfoViews { get; set; }
        public virtual DbSet<RequestApp> RequestApps { get; set; }
        public virtual DbSet<RequestBenefit> RequestBenefits { get; set; }
        public virtual DbSet<RequestCounter> RequestCounters { get; set; }
        public virtual DbSet<RequestCountersView> RequestCountersViews { get; set; }
        public virtual DbSet<RequestGate> RequestGates { get; set; }
        public virtual DbSet<RequestGatesView> RequestGatesViews { get; set; }
        public virtual DbSet<RequestGroup> RequestGroups { get; set; }
        public virtual DbSet<RequestGroupsView> RequestGroupsViews { get; set; }
        public virtual DbSet<RequestItem> RequestItems { get; set; }
        public virtual DbSet<RequestItemParam> RequestItemParams { get; set; }
        public virtual DbSet<RequestOrganizationCommissionsView> RequestOrganizationCommissionsViews { get; set; }
        public virtual DbSet<RequestParameter> RequestParameters { get; set; }
        public virtual DbSet<RequestParametersView> RequestParametersViews { get; set; }
        public virtual DbSet<RequestPinpadPack> RequestPinpadPacks { get; set; }
        public virtual DbSet<RequestPinpadPackContent> RequestPinpadPackContents { get; set; }
        public virtual DbSet<RequestService> RequestServices { get; set; }
        public virtual DbSet<RequestServicePayAmount> RequestServicePayAmounts { get; set; }
        public virtual DbSet<RequestServicePayAmountsView> RequestServicePayAmountsViews { get; set; }
        public virtual DbSet<RequestServicesInfoByStep> RequestServicesInfoBySteps { get; set; }
        public virtual DbSet<RequestServicesView> RequestServicesViews { get; set; }
        public virtual DbSet<RequestStreamFile> RequestStreamFiles { get; set; }
        public virtual DbSet<RequestStreamFilesView> RequestStreamFilesViews { get; set; }
        public virtual DbSet<RequestType> RequestTypes { get; set; }
        public virtual DbSet<RequestsNoXmlview> RequestsNoXmlviews { get; set; }
        public virtual DbSet<RequestsView> RequestsViews { get; set; }
        public virtual DbSet<RequestsView1> RequestsViews1 { get; set; }
        public virtual DbSet<ResultAccountNotice> ResultAccountNotices { get; set; }
        public virtual DbSet<ResultNotice> ResultNotices { get; set; }
        public virtual DbSet<ResultNoticesView> ResultNoticesViews { get; set; }
        public virtual DbSet<Right> Rights { get; set; }
        public virtual DbSet<RightGroup> RightGroups { get; set; }
        public virtual DbSet<RightType> RightTypes { get; set; }
        public virtual DbSet<RolesView> RolesViews { get; set; }
        public virtual DbSet<Run> Runs { get; set; }
        public virtual DbSet<Run1> Runs1 { get; set; }
        public virtual DbSet<SaveApartmentCounterIndicationsNotChek> SaveApartmentCounterIndicationsNotCheks { get; set; }
        public virtual DbSet<SendMessage> SendMessages { get; set; }
        public virtual DbSet<SendQuery> SendQueries { get; set; }
        public virtual DbSet<SendingXmlToServiceData> SendingXmlToServiceDatas { get; set; }
        public virtual DbSet<SendingXmlToServiceGetXmlsView> SendingXmlToServiceGetXmlsViews { get; set; }
        public virtual DbSet<SendingXmlToServiceHeader> SendingXmlToServiceHeaders { get; set; }
        public virtual DbSet<SendingXmlToServiceView> SendingXmlToServiceViews { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Service1> Services1 { get; set; }
        public virtual DbSet<Service2> Services2 { get; set; }
        public virtual DbSet<ServiceBinding> ServiceBindings { get; set; }
        public virtual DbSet<ServiceCalcAlg> ServiceCalcAlgs { get; set; }
        public virtual DbSet<ServiceCalcAlgsView> ServiceCalcAlgsViews { get; set; }
        public virtual DbSet<ServiceChange> ServiceChanges { get; set; }
        public virtual DbSet<ServiceCommission> ServiceCommissions { get; set; }
        public virtual DbSet<ServiceCommissionsView> ServiceCommissionsViews { get; set; }
        public virtual DbSet<ServiceGroup> ServiceGroups { get; set; }
        public virtual DbSet<ServiceGroupLink> ServiceGroupLinks { get; set; }
        public virtual DbSet<ServiceGroupLinksView> ServiceGroupLinksViews { get; set; }
        public virtual DbSet<ServiceNorm> ServiceNorms { get; set; }
        public virtual DbSet<ServiceNormBenefit> ServiceNormBenefits { get; set; }
        public virtual DbSet<ServiceNormBenefitsView> ServiceNormBenefitsViews { get; set; }
        public virtual DbSet<ServiceNormType> ServiceNormTypes { get; set; }
        public virtual DbSet<ServiceNormTypesView> ServiceNormTypesViews { get; set; }
        public virtual DbSet<ServiceNormsView> ServiceNormsViews { get; set; }
        public virtual DbSet<ServicePenaltiesView> ServicePenaltiesViews { get; set; }
        public virtual DbSet<ServicePenalty> ServicePenalties { get; set; }
        public virtual DbSet<ServiceProvider> ServiceProviders { get; set; }
        public virtual DbSet<ServiceProvidersView> ServiceProvidersViews { get; set; }
        public virtual DbSet<ServiceSeasonal> ServiceSeasonals { get; set; }
        public virtual DbSet<ServiceSplitBalance> ServiceSplitBalances { get; set; }
        public virtual DbSet<ServiceSplitDocument> ServiceSplitDocuments { get; set; }
        public virtual DbSet<ServiceSplitDocumentsView> ServiceSplitDocumentsViews { get; set; }
        public virtual DbSet<ServiceSplitJn> ServiceSplitJns { get; set; }
        public virtual DbSet<ServiceSplitJnTransfer> ServiceSplitJnTransfers { get; set; }
        public virtual DbSet<ServiceSplitLink> ServiceSplitLinks { get; set; }
        public virtual DbSet<ServiceSplitLinksView> ServiceSplitLinksViews { get; set; }
        public virtual DbSet<ServiceSplitPaymentPercent> ServiceSplitPaymentPercents { get; set; }
        public virtual DbSet<ServiceSplitPercent> ServiceSplitPercents { get; set; }
        public virtual DbSet<ServiceSplitPercentsView> ServiceSplitPercentsViews { get; set; }
        public virtual DbSet<ServiceSplitTransfer> ServiceSplitTransfers { get; set; }
        public virtual DbSet<ServiceSplitTransfersView> ServiceSplitTransfersViews { get; set; }
        public virtual DbSet<ServiceTariff> ServiceTariffs { get; set; }
        public virtual DbSet<ServiceTariffType> ServiceTariffTypes { get; set; }
        public virtual DbSet<ServiceTariffTypesView> ServiceTariffTypesViews { get; set; }
        public virtual DbSet<ServiceTariffsView> ServiceTariffsViews { get; set; }
        public virtual DbSet<ServiceTreatiesView> ServiceTreatiesViews { get; set; }
        public virtual DbSet<ServiceTreaty> ServiceTreaties { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<ServiceTypeContext> ServiceTypeContexts { get; set; }
        public virtual DbSet<ServiceTypeContextView> ServiceTypeContextViews { get; set; }
        public virtual DbSet<ServiceTypeGroup> ServiceTypeGroups { get; set; }
        public virtual DbSet<ServiceTypeGroupCondition> ServiceTypeGroupConditions { get; set; }
        public virtual DbSet<ServiceTypeGroupConditionsView> ServiceTypeGroupConditionsViews { get; set; }
        public virtual DbSet<ServiceTypeGroupPermit> ServiceTypeGroupPermits { get; set; }
        public virtual DbSet<ServiceTypeGroupsView> ServiceTypeGroupsViews { get; set; }
        public virtual DbSet<ServiceTypeReplacement> ServiceTypeReplacements { get; set; }
        public virtual DbSet<ServiceTypeSubQuality> ServiceTypeSubQualities { get; set; }
        public virtual DbSet<ServiceTypeSubQualityAcceptableDuration> ServiceTypeSubQualityAcceptableDurations { get; set; }
        public virtual DbSet<ServiceTypeSubQualityAcceptableDurationsView> ServiceTypeSubQualityAcceptableDurationsViews { get; set; }
        public virtual DbSet<ServiceTypeSubQualityAlias> ServiceTypeSubQualityAliases { get; set; }
        public virtual DbSet<ServiceTypeSubQualityAliasesView> ServiceTypeSubQualityAliasesViews { get; set; }
        public virtual DbSet<ServiceTypeSubQualityPercent> ServiceTypeSubQualityPercents { get; set; }
        public virtual DbSet<ServiceTypeSubQualityPercentsView> ServiceTypeSubQualityPercentsViews { get; set; }
        public virtual DbSet<ServiceTypeSubQualityView> ServiceTypeSubQualityViews { get; set; }
        public virtual DbSet<ServiceTypeSubstitution> ServiceTypeSubstitutions { get; set; }
        public virtual DbSet<ServiceTypeSubstitutionsView> ServiceTypeSubstitutionsViews { get; set; }
        public virtual DbSet<ServiceTypeSynonym> ServiceTypeSynonyms { get; set; }
        public virtual DbSet<ServiceTypeSynonymsView> ServiceTypeSynonymsViews { get; set; }
        public virtual DbSet<ServiceTypesKbkview> ServiceTypesKbkviews { get; set; }
        public virtual DbSet<ServiceTypesSynonym> ServiceTypesSynonyms { get; set; }
        public virtual DbSet<ServiceTypesView> ServiceTypesViews { get; set; }
        public virtual DbSet<ServiceTypesWithBenefitSrvTypeLinkView> ServiceTypesWithBenefitSrvTypeLinkViews { get; set; }
        public virtual DbSet<ServicesView> ServicesViews { get; set; }
        public virtual DbSet<ServicesViewLight> ServicesViewLights { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<SessionInfo> SessionInfos { get; set; }
        public virtual DbSet<SessionLockDatum> SessionLockData { get; set; }
        public virtual DbSet<SessionsView> SessionsViews { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingPeriodic> SettingPeriodics { get; set; }
        public virtual DbSet<SettingPeriodicsView> SettingPeriodicsViews { get; set; }
        public virtual DbSet<SettingsView> SettingsViews { get; set; }
        public virtual DbSet<SnCounterModels19012022Arman> SnCounterModels19012022Armen { get; set; }
        public virtual DbSet<StreamFile> StreamFiles { get; set; }
        public virtual DbSet<StreamFilesView> StreamFilesViews { get; set; }
        public virtual DbSet<SupportToDistrict> SupportToDistricts { get; set; }
        public virtual DbSet<T78900AccountService> T78900AccountServices { get; set; }
        public virtual DbSet<T78900Source> T78900Sources { get; set; }
        public virtual DbSet<T80040> T80040s { get; set; }
        public virtual DbSet<T80213Account> T80213Accounts { get; set; }
        public virtual DbSet<T80213ApartmentRequestAccount> T80213ApartmentRequestAccounts { get; set; }
        public virtual DbSet<T81859AreaAddress> T81859AreaAddresses { get; set; }
        public virtual DbSet<T81859AreaAddresses2> T81859AreaAddresses2s { get; set; }
        public virtual DbSet<T82038Apartment> T82038Apartments { get; set; }
        public virtual DbSet<T82038ApartmentHouseHolder> T82038ApartmentHouseHolders { get; set; }
        public virtual DbSet<T82038ApartmentType> T82038ApartmentTypes { get; set; }
        public virtual DbSet<T823231gvsApartmentCounter> T823231gvsApartmentCounters { get; set; }
        public virtual DbSet<T823231hvsApartmentCounter> T823231hvsApartmentCounters { get; set; }
        public virtual DbSet<T823232hvsApartmentCounter> T823232hvsApartmentCounters { get; set; }
        public virtual DbSet<T82323ElApartmentCounter> T82323ElApartmentCounters { get; set; }
        public virtual DbSet<T82323GasApartmentCounter> T82323GasApartmentCounters { get; set; }
        public virtual DbSet<T82323Hvs3ApartmentCounter> T82323Hvs3ApartmentCounters { get; set; }
        public virtual DbSet<T82927Organization> T82927Organizations { get; set; }
        public virtual DbSet<T82927Owner> T82927Owners { get; set; }
        public virtual DbSet<T832291ApartmentCounter> T832291ApartmentCounters { get; set; }
        public virtual DbSet<T832292ApartmentCounter> T832292ApartmentCounters { get; set; }
        public virtual DbSet<T832293ApartmentCounter> T832293ApartmentCounters { get; set; }
        public virtual DbSet<T84139BankAccount> T84139BankAccounts { get; set; }
        public virtual DbSet<T84139Organization> T84139Organizations { get; set; }
        public virtual DbSet<T84139Owner> T84139Owners { get; set; }
        public virtual DbSet<T841941Service> T841941Services { get; set; }
        public virtual DbSet<T841942Service> T841942Services { get; set; }
        public virtual DbSet<T84310ServiceType> T84310ServiceTypes { get; set; }
        public virtual DbSet<T85131Pa> T85131Pas { get; set; }
        public virtual DbSet<T85131Ra> T85131Ras { get; set; }
        public virtual DbSet<T85131Ras3> T85131Ras3s { get; set; }
        public virtual DbSet<Table> Tables { get; set; }
        public virtual DbSet<TableTestConstraint> TableTestConstraints { get; set; }
        public virtual DbSet<TablesView> TablesViews { get; set; }
        public virtual DbSet<Tbl79011> Tbl79011s { get; set; }
        public virtual DbSet<Tbl79976> Tbl79976s { get; set; }
        public virtual DbSet<Tbl80916> Tbl80916s { get; set; }
        public virtual DbSet<TblDapartmentOwners79011> TblDapartmentOwners79011s { get; set; }
        public virtual DbSet<TblDeathPerson> TblDeathPersons { get; set; }
        public virtual DbSet<TblDowners79011> TblDowners79011s { get; set; }
        public virtual DbSet<TblDpersonBenefits79011> TblDpersonBenefits79011s { get; set; }
        public virtual DbSet<TblDpersons79011> TblDpersons79011s { get; set; }
        public virtual DbSet<TblDserviceCalcAlgs79513> TblDserviceCalcAlgs79513s { get; set; }
        public virtual DbSet<TblDservicePenalty> TblDservicePenalties { get; set; }
        public virtual DbSet<TblDserviceTariffTypes79513> TblDserviceTariffTypes79513s { get; set; }
        public virtual DbSet<TblDserviceTariffs79513> TblDserviceTariffs79513s { get; set; }
        public virtual DbSet<TblDservices79513> TblDservices79513s { get; set; }
        public virtual DbSet<TblUaccountCashlessProperties79011> TblUaccountCashlessProperties79011s { get; set; }
        public virtual DbSet<TblUaccounts79011> TblUaccounts79011s { get; set; }
        public virtual DbSet<TblUaccountservicecounters80016> TblUaccountservicecounters80016s { get; set; }
        public virtual DbSet<TblUapartmentCounterIndications79756> TblUapartmentCounterIndications79756s { get; set; }
        public virtual DbSet<TblUapartmentOwners79011> TblUapartmentOwners79011s { get; set; }
        public virtual DbSet<TblUapartmentRequests79011> TblUapartmentRequests79011s { get; set; }
        public virtual DbSet<TblUapartmentResidentBenefits79011> TblUapartmentResidentBenefits79011s { get; set; }
        public virtual DbSet<TblUapartmentResidentBenefits790112> TblUapartmentResidentBenefits790112s { get; set; }
        public virtual DbSet<TblUapartmentResidents79011> TblUapartmentResidents79011s { get; set; }
        public virtual DbSet<TblUapartmentresidents79976> TblUapartmentresidents79976s { get; set; }
        public virtual DbSet<TblUbcBenefitApartments79011> TblUbcBenefitApartments79011s { get; set; }
        public virtual DbSet<TblUdebtAffairOwners79011> TblUdebtAffairOwners79011s { get; set; }
        public virtual DbSet<TblUdebtAffairOwners790112> TblUdebtAffairOwners790112s { get; set; }
        public virtual DbSet<TblUjnBenefits79011> TblUjnBenefits79011s { get; set; }
        public virtual DbSet<TblUjnBenefits790112> TblUjnBenefits790112s { get; set; }
        public virtual DbSet<TblUpayPaymentMoreFixedSums79011> TblUpayPaymentMoreFixedSums79011s { get; set; }
        public virtual DbSet<TblUpersonBenefitDocuments79011> TblUpersonBenefitDocuments79011s { get; set; }
        public virtual DbSet<TblUpersonFamily79011> TblUpersonFamily79011s { get; set; }
        public virtual DbSet<TblUpersonProperties79011> TblUpersonProperties79011s { get; set; }
        public virtual DbSet<TempCopyTerehinApartmentDelete> TempCopyTerehinApartmentDeletes { get; set; }
        public virtual DbSet<TempDebtAccountsForException> TempDebtAccountsForExceptions { get; set; }
        public virtual DbSet<TempRecalc> TempRecalcs { get; set; }
        public virtual DbSet<TemperatureAverage> TemperatureAverages { get; set; }
        public virtual DbSet<TemperatureAveragesView> TemperatureAveragesViews { get; set; }
        public virtual DbSet<TemperatureDesignLoad> TemperatureDesignLoads { get; set; }
        public virtual DbSet<TemperatureDesignLoadsView> TemperatureDesignLoadsViews { get; set; }
        public virtual DbSet<TemperatureInternal> TemperatureInternals { get; set; }
        public virtual DbSet<TemperatureInternalsView> TemperatureInternalsViews { get; set; }
        public virtual DbSet<TemporaryTablesView> TemporaryTablesViews { get; set; }
        public virtual DbSet<Terminal> Terminals { get; set; }
        public virtual DbSet<TmpCalcOperationGroupContents7506509112021> TmpCalcOperationGroupContents7506509112021s { get; set; }
        public virtual DbSet<TmpCalcOperations1C7506509112021> TmpCalcOperations1C7506509112021s { get; set; }
        public virtual DbSet<TmpCounterJune> TmpCounterJunes { get; set; }
        public virtual DbSet<TmpCounterJune3> TmpCounterJune3s { get; set; }
        public virtual DbSet<TmpCsbdCounters3> TmpCsbdCounters3s { get; set; }
        public virtual DbSet<TmpCsbdNorm> TmpCsbdNorms { get; set; }
        public virtual DbSet<TmpCsbdNorms3> TmpCsbdNorms3s { get; set; }
        public virtual DbSet<TmpGroupOperations0301022> TmpGroupOperations0301022s { get; set; }
        public virtual DbSet<TmpGroupOperations16092021> TmpGroupOperations16092021s { get; set; }
        public virtual DbSet<TmpJn03012022> TmpJn03012022s { get; set; }
        public virtual DbSet<TmpJn03012022J> TmpJn03012022Js { get; set; }
        public virtual DbSet<TmpJn03012022J2> TmpJn03012022J2s { get; set; }
        public virtual DbSet<TmpSnCalcServiceCountersByDay> TmpSnCalcServiceCountersByDays { get; set; }
        public virtual DbSet<TmpSnCalcServiceCountersByDays2> TmpSnCalcServiceCountersByDays2s { get; set; }
        public virtual DbSet<TmpSnCalcServiceCountersByDays3> TmpSnCalcServiceCountersByDays3s { get; set; }
        public virtual DbSet<TmpSnCalcServicesByDay> TmpSnCalcServicesByDays { get; set; }
        public virtual DbSet<TmpSnCalcServicesByDays2> TmpSnCalcServicesByDays2s { get; set; }
        public virtual DbSet<TmpSnCalcServicesByDays3> TmpSnCalcServicesByDays3s { get; set; }
        public virtual DbSet<Treaty> Treaties { get; set; }
        public virtual DbSet<TypeChange> TypeChanges { get; set; }
        public virtual DbSet<SNModels.TypeCode> TypeCodes { get; set; }
        public virtual DbSet<Unload> Unloads { get; set; }
        public virtual DbSet<UnloadData> UnloadDatas { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAccountService> UserAccountServices { get; set; }
        public virtual DbSet<UserAddrAccess> UserAddrAccesses { get; set; }
        public virtual DbSet<UserAddress> UserAddresses { get; set; }
        public virtual DbSet<UserLocalAddressesView> UserLocalAddressesViews { get; set; }
        public virtual DbSet<UserMenuItemGroup> UserMenuItemGroups { get; set; }
        public virtual DbSet<UserOrganization> UserOrganizations { get; set; }
        public virtual DbSet<UserOrganizationCommissionIgnore> UserOrganizationCommissionIgnores { get; set; }
        public virtual DbSet<UserPropertiesView> UserPropertiesViews { get; set; }
        public virtual DbSet<UserProperty> UserProperties { get; set; }
        public virtual DbSet<UserReportTemplate> UserReportTemplates { get; set; }
        public virtual DbSet<UserRight> UserRights { get; set; }
        public virtual DbSet<UserServiceType> UserServiceTypes { get; set; }
        public virtual DbSet<UserTemplateSetting> UserTemplateSettings { get; set; }
        public virtual DbSet<UserUnitOrganization> UserUnitOrganizations { get; set; }
        public virtual DbSet<UserUpdate> UserUpdates { get; set; }
        public virtual DbSet<UsersView> UsersViews { get; set; }
        public virtual DbSet<WorkTimeTableTemplate> WorkTimeTableTemplates { get; set; }
        public virtual DbSet<WorkTimeTemplate> WorkTimeTemplates { get; set; }
        public virtual DbSet<_79647ApartmentTypesFasetId6> _79647ApartmentTypesFasetId6s { get; set; }
        public virtual DbSet<_82430L> _82430Ls { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");
            modelBuilder.Entity<AccountInfoResult>().HasNoKey();
            modelBuilder.Entity<AccountSearchByNumberResult>().HasNoKey();
            modelBuilder.Entity<AccountServicesInfoResult>().HasNoKey();          
            modelBuilder.Entity<GetUserResult>().HasNoKey();         

            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Accounts", "sn");

                entity.HasIndex(e => e.Datee, "IX_Accounts__datee");

                entity.HasIndex(e => e.ApartmentId, "IX_Accounts_apartmentId");

                entity.HasIndex(e => e.NoticeAdrId, "IX_Accounts_noticeAdrId");

                entity.HasIndex(e => e.Number, "UQ_Accounts_number")
                    .IsUnique();

                entity.HasIndex(e => e.Dateb, "Un_AccFromDate");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AdministrationDistrictId).HasColumnName("administrationDistrictId");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Примечания");

                entity.Property(e => e.DateComment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateComment");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasComment("Дата начала действия лс");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания лс");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата окончания действия лс");

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docInfo")
                    .HasComment("Документ на открытие");

                entity.Property(e => e.IdentityCardHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("identityCardHolderName")
                    .HasComment("Идентификациооная карта. Владелец");

                entity.Property(e => e.IdentityCardNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("identityCardNumber")
                    .HasComment("Идентификациооная карта. Номер");

                entity.Property(e => e.IsArchived)
                    .HasColumnName("isArchived")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCloseInPaymentSystem)
                    .HasColumnName("isCloseInPaymentSystem")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Признак закрытия в платежной системе");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.NeedEmailNotice).HasColumnName("needEmailNotice");

                entity.Property(e => e.NeedOnlyEmailNotice).HasColumnName("needOnlyEmailNotice");

                entity.Property(e => e.NeedOwnerPresence)
                    .HasColumnName("needOwnerPresence")
                    .HasComment("Зайти в бухгалтерию");

                entity.Property(e => e.NeedPrintNotice)
                    .IsRequired()
                    .HasColumnName("needPrintNotice")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NeedSendAndPrintNotice).HasColumnName("needSendAndPrintNotice");

                entity.Property(e => e.NoticeAdrId)
                    .HasColumnName("noticeAdrId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы LocalAddresses");

                entity.Property(e => e.NoticeAdrName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrName")
                    .HasComment("Адрес для счета на оплату, используется если не указан noticeAdrId");

                entity.Property(e => e.NoticeAdrPostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrPostalIndex");

                entity.Property(e => e.NoticeEmail)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("noticeEmail");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComment("Номер лицевого счета клиента (может совпадать с ID Apartments)");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("ownerId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Owner");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName")
                    .HasComment("Наименование хозяина помещения");

                entity.Property(e => e.QrcId)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("qrcId");

                entity.Property(e => e.SbpQrCode)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("sbpQrCode");

                entity.Property(e => e.SetCounterIndicationWoauth)
                    .IsRequired()
                    .HasColumnName("setCounterIndicationWOAuth")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TypeBudget).HasColumnName("typeBudget");

                entity.Property(e => e.UseAccountServiceGroups)
                    .HasColumnName("useAccountServiceGroups")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accounts_apartments");

                entity.HasOne(d => d.NoticeAdr)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.NoticeAdrId)
                    .HasConstraintName("FK_Accounts_LocalAddresses");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_Accounts_Owners");

                entity.HasOne(d => d.TypeBudgetNavigation)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.TypeBudget);
            });

            modelBuilder.Entity<Account1>(entity =>
            {
                entity.ToTable("Accounts", "sp");

                entity.HasIndex(e => e.Number, "IX_spAccounts__number");

                entity.HasIndex(e => e.Phone, "IX_spAccounts__phone");

                entity.HasIndex(e => new { e.ServiceProviderId, e.Number }, "IX_spAccounts__serviceProviderId_number");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Fio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.HasOne(d => d.ServiceProvider)
                    .WithMany(p => p.Account1s)
                    .HasForeignKey(d => d.ServiceProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spAccounts_spServiceProviderId");
            });

            modelBuilder.Entity<AccountCase>(entity =>
            {
                entity.ToTable("AccountCases", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountCases)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCases_accounts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AccountCases)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCases_users");
            });

            modelBuilder.Entity<AccountCaseStatus>(entity =>
            {
                entity.ToTable("AccountCaseStatuses", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CaseId).HasColumnName("caseId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.StatusFasetId).HasColumnName("statusFasetId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Case)
                    .WithMany(p => p.AccountCaseStatuses)
                    .HasForeignKey(d => d.CaseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCaseStatuses_accountCases");

                entity.HasOne(d => d.StatusFaset)
                    .WithMany(p => p.AccountCaseStatuses)
                    .HasForeignKey(d => d.StatusFasetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCaseStatuses_FasetItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AccountCaseStatuses)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCaseStatuses_users");
            });

            modelBuilder.Entity<AccountCasesService>(entity =>
            {
                entity.ToTable("AccountCasesServices", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountCasesId).HasColumnName("accountCasesId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.HasOne(d => d.AccountCases)
                    .WithMany(p => p.AccountCasesServices)
                    .HasForeignKey(d => d.AccountCasesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCasesServices_cases");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountCasesServices)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_accountCasesServices_accounts");
            });

            modelBuilder.Entity<AccountCashlessPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountCashlessPropertiesView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.Subdivision)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("subdivision");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountCashlessProperty>(entity =>
            {
                entity.ToTable("AccountCashlessProperties", "sn");

                entity.HasIndex(e => e.AccountId, "IX_AccountCashlessProperties__accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.Subdivision)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("subdivision");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountCashlessProperties)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountCashlessProperties_Accounts");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.AccountCashlessProperties)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_AccountCashlessProperties_Organizations");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.AccountCashlessProperties)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_AccountCashlessProperties_Persons");
            });

            modelBuilder.Entity<AccountConsumerGroupsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountConsumerGroupsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.L10Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("l10Name");

                entity.Property(e => e.L20Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("l20Name");

                entity.Property(e => e.L30Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("l30Name");

                entity.Property(e => e.L40Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("l40Name");
            });

            modelBuilder.Entity<AccountDebt>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("PK_spAccountDebts");

                entity.ToTable("AccountDebts", "sp");

                entity.Property(e => e.AccountId)
                    .ValueGeneratedNever()
                    .HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.SumDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sumDebt");

                entity.HasOne(d => d.Account)
                    .WithOne(p => p.AccountDebt)
                    .HasForeignKey<AccountDebt>(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spAccountDebts_accountId");
            });

            modelBuilder.Entity<AccountDebtorsInfoForRia>(entity =>
            {
                entity.ToTable("AccountDebtorsInfoForRIAS", "sn");

                entity.HasIndex(e => e.AccountId, "IX_AccountDebtorsInfoForRIAS__accountId");

                entity.HasIndex(e => e.AccountId, "IX_AccountDebtorsInfoForRIAS__accountId_organizationId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FullDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fullDebtSumm");

                entity.Property(e => e.GosposhlinaSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlinaSumm");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.JudgeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("judgeSumm");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PenySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penySumm");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.RedemptionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("redemptionDate");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.AccountDebtorsInfoForRia)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDebtorsInfoForRIAS_organizationId");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.AccountDebtorsInfoForRia)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDebtorsInfoForRIAS_personId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AccountDebtorsInfoForRia)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_AccountDebtorsInfoForRIAS_statusId");
            });

            modelBuilder.Entity<AccountDebtorsInfoForRiasview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountDebtorsInfoForRIASView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FullDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fullDebtSumm");

                entity.Property(e => e.GosposhlinaSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlinaSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.IsDebtAction).HasColumnName("isDebtAction");

                entity.Property(e => e.JudgeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("judgeSumm");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.NumberDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numberDoc");

                entity.Property(e => e.OrganizationCode).HasColumnName("organizationCode");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PenySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penySumm");

                entity.Property(e => e.PersonFirstName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personFirstName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonLastName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personLastName");

                entity.Property(e => e.PersonMiddleName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personMiddleName");

                entity.Property(e => e.RedemptionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("redemptionDate");

                entity.Property(e => e.SerialDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serialDoc");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("SNILS");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocument");
            });

            modelBuilder.Entity<AccountDebtorsInfoForRiaswithDebtAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountDebtorsInfoForRIASWithDebtActions", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FullDebtSumm)
                    .HasColumnType("decimal(21, 2)")
                    .HasColumnName("fullDebtSumm");

                entity.Property(e => e.GosposhlinaSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlinaSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.IsDebtAction).HasColumnName("isDebtAction");

                entity.Property(e => e.JudgeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("judgeSumm");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.NumberDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numberDoc");

                entity.Property(e => e.OrganizationCode).HasColumnName("organizationCode");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PenySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penySumm");

                entity.Property(e => e.PersonFirstName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personFirstName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonLastName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personLastName");

                entity.Property(e => e.PersonMiddleName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("personMiddleName");

                entity.Property(e => e.RedemptionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("redemptionDate");

                entity.Property(e => e.SerialDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serialDoc");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("SNILS");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocument");
            });

            modelBuilder.Entity<AccountDocument>(entity =>
            {
                entity.ToTable("AccountDocuments", "sn");

                entity.HasIndex(e => new { e.AccountId, e.Servicetypeid, e.StatusDocumentId, e.FromDate }, "IX_AccountDocuments_accountId_serviceTypeId_statusDocumentId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deliveryDate");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.Servicetypeid).HasColumnName("servicetypeid");

                entity.Property(e => e.StatusDocumentId).HasColumnName("statusDocumentId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeDocumentId).HasColumnName("typeDocumentId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountDocuments)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocuments_Accounts");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.AccountDocuments)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocuments_OrgDocuments");

                entity.HasOne(d => d.Servicetype)
                    .WithMany(p => p.AccountDocuments)
                    .HasForeignKey(d => d.Servicetypeid)
                    .HasConstraintName("FK_AccountDocuments_ServiceTypes");

                entity.HasOne(d => d.StatusDocument)
                    .WithMany(p => p.AccountDocuments)
                    .HasForeignKey(d => d.StatusDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocuments_FasetItems");

                entity.HasOne(d => d.TypeDocument)
                    .WithMany(p => p.AccountDocuments)
                    .HasForeignKey(d => d.TypeDocumentId)
                    .HasConstraintName("FK_AccountDocuments_AccountTypeDocuments");
            });

            modelBuilder.Entity<AccountDocumentDynamicParameter>(entity =>
            {
                entity.ToTable("AccountDocumentDynamicParameters", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountDocumentId).HasColumnName("accountDocumentId");

                entity.Property(e => e.InterfaceDynamicParameterId).HasColumnName("interfaceDynamicParameterId");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.AccountDocument)
                    .WithMany(p => p.AccountDocumentDynamicParameters)
                    .HasForeignKey(d => d.AccountDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocumentDynamicParameters_AccountDocuments");

                entity.HasOne(d => d.InterfaceDynamicParameter)
                    .WithMany(p => p.AccountDocumentDynamicParameters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.InterfaceDynamicParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocumentDynamicParameters_InterfaceDynamicParameters");
            });

            modelBuilder.Entity<AccountDocumentServiceType>(entity =>
            {
                entity.ToTable("AccountDocumentServiceTypes", "sn");

                entity.HasIndex(e => e.AccountdocumentId, "IX_AccountDocumentServiceTypes_accountDocumentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountdocumentId).HasColumnName("accountdocumentId");

                entity.Property(e => e.Servicetypeid).HasColumnName("servicetypeid");

                entity.HasOne(d => d.Accountdocument)
                    .WithMany(p => p.AccountDocumentServiceTypes)
                    .HasForeignKey(d => d.AccountdocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountDocumentServiceTypes_AccountDocuments");
            });

            modelBuilder.Entity<AccountDocumentServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountDocumentServiceTypesView", "sn");

                entity.Property(e => e.AccountdocumentId).HasColumnName("accountdocumentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Servicetypecode).HasColumnName("servicetypecode");

                entity.Property(e => e.Servicetypeid).HasColumnName("servicetypeid");

                entity.Property(e => e.Servicetypelongname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("servicetypelongname");

                entity.Property(e => e.Servicetypeshortname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("servicetypeshortname");
            });

            modelBuilder.Entity<AccountDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountDocumentsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("deliveryDate");

                entity.Property(e => e.DocumentComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("documentComment");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("issueDate");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.OrgDocumentKodObj)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentKodObj");

                entity.Property(e => e.OrgDocumentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentType");

                entity.Property(e => e.Servicetypecode).HasColumnName("servicetypecode");

                entity.Property(e => e.Servicetypeid).HasColumnName("servicetypeid");

                entity.Property(e => e.Servicetypelongname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("servicetypelongname");

                entity.Property(e => e.Servicetypeshortname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("servicetypeshortname");

                entity.Property(e => e.StatusDocumentId).HasColumnName("statusDocumentId");

                entity.Property(e => e.StatusDocumentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusDocumentName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeDocumentId).HasColumnName("typeDocumentId");

                entity.Property(e => e.TypeDocumentName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("typeDocumentName");
            });

            modelBuilder.Entity<AccountHouseHolder>(entity =>
            {
                entity.ToTable("AccountHouseHolders", "sn");

                entity.HasIndex(e => e.OrgId, "IX_AccountHouseHolders_orgId");

                entity.HasIndex(e => new { e.AccountId, e.FromDate }, "UIX_AccountHouseHolders__accountId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор  записи");

                entity.Property(e => e.AccountId)
                    .HasColumnName("accountId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Accounts (лицевые счета)");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasComment("Начиная с указанной в поле даты");

                entity.Property(e => e.OrgId)
                    .HasColumnName("orgId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Organization");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountHouseHolders)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountHouseHolders_Accounts");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.AccountHouseHolders)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountHouseHolders_Organizations");
            });

            modelBuilder.Entity<AccountHouseHoldersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountHouseHoldersView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<AccountInfoMessage>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_noticeAccountInfoMessages")
                    .IsClustered(false);

                entity.ToTable("AccountInfoMessages", "notice");

                entity.HasIndex(e => new { e.AccountId, e.Period }, "IX_noticeAccountInfoMessages_accountIdperiod")
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountInfoMessages)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeAccountInfoMessages_Accounts");
            });

            modelBuilder.Entity<AccountMessanger>(entity =>
            {
                entity.ToTable("AccountMessanger", "bot");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.TelegramChatId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("telegramChatId");

                entity.Property(e => e.ViberChatId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("viberChatId");
            });

            modelBuilder.Entity<AccountMessangerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountMessangerView", "bot");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("phoneNumber");

                entity.Property(e => e.TelegramChatId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("telegramChatId");

                entity.Property(e => e.ViberChatId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("viberChatId");
            });

            modelBuilder.Entity<AccountNumber>(entity =>
            {
                entity.ToTable("AccountNumbers", "lk");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.NumberId).HasColumnName("numberId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountNumbers)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_AccountNumbers_Accounts");

                entity.HasOne(d => d.Number)
                    .WithMany(p => p.AccountNumbers)
                    .HasForeignKey(d => d.NumberId)
                    .HasConstraintName("FK_AccountNumbers_Numbers");
            });

            modelBuilder.Entity<AccountNumbersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountNumbersView", "lk");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NumberId).HasColumnName("numberId");
            });

            modelBuilder.Entity<AccountOption>(entity =>
            {
                entity.ToTable("AccountOptions", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CountExecute).HasColumnName("countExecute");

                entity.Property(e => e.OptionId).HasColumnName("optionId");
            });

            modelBuilder.Entity<AccountPaymentSystemView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountPaymentSystemView", "sn");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("action");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.Flat)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsClose).HasColumnName("isClose");

                entity.Property(e => e.LName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<AccountPenaltyRemission>(entity =>
            {
                entity.ToTable("AccountPenaltyRemission", "sn");

                entity.HasIndex(e => new { e.AccountId, e.FromDate, e.ToDate }, "IX_AccountPenaltyRemission_accountId_fromDate_toDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountPenaltyRemissions)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountPenaltyRemission_Accounts");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.AccountPenaltyRemissions)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_accountPenaltyRemission_docs");
            });

            modelBuilder.Entity<AccountPenaltyRemissionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountPenaltyRemissionView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(371)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountPeriodFkr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountPeriodFKR", "epd");

                entity.HasIndex(e => e.AbonentId, "IX_epdAccountPeriodFKR_ABONENT_ID")
                    .IsClustered();

                entity.HasIndex(e => e.AcodeOrgUnit, "IX_epdAccountPeriodFKR_ACODE_ORG_UNIT");

                entity.Property(e => e.AbonentId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ABONENT_ID");

                entity.Property(e => e.AccountPayableNmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PAYABLE_NMB");

                entity.Property(e => e.AccountPerB)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PER_B");

                entity.Property(e => e.AccountPerE)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PER_E");

                entity.Property(e => e.AcodeOrgUnit)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACODE_ORG_UNIT");

                entity.Property(e => e.Address)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Aindex)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("AINDEX");

                entity.Property(e => e.DebtDiscounted)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_DISCOUNTED");

                entity.Property(e => e.DebtEndPeriod)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_END_PERIOD");

                entity.Property(e => e.DebtFine)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_FINE");

                entity.Property(e => e.Fine)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FINE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InfoDop)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("INFO_DOP");

                entity.Property(e => e.MonthYearToWord)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MONTH_YEAR_TO_WORD");

                entity.Property(e => e.NormativDate)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NORMATIV_DATE");

                entity.Property(e => e.PrivSum)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_SUM");

                entity.Property(e => e.SumCalculate)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE");

                entity.Property(e => e.SumCalculateDay)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE_DAY");

                entity.Property(e => e.SumDiscounted)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SUM_DISCOUNTED");

                entity.Property(e => e.SumFine)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SUM_FINE");

                entity.Property(e => e.SumReccreate)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SUM_RECCREATE");

                entity.Property(e => e.TariffDay)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TARIFF_DAY");
            });

            modelBuilder.Entity<AccountPeriodFkrV2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountPeriodFKR_v2", "epd");

                entity.HasIndex(e => new { e.AbonentId, e.Number }, "IX_AccountPeriodFKR_v2_aboenentId")
                    .IsClustered();

                entity.Property(e => e.AIndex)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("aIndex");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Info)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.InfoDateDebt)
                    .HasColumnType("datetime")
                    .HasColumnName("infoDateDebt");

                entity.Property(e => e.InfoDateToPay)
                    .HasColumnType("datetime")
                    .HasColumnName("infoDateToPay");

                entity.Property(e => e.NormDatePay)
                    .HasColumnType("datetime")
                    .HasColumnName("normDatePay");

                entity.Property(e => e.NotLiving).HasColumnName("notLiving");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Payment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("payment");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Recalc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalc");

                entity.Property(e => e.RecalcFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcFrom");

                entity.Property(e => e.RecalcTo)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcTo");

                entity.Property(e => e.SaldoBegin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoBegin");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPayment");

                entity.Property(e => e.SaldoPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPeny");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("square");

                entity.Property(e => e.Tariff)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("tariff");

                entity.Property(e => e.ToPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPay");
            });

            modelBuilder.Entity<AccountPeriodPe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountPeriodPes", "epd");

                entity.HasIndex(e => e.AcodeOrgUnit, "IX_epdAccountPeriodPes_ACODE_ORG_UNIT")
                    .IsClustered();

                entity.Property(e => e.AbonentBelong)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ABONENT_BELONG");

                entity.Property(e => e.AbonentCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ABONENT_CODE");

                entity.Property(e => e.AbonentId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ABONENT_ID");

                entity.Property(e => e.AccountCsv)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_CSV");

                entity.Property(e => e.AccountDate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_DATE");

                entity.Property(e => e.AccountInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_INFO");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NUMBER");

                entity.Property(e => e.AccountPayableId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PAYABLE_ID");

                entity.Property(e => e.AccountPayableNmb)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PAYABLE_NMB");

                entity.Property(e => e.AccountPerB)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PER_B");

                entity.Property(e => e.AccountPerE)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_PER_E");

                entity.Property(e => e.AccountTemplateCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_TEMPLATE_CODE");

                entity.Property(e => e.AcodeCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACODE_CODE");

                entity.Property(e => e.AcodeOrgUnit)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ACODE_ORG_UNIT");

                entity.Property(e => e.AddrOse)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ADDR_OSE");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Avans)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AVANS");

                entity.Property(e => e.Bank)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BANK");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE");

                entity.Property(e => e.BarcodeHands)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BARCODE_HANDS");

                entity.Property(e => e.Bik)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BIK");

                entity.Property(e => e.BillType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BILL_TYPE");

                entity.Property(e => e.BillTypeId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("BILL_TYPE_ID");

                entity.Property(e => e.CalcType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CALC_TYPE");

                entity.Property(e => e.ControlDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_DAY");

                entity.Property(e => e.ControlDislay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CONTROL_DISLAY");

                entity.Property(e => e.DebtDiscounted)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_DISCOUNTED");

                entity.Property(e => e.DebtEndPeriod)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_END_PERIOD");

                entity.Property(e => e.DebtFine)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DEBT_FINE");

                entity.Property(e => e.DispvalueFromDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DISPVALUE_FROM_DAY");

                entity.Property(e => e.DispvalueFromNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DISPVALUE_FROM_NIGHT");

                entity.Property(e => e.DispvalueToDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DISPVALUE_TO_DAY");

                entity.Property(e => e.DispvalueToNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("DISPVALUE_TO_NIGHT");

                entity.Property(e => e.ExpenseDayBasic)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_DAY_BASIC");

                entity.Property(e => e.ExpenseNightBasic)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("EXPENSE_NIGHT_BASIC");

                entity.Property(e => e.Fine)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FINE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Info)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("INFO");

                entity.Property(e => e.InfoDop)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INFO_DOP");

                entity.Property(e => e.InfoPrides)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INFO_PRIDES");

                entity.Property(e => e.Inn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.InstallMonthPayment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALL_MONTH_PAYMENT");

                entity.Property(e => e.InstallNmb)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALL_NMB");

                entity.Property(e => e.InstallPersSumAll)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALL_PERS_SUM_ALL");

                entity.Property(e => e.InstallSumAll)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALL_SUM_ALL");

                entity.Property(e => e.InstallmentChange)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_CHANGE");

                entity.Property(e => e.InstallmentDate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_DATE");

                entity.Property(e => e.InstallmentDebet)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_DEBET");

                entity.Property(e => e.InstallmentDebtRest)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_DEBT_REST");

                entity.Property(e => e.InstallmentExecuted)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_EXECUTED");

                entity.Property(e => e.InstallmentMain)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_MAIN");

                entity.Property(e => e.InstallmentTerminated)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INSTALLMENT_TERMINATED");

                entity.Property(e => e.IsCorrAccount)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("IS_CORR_ACCOUNT");

                entity.Property(e => e.IsInstallment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("IS_INSTALLMENT");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.Ks)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("KS");

                entity.Property(e => e.MeterNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("METER_NUMBER");

                entity.Property(e => e.Month)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTH");

                entity.Property(e => e.MonthYearToWord)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTH_YEAR_TO_WORD");

                entity.Property(e => e.NextMonth)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_MONTH");

                entity.Property(e => e.NormativDate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NORMATIV_DATE");

                entity.Property(e => e.Notification)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NOTIFICATION");

                entity.Property(e => e.OrgUnitCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ORG_UNIT_CODE");

                entity.Property(e => e.PayState)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PAY_STATE");

                entity.Property(e => e.PaySum)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PAY_SUM");

                entity.Property(e => e.PayTo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PAY_TO");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PersentInstall)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PERSENT_INSTALL");

                entity.Property(e => e.PlaceType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PLACE_TYPE");

                entity.Property(e => e.PointState)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("POINT_STATE");

                entity.Property(e => e.PrivCons)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_CONS");

                entity.Property(e => e.PrivConsDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_CONS_DAY");

                entity.Property(e => e.PrivConsNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_CONS_NIGHT");

                entity.Property(e => e.PrivSum)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_SUM");

                entity.Property(e => e.PrivSumDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_SUM_DAY");

                entity.Property(e => e.PrivSumNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRIV_SUM_NIGHT");

                entity.Property(e => e.QuantityPeople)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_PEOPLE");

                entity.Property(e => e.QuantityRoom)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY_ROOM");

                entity.Property(e => e.RateInstall)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RATE_INSTALL");

                entity.Property(e => e.RecalcPeriod)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RECALC_PERIOD");

                entity.Property(e => e.RecalcReason)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RECALC_REASON");

                entity.Property(e => e.Rs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RS");

                entity.Property(e => e.ShipConsLoss)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_CONS_LOSS");

                entity.Property(e => e.ShipSumLoss)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SHIP_SUM_LOSS");

                entity.Property(e => e.Subsvalue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUBSVALUE");

                entity.Property(e => e.SumCalculate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE");

                entity.Property(e => e.SumCalculateAll)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE_ALL");

                entity.Property(e => e.SumCalculateDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE_DAY");

                entity.Property(e => e.SumCalculateNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_CALCULATE_NIGHT");

                entity.Property(e => e.SumDiscounted)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_DISCOUNTED");

                entity.Property(e => e.SumFine)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_FINE");

                entity.Property(e => e.SumReccreate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_RECCREATE");

                entity.Property(e => e.SumToWord)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SUM_TO_WORD");

                entity.Property(e => e.TariffDay)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TARIFF_DAY");

                entity.Property(e => e.TariffName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TARIFF_NAME");

                entity.Property(e => e.TariffNight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TARIFF_NIGHT");

                entity.Property(e => e.Telefon)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TELEFON");

                entity.Property(e => e.TerraName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TERRA_NAME");

                entity.Property(e => e.TimeReceptuion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TIME_RECEPTUION");

                entity.Property(e => e.ToBillDate)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TO_BILL_DATE");

                entity.Property(e => e.TypeAbonBill)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ABON_BILL");

                entity.Property(e => e.TypeAccountPoint)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_ACCOUNT_POINT");
            });

            modelBuilder.Entity<AccountPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountPropertiesView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NumberPd)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("numberPD");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.PropertyValue).HasColumnName("propertyValue");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<AccountProperty>(entity =>
            {
                entity.ToTable("AccountProperties", "sn");

                entity.HasIndex(e => e.AccountId, "IX_AccountProperties_accountId");

                entity.HasIndex(e => new { e.AccountId, e.PropertyId, e.FromDate }, "IX_AccountProperties_accountId_propertyId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.NumberPd)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("numberPD");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyValue).HasColumnName("propertyValue");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountProperties)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountProperties_Accounts");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.AccountProperties)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountProperties_FasetItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AccountProperties)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_AccountProperties_UserId");
            });

            modelBuilder.Entity<AccountProvider>(entity =>
            {
                entity.ToTable("AccountProviders", "sn");

                entity.HasIndex(e => new { e.AccountId, e.Number }, "IX_AccountProviders_accountId_number");

                entity.HasIndex(e => e.Number, "IX_AccountProviders_number");

                entity.HasIndex(e => e.ProviderId, "IX_AccountProviders_providerId");

                entity.HasIndex(e => new { e.ProviderId, e.Number }, "IX_AccountProviders_providerId_number");

                entity.HasIndex(e => e.SubProviderId, "IX_AccountProviders_subProviderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumberGis)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("accountNumberGis");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.SubProviderId).HasColumnName("subProviderId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountProviders)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountProviders_Accounts");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.AccountProviderProviders)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountProviders_Organizations");

                entity.HasOne(d => d.SubProvider)
                    .WithMany(p => p.AccountProviderSubProviders)
                    .HasForeignKey(d => d.SubProviderId)
                    .HasConstraintName("FK_AccountProviders_subProviderId_Organizations");
            });

            modelBuilder.Entity<AccountProviderProperty>(entity =>
            {
                entity.ToTable("AccountProviderProperties", "pu");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountNumberEirc)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("accountNumberEIRC");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.FName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.Flat)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("heating");

                entity.Property(e => e.HeatingEirc)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("heatingEIRC");

                entity.Property(e => e.House)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Korpus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("korpus");

                entity.Property(e => e.LName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.ProviderAccountNumber)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("providerAccountNumber");

                entity.Property(e => e.ProviderNumber)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("providerNumber");

                entity.Property(e => e.Raion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("raion");

                entity.Property(e => e.ResidentCount).HasColumnName("residentCount");

                entity.Property(e => e.ResidentCountEirc).HasColumnName("residentCountEIRC");

                entity.Property(e => e.Street)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.Structure)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("structure");
            });

            modelBuilder.Entity<AccountProvidersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountProvidersView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.SubProviderCode).HasColumnName("subProviderCode");

                entity.Property(e => e.SubProviderId).HasColumnName("subProviderId");

                entity.Property(e => e.SubProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subProviderName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountReport>(entity =>
            {
                entity.ToTable("AccountReports", "sn");

                entity.HasIndex(e => e.AccountId, "IX_AccountReports_accountId");

                entity.HasIndex(e => e.Number, "UX_accountReports_number")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountReportTypeId).HasColumnName("accountReportTypeId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountReports)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountReports_Accounts");

                entity.HasOne(d => d.AccountReportType)
                    .WithMany(p => p.AccountReports)
                    .HasForeignKey(d => d.AccountReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountReports_AccountReportTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AccountReports)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountReports_Users");
            });

            modelBuilder.Entity<AccountReportType>(entity =>
            {
                entity.ToTable("AccountReportTypes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsEnabled)
                    .IsRequired()
                    .HasColumnName("isEnabled")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsEnabledProvider).HasColumnName("isEnabledProvider");

                entity.Property(e => e.IsStored).HasColumnName("isStored");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shortName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Template)
                    .HasColumnType("text")
                    .HasColumnName("template");
            });

            modelBuilder.Entity<AccountSbpQrCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountSbpQrCodes", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.QrcId)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("qrcId");

                entity.Property(e => e.SbpQrCode)
                    .IsRequired()
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("sbpQrCode");
            });

            modelBuilder.Entity<AccountService>(entity =>
            {
                entity.ToTable("AccountServices", "arc");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Baseimport).HasColumnName("baseimport");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountService1>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountServiceId })
                    .HasName("PK__cp_AccountServices");

                entity.ToTable("AccountServices", "cp");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AvgConsumptionForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumptionForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InfoCalcFasetId).HasColumnName("infoCalcFasetId");

                entity.Property(e => e.InfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue");

                entity.Property(e => e.InfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue2");

                entity.Property(e => e.InfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue3");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");
            });

            modelBuilder.Entity<AccountService2>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountServiceId })
                    .HasName("PK__notice_AccountServices");

                entity.ToTable("AccountServices", "notice");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period")
                    .HasComment("Период начисления");

                entity.Property(e => e.AccountServiceId)
                    .HasColumnName("accountServiceId")
                    .HasComment("Услуга лс");

                entity.Property(e => e.AlgorithmId)
                    .HasColumnName("algorithmId")
                    .HasComment("Алгоритм");

                entity.Property(e => e.AvgConsumptionForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumptionForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm")
                    .HasComment("Начислено");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc")
                    .HasComment("Коэф-т расчета");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay")
                    .HasComment("Коэф-т расчета на диапазон дней");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays")
                    .HasComment("Кол-во дней действия");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse")
                    .HasComment("Коэф-т использования");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption")
                    .HasComment("Расход");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.InfoCalcFasetId).HasColumnName("infoCalcFasetId");

                entity.Property(e => e.InfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue");

                entity.Property(e => e.InfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue2");

                entity.Property(e => e.InfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue3");

                entity.Property(e => e.InfoCalcValue4)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue4");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter")
                    .HasComment("Сущесвтует ли счетчик");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate")
                    .HasComment("Информативное поле по тарифу на группу");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate")
                    .HasComment("Информативное поле по нормативу на дом");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate")
                    .HasComment("Информативное поле по тарифу на дом");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate")
                    .HasComment("Информативное поле по нормативу");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate")
                    .HasComment("Норматив");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay")
                    .HasComment("Норматив на диапазон дней");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate")
                    .HasComment("Тариф на конец месяца");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay")
                    .HasComment("Тариф на диапазон дней");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount")
                    .HasComment("Количество проживающих");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay")
                    .HasComment("Количество проживающих на диапазон дней");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource")
                    .HasComment("Фактический расход");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square")
                    .HasComment("Площадь");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay")
                    .HasComment("Площадь на диапазон дней");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate")
                    .HasComment("Подчиненный тариф");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor")
                    .HasComment("Коэффициент откючения");

                entity.HasOne(d => d.InfoCalcFaset)
                    .WithMany(p => p.AccountService2s)
                    .HasForeignKey(d => d.InfoCalcFasetId)
                    .HasConstraintName("FK_noticeAccountServices_infoCalcFasetId");
            });

            modelBuilder.Entity<AccountService3>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountServiceId })
                    .HasName("PK_repAccountServices");

                entity.ToTable("AccountServices", "rep");

                entity.HasIndex(e => new { e.Period, e.AccountId, e.ServiceTypeId }, "IX_repAccountServices__accountId_period_serviceTypeId");

                entity.HasIndex(e => new { e.Period, e.ApartmentId }, "IX_repAccountServices__apartmentId_period");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountFromDate");

                entity.Property(e => e.AccountHouseHolderId).HasColumnName("accountHouseHolderId");

                entity.Property(e => e.AccountHouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountHouseHolderName");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.ActualCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("actualCharge");

                entity.Property(e => e.ActualPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("actualPayment");

                entity.Property(e => e.AdministrationDistrictId).HasColumnName("administrationDistrictId");

                entity.Property(e => e.AdministrationDistrictName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("administrationDistrictName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalanceBeg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balanceBeg");

                entity.Property(e => e.BalanceCount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balanceCount");

                entity.Property(e => e.BalanceDelta)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balanceDelta");

                entity.Property(e => e.BalanceEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balanceEnd");

                entity.Property(e => e.CancelChargeBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeBenefitCurrentMonth");

                entity.Property(e => e.CancelChargeBenefitFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeBenefitFutureMonth");

                entity.Property(e => e.CancelChargeBenefitOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeBenefitOldMonth");

                entity.Property(e => e.CancelChargeCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeCurrentMonth");

                entity.Property(e => e.CancelChargeFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeFutureMonth");

                entity.Property(e => e.CancelChargeMonetizedBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeMonetizedBenefitCurrentMonth");

                entity.Property(e => e.CancelChargeMonetizedBenefitFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeMonetizedBenefitFutureMonth");

                entity.Property(e => e.CancelChargeMonetizedBenefitOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeMonetizedBenefitOldMonth");

                entity.Property(e => e.CancelChargeOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelChargeOldMonth");

                entity.Property(e => e.CancelDebtPaymentCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelDebtPaymentCurrentMonth");

                entity.Property(e => e.CancelDebtPaymentFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelDebtPaymentFutureMonth");

                entity.Property(e => e.CancelDebtPaymentOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelDebtPaymentOldMonth");

                entity.Property(e => e.CancelPaymentCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelPaymentCurrentMonth");

                entity.Property(e => e.CancelPaymentFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelPaymentFutureMonth");

                entity.Property(e => e.CancelPaymentOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cancelPaymentOldMonth");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.CashPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashPayment");

                entity.Property(e => e.CashReverse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashReverse");

                entity.Property(e => e.CashlessPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashlessPayment");

                entity.Property(e => e.CashlessReverse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashlessReverse");

                entity.Property(e => e.ChargeBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeBenefitCurrentMonth");

                entity.Property(e => e.ChargeMonetizedBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeMonetizedBenefitCurrentMonth");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterCount).HasColumnName("counterCount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedResidentVacationDaysCount).HasColumnName("createdResidentVacationDaysCount");

                entity.Property(e => e.CurrentCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentCharge");

                entity.Property(e => e.CurrentChargeRecalc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentChargeRecalc");

                entity.Property(e => e.DateLastPayment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateLastPayment");

                entity.Property(e => e.DebtPaymentCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPaymentCurrentMonth");

                entity.Property(e => e.DebtPaymentFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPaymentFutureMonth");

                entity.Property(e => e.DebtPaymentOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPaymentOldMonth");

                entity.Property(e => e.DecDebtCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("decDebtCurrentMonth");

                entity.Property(e => e.DecDebtFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("decDebtFutureMonth");

                entity.Property(e => e.DecDebtOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("decDebtOldMonth");

                entity.Property(e => e.FinalBuhCancelPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalBuhCancelPayment");

                entity.Property(e => e.FinalBuhPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalBuhPayment");

                entity.Property(e => e.FinalCashPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalCashPayment");

                entity.Property(e => e.FinalCashlessPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalCashlessPayment");

                entity.Property(e => e.FinalCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalCharge");

                entity.Property(e => e.FinalChargeBenefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeBenefit");

                entity.Property(e => e.FinalRecalcCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalRecalcCharge");

                entity.Property(e => e.FinalRecalcChargeBenefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalRecalcChargeBenefit");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IncDebtCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDebtCurrentMonth");

                entity.Property(e => e.IncDebtFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDebtFutureMonth");

                entity.Property(e => e.IncDebtOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDebtOldMonth");

                entity.Property(e => e.InitialActualCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("initialActualCharge");

                entity.Property(e => e.InitialActualRecalc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("initialActualRecalc");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.MonetizedBenefitPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitPayment");

                entity.Property(e => e.PaymentCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentCurrentMonth");

                entity.Property(e => e.PaymentFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentFutureMonth");

                entity.Property(e => e.PaymentOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentOldMonth");

                entity.Property(e => e.PaymentPercent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentPercent")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PenaltyBeg)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltyBeg");

                entity.Property(e => e.PenaltyCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltyCharge");

                entity.Property(e => e.PenaltyEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltyEnd");

                entity.Property(e => e.PenaltyPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltyPayment");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.RecalcChargeBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeBenefitCurrentMonth");

                entity.Property(e => e.RecalcChargeBenefitFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeBenefitFutureMonth");

                entity.Property(e => e.RecalcChargeBenefitOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeBenefitOldMonth");

                entity.Property(e => e.RecalcChargeCurrentMonthBySuspension)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeCurrentMonthBySuspension");

                entity.Property(e => e.RecalcChargeFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeFutureMonth");

                entity.Property(e => e.RecalcChargeFutureMonthBySuspension)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeFutureMonthBySuspension");

                entity.Property(e => e.RecalcChargeMonetizedBenefitCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeMonetizedBenefitCurrentMonth");

                entity.Property(e => e.RecalcChargeMonetizedBenefitFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeMonetizedBenefitFutureMonth");

                entity.Property(e => e.RecalcChargeMonetizedBenefitOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeMonetizedBenefitOldMonth");

                entity.Property(e => e.RecalcChargeOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeOldMonth");

                entity.Property(e => e.RecalcChargeOldMonthBySuspension)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcChargeOldMonthBySuspension");

                entity.Property(e => e.RemiteeOrganizationId).HasColumnName("remiteeOrganizationId");

                entity.Property(e => e.ResidentDaysCount).HasColumnName("residentDaysCount");

                entity.Property(e => e.ResidentVacationDaysCount).HasColumnName("residentVacationDaysCount");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderName");

                entity.Property(e => e.ServiceAddrId).HasColumnName("serviceAddrId");

                entity.Property(e => e.ServiceAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceAddrName");

                entity.Property(e => e.ServiceApartmentTypeId).HasColumnName("serviceApartmentTypeId");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceHouseHolderId).HasColumnName("serviceHouseHolderId");

                entity.Property(e => e.ServiceHouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceHouseHolderName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.Property(e => e.ServiceNormValue)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceNormValue");

                entity.Property(e => e.ServiceTariffId).HasColumnName("serviceTariffId");

                entity.Property(e => e.ServiceTariffRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceTariffRate");

                entity.Property(e => e.ServiceTariffRateForResource)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceTariffRateForResource");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Subsidy)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("subsidy");

                entity.Property(e => e.SubsidyPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("subsidyPayment");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransferDebtCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("transferDebtCurrentMonth");

                entity.Property(e => e.TransferDebtFutureMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("transferDebtFutureMonth");

                entity.Property(e => e.TransferDebtOldMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("transferDebtOldMonth");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<AccountService4>(entity =>
            {
                entity.ToTable("AccountServices", "sn");

                entity.HasIndex(e => e.ServiceId, "IX_AccountServices__serviceId");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate, e.ToDate }, "IX_AccountServices__serviceId_fromDate_toDate");

                entity.HasIndex(e => new { e.AccountId, e.FromDate, e.ToDate }, "IX_AccountServices_accountId_fromDate_toDate");

                entity.HasIndex(e => new { e.AccountId, e.ServiceId, e.FromDate }, "IX_AccountServices_accountId_serviceId_fromDate_toDate");

                entity.HasIndex(e => e.HouseHolderId, "IX_AccountServices_houseHolderId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AccountId)
                    .HasColumnName("accountId")
                    .HasComment("Ссылка на уникальный идентификатор записи ID таблицы Accounts");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderId)
                    .HasColumnName("houseHolderId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы HouseHouseHolder");

                entity.Property(e => e.KodCl)
                    .HasColumnName("kod_cl")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.KodObj)
                    .HasColumnName("kod_obj")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("serviceId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Services");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountService4s)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServices_Accounts");

                entity.HasOne(d => d.CloseDoc)
                    .WithMany(p => p.AccountService4CloseDocs)
                    .HasForeignKey(d => d.CloseDocId);

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.AccountService4s)
                    .HasForeignKey(d => d.HouseHolderId)
                    .HasConstraintName("FK_AccountServices_Organizations");

                entity.HasOne(d => d.OpenDoc)
                    .WithMany(p => p.AccountService4OpenDocs)
                    .HasForeignKey(d => d.OpenDocId);

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.AccountService4s)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServices_Services");
            });

            modelBuilder.Entity<AccountServiceCounter>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Period })
                    .HasName("PK_repAccountServiceCounters");

                entity.ToTable("AccountServiceCounters", "rep");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.FromDate, e.ToDate, e.CounterType }, "IX_repAccountServiceCounters__accountServiceId_period_fromDate_toDate_counterType");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId, e.CounterId }, "IX_repAccountServiceCounters__period_accountServiceId_counterId");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId, e.FromDate, e.ToDate, e.CounterType }, "IX_repAccountServiceCounters__period_accountServiceId_fromDate_toDate_counterType");

                entity.HasIndex(e => new { e.Period, e.CounterId }, "IX_repAccountServiceCounters__period_counterId");

                entity.HasIndex(e => new { e.Period, e.FromDate, e.ToDate, e.CounterType }, "IX_repAccountServiceCounters__period_fromDate_toDate_counterType");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSubTariffRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterSubTariffRate");

                entity.Property(e => e.CounterType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterType");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateLastPay)
                    .HasColumnType("datetime")
                    .HasColumnName("dateLastPay");

                entity.Property(e => e.EndIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("endIndication");

                entity.Property(e => e.EndIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("endIndicationDate");

                entity.Property(e => e.ExternalFactor)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("externalFactor");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("factor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.PaymentShare)
                    .HasColumnType("decimal(4, 3)")
                    .HasColumnName("paymentShare");

                entity.Property(e => e.StartIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("startIndication");

                entity.Property(e => e.StartIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startIndicationDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<AccountServiceCounter1>(entity =>
            {
                entity.ToTable("AccountServiceCounters", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX_AccountServiceCounters__accountServiceId_inc_counterId");

                entity.HasIndex(e => e.CounterId, "IX_AccountServiceCounters__counterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(6, 3)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OldTodate)
                    .HasColumnType("datetime")
                    .HasColumnName("oldTodate");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(5, 4)")
                    .HasColumnName("share");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceCounter1s)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceCounters_AccountServices");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.AccountServiceCounter1s)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceCounters_ApartmentCounters");
            });

            modelBuilder.Entity<AccountServiceCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceCountersView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.CounterCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("counterCreated");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeId).HasColumnName("counterTypeId");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaddleTypeId).HasColumnName("maddleTypeId");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(5, 4)")
                    .HasColumnName("share");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceDocument>(entity =>
            {
                entity.ToTable("AccountServiceDocuments", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX_AccountServiceDocuments_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.DocumentId).HasColumnName("documentId");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceDocuments)
                    .HasForeignKey(d => d.AccountServiceId)
                    .HasConstraintName("FK_AccountServiceDocuments_AccountServices");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.AccountServiceDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_AccountServiceDocuments_OrgDocuments");
            });

            modelBuilder.Entity<AccountServiceDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceDocumentsView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docTypeName");

                entity.Property(e => e.DocumentId).HasColumnName("documentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceEquipment>(entity =>
            {
                entity.ToTable("AccountServiceEquipments", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate }, "IX_AccountServiceEquipments_accountServiceId_fromDate");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate, e.ToDate }, "IX_AccountServiceEquipments_accountServiceId_fromDate_toDate");

                entity.HasIndex(e => new { e.AccountServiceId, e.ToDate }, "IX_AccountServiceEquipments_accountServiceId_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentEquipmentId).HasColumnName("apartmentEquipmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceEquipments)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceEquipments_AccountServices");

                entity.HasOne(d => d.ApartmentEquipment)
                    .WithMany(p => p.AccountServiceEquipments)
                    .HasForeignKey(d => d.ApartmentEquipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceEquipments_ApartmentEquipments");
            });

            modelBuilder.Entity<AccountServiceEquipmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceEquipmentsView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentEquipmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentEquipmentCreated");

                entity.Property(e => e.ApartmentEquipmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentEquipmentFromDate");

                entity.Property(e => e.ApartmentEquipmentId).HasColumnName("apartmentEquipmentId");

                entity.Property(e => e.ApartmentEquipmentInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEquipmentInfo");

                entity.Property(e => e.ApartmentEquipmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentEquipmentToDate");

                entity.Property(e => e.ApartmentEquipmentTypeId).HasColumnName("apartmentEquipmentTypeId");

                entity.Property(e => e.ApartmentEquipmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEquipmentTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceInfo>(entity =>
            {
                entity.ToTable("AccountServiceInfos", "rep");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period }, "IX_repAccountService__accountServiceId_period");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId }, "IX_repAccountService__period_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LikeCalcsResidents)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("likeCalcsResidents");

                entity.Property(e => e.Min1Resident).HasColumnName("min1Resident");

                entity.Property(e => e.OnEndOwners).HasColumnName("onEndOwners");

                entity.Property(e => e.OnEndResidentNotVacations).HasColumnName("onEndResidentNotVacations");

                entity.Property(e => e.OnEndResidentVacations).HasColumnName("onEndResidentVacations");

                entity.Property(e => e.OnEndResidents).HasColumnName("onEndResidents");

                entity.Property(e => e.OwnerDays).HasColumnName("ownerDays");

                entity.Property(e => e.OwnerMonths)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ownerMonths");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ResidentDaysAll).HasColumnName("residentDaysAll");

                entity.Property(e => e.ResidentDaysNotVacation).HasColumnName("residentDaysNotVacation");

                entity.Property(e => e.ResidentDaysVacation).HasColumnName("residentDaysVacation");

                entity.Property(e => e.ResidentMonthsAll)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentMonthsAll");

                entity.Property(e => e.ResidentMonthsNotVacation)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentMonthsNotVacation");

                entity.Property(e => e.ResidentMonthsVacation)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentMonthsVacation");

                entity.Property(e => e.UniqueOwners).HasColumnName("uniqueOwners");

                entity.Property(e => e.UniqueResidentNotAllVacations).HasColumnName("uniqueResidentNotAllVacations");

                entity.Property(e => e.UniqueResidentVacations).HasColumnName("uniqueResidentVacations");

                entity.Property(e => e.UniqueResidents).HasColumnName("uniqueResidents");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<AccountServiceInfosView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceInfosView", "sn");

                entity.Property(e => e.AccountFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountFromDate");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceHouseHolderId).HasColumnName("serviceHouseHolderId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceJudgment>(entity =>
            {
                entity.ToTable("AccountServiceJudgments", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceJudgments)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceJudgments_AccountServices");
            });

            modelBuilder.Entity<AccountServiceNorm>(entity =>
            {
                entity.ToTable("AccountServiceNorms", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate }, "UX_accountServiceNorm__accountServiceId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceNorms)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceNorms_AccountServices");

                entity.HasOne(d => d.ByUnit)
                    .WithMany(p => p.AccountServiceNormByUnits)
                    .HasForeignKey(d => d.ByUnitId)
                    .HasConstraintName("FK_AccountServiceNorms_ByUnits");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.AccountServiceNorms)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_AccountServiceNorms_OrgDocuments");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.AccountServiceNormUnits)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceNorms_Units");
            });

            modelBuilder.Entity<AccountServiceNormType>(entity =>
            {
                entity.ToTable("AccountServiceNormTypes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceNormId).HasColumnName("accountServiceNormId");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.HasOne(d => d.AccountServiceNorm)
                    .WithMany(p => p.AccountServiceNormTypes)
                    .HasForeignKey(d => d.AccountServiceNormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceNormTypes_AccountServiceNorms");

                entity.HasOne(d => d.ApartmentProperty)
                    .WithMany(p => p.AccountServiceNormTypes)
                    .HasForeignKey(d => d.ApartmentPropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceNormTypes_FasetItems");
            });

            modelBuilder.Entity<AccountServiceNormTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceNormTypesView", "sn");

                entity.Property(e => e.AccountServiceNormId).HasColumnName("accountServiceNormId");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.ApartmentPropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentPropertyName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");
            });

            modelBuilder.Entity<AccountServiceNormTypesWithLastNormView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceNormTypesWithLastNormView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormId).HasColumnName("accountServiceNormId");

                entity.Property(e => e.AccountServiceNormTypeId).HasColumnName("accountServiceNormTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("norm_rate");

                entity.Property(e => e.NormTypeId).HasColumnName("normTypeId");

                entity.Property(e => e.NormTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normTypeName");

                entity.Property(e => e.NormtypeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normtype_rate");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<AccountServiceNormsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceNormsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.ByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("byUnitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<AccountServicePaymentInstallment>(entity =>
            {
                entity.ToTable("AccountServicePaymentInstallments", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX__snAccountServicePaymentInstallments_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateOfInstallmentAgreement)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfInstallmentAgreement");

                entity.Property(e => e.DatePayment)
                    .HasColumnType("datetime")
                    .HasColumnName("datePayment");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServicePaymentInstallments)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccSPaymentInstallments_AccountServices");
            });

            modelBuilder.Entity<AccountServicePaymentInstallmentPart>(entity =>
            {
                entity.HasKey(e => new { e.AccountServicePaymentInstallmentId, e.Period })
                    .HasName("PK__AccountServicePaymentInstallmentParts");

                entity.ToTable("AccountServicePaymentInstallmentParts", "sn");

                entity.HasIndex(e => e.AccountServicePaymentInstallmentId, "IX__snAccountServicePaymentInstallmentParts_accountServicePaymentInstallmentId");

                entity.Property(e => e.AccountServicePaymentInstallmentId).HasColumnName("accountServicePaymentInstallmentId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.AccountServicePaymentInstallment)
                    .WithMany(p => p.AccountServicePaymentInstallmentParts)
                    .HasForeignKey(d => d.AccountServicePaymentInstallmentId)
                    .HasConstraintName("FK_AccountServicePaymentInstallmentParts_AccountServicePaymentInstallment");
            });

            modelBuilder.Entity<AccountServicePaymentInstallmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicePaymentInstallmentsView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateOfInstallmentAgreement)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfInstallmentAgreement");

                entity.Property(e => e.DatePayment)
                    .HasColumnType("datetime")
                    .HasColumnName("datePayment");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastDayOfMonthCorrect)
                    .HasColumnType("datetime")
                    .HasColumnName("lastDayOfMonthCorrect");

                entity.Property(e => e.PartSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("partSumm");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.PeriodCount).HasColumnName("periodCount");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.StartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("startPeriod");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServicePenaltyRemission>(entity =>
            {
                entity.ToTable("AccountServicePenaltyRemission", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate, e.ToDate }, "IX_AccountServicePenaltyRemission_accountServiceId_fomDate_toDate")
                    .IsUnique();

                entity.HasIndex(e => e.GroupId, "IX_AccoutServicePenaltyRemission__groupId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServicePenaltyRemissions)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServicePenaltyRemission_AccountServices");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.AccountServicePenaltyRemissions)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_accountServicePenaltyRemission_docs");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.AccountServicePenaltyRemissions)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_AccountServicePenaltyRemission_GroupOperations");
            });

            modelBuilder.Entity<AccountServicePenaltyRemissionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicePenaltyRemissionView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(371)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceRelation>(entity =>
            {
                entity.ToTable("AccountServiceRelations", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX_AccountServiceRelations_accountServiceId");

                entity.HasIndex(e => new { e.ParentId, e.FromDate }, "IX_AccountServiceRelations_parentId_fromDate");

                entity.HasIndex(e => new { e.ParentId, e.ToDate }, "IX_AccountServiceRelations_parentId_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceRelationAccountServices)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceRelations_AccountServices__accountServiceId");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.AccountServiceRelationParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceRelations_AccountServices__parentId");
            });

            modelBuilder.Entity<AccountServiceRelationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceRelationsView", "sn");

                entity.Property(e => e.AccountServiceCode).HasColumnName("accountServiceCode");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceName");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.AccountServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceSubQuality>(entity =>
            {
                entity.ToTable("AccountServiceSubQuality", "sn");

                entity.HasIndex(e => e.AccountServiceId, "AccountServiceSubQuality__accountServiceId");

                entity.HasIndex(e => e.GroupOperId, "IX_AccountServiceSubQuality__groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceSubQualities)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceSubQuality_AccountServices");

                entity.HasOne(d => d.CalcType)
                    .WithMany(p => p.AccountServiceSubQualities)
                    .HasForeignKey(d => d.CalcTypeId)
                    .HasConstraintName("FK_AccountServiceSubQuality_FasetItems");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.AccountServiceSubQualities)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceSubQuality_GroupOperations");

                entity.HasOne(d => d.Stsqad)
                    .WithMany(p => p.AccountServiceSubQualities)
                    .HasForeignKey(d => d.StsqadId)
                    .HasConstraintName("FK_AccountServiceSubQuality_ServiceTypeSubQualityAcceptableDurations");

                entity.HasOne(d => d.Stsqp)
                    .WithMany(p => p.AccountServiceSubQualities)
                    .HasForeignKey(d => d.StsqpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceSubQuality_ServiceTypeSubQualityPercents");
            });

            modelBuilder.Entity<AccountServiceSubQualityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceSubQualityView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.CalcTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("docName");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeSubQualityId).HasColumnName("serviceTypeSubQualityId");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceSuspension>(entity =>
            {
                entity.ToTable("AccountServiceSuspension", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.TypeSuspension }, "IX_AccountServiceSuspension__accountServiceId_typeSuspension");

                entity.HasIndex(e => e.GroupOperId, "IX_AccountServiceSuspension__groupOperId");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate, e.ToDate }, "IX_AccountServiceSuspension_accountServiceId_fromDate_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Notice)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notice");

                entity.Property(e => e.PercentAffected)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("percentAffected");

                entity.Property(e => e.SquareAffected)
                    .HasColumnType("decimal(7, 2)")
                    .HasColumnName("squareAffected");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeSuspension).HasColumnName("typeSuspension");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceSuspensions)
                    .HasForeignKey(d => d.AccountServiceId)
                    .HasConstraintName("FK_AccountServiceSuspension_AccountServices");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.AccountServiceSuspensions)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_AccountServiceSuspension_GroupOperations");

                entity.HasOne(d => d.TypeSuspensionNavigation)
                    .WithMany(p => p.AccountServiceSuspensions)
                    .HasForeignKey(d => d.TypeSuspension)
                    .HasConstraintName("FK_AccountServiceSuspension_TypeSyspension");
            });

            modelBuilder.Entity<AccountServiceSuspensionSquare>(entity =>
            {
                entity.ToTable("AccountServiceSuspensionSquares", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RoomPercent)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("roomPercent");

                entity.Property(e => e.RoomSquare)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("roomSquare");

                entity.Property(e => e.SuspensionId).HasColumnName("suspensionId");

                entity.HasOne(d => d.Suspension)
                    .WithMany(p => p.AccountServiceSuspensionSquares)
                    .HasForeignKey(d => d.SuspensionId)
                    .HasConstraintName("FK_AccountServiceSuspensionSquares_AccountServiceSuspension");
            });

            modelBuilder.Entity<AccountServiceSuspensionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceSuspensionView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Notice)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notice");

                entity.Property(e => e.PercentAffected)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("percentAffected");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.SquareAffected)
                    .HasColumnType("decimal(7, 2)")
                    .HasColumnName("squareAffected");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeSuspension).HasColumnName("typeSuspension");

                entity.Property(e => e.TypeSuspensionName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeSuspensionName");
            });

            modelBuilder.Entity<AccountServiceTariff>(entity =>
            {
                entity.ToTable("AccountServiceTariffs", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate }, "UIX_AccountServiceTarrifs__accountServiceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceTariffs)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceTariffs_AccountServices");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.AccountServiceTariffs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_AccountServiceTariffs_OrgDocuments");
            });

            modelBuilder.Entity<AccountServiceTariffNormView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceTariffNormView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(414)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.NormByUnitId).HasColumnName("normByUnitId");

                entity.Property(e => e.NormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("normFromDate");

                entity.Property(e => e.NormId).HasColumnName("normId");

                entity.Property(e => e.NormUnitId).HasColumnName("normUnitId");

                entity.Property(e => e.RateNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNorm");

                entity.Property(e => e.RateTariff)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("rateTariff");

                entity.Property(e => e.TariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffFromDate");

                entity.Property(e => e.TariffId).HasColumnName("tariffId");

                entity.Property(e => e.TariffServiceTypeId).HasColumnName("tariffServiceTypeId");

                entity.Property(e => e.TariffServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceTypeName");
            });

            modelBuilder.Entity<AccountServiceTariffType>(entity =>
            {
                entity.ToTable("AccountServiceTariffTypes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceTariffId).HasColumnName("accountServiceTariffId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.HasOne(d => d.AccountServiceTariff)
                    .WithMany(p => p.AccountServiceTariffTypes)
                    .HasForeignKey(d => d.AccountServiceTariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceTariffTypes_AccountServiceTariffs");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.AccountServiceTariffTypes)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountServiceTariffTypes_FasetItems");
            });

            modelBuilder.Entity<AccountServiceTariffTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceTariffTypesView", "sn");

                entity.Property(e => e.AccountServiceTariffId).HasColumnName("accountServiceTariffId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffTypeName");
            });

            modelBuilder.Entity<AccountServiceTariffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceTariffsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServiceTransfer>(entity =>
            {
                entity.ToTable("AccountServiceTransfers", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_AccountServiceTransfers_GroupOperId");

                entity.HasIndex(e => new { e.AccountServiceId, e.FromDate, e.ToDate }, "UIX_AccountServiceTransfers")
                    .IsUnique();

                entity.HasIndex(e => e.AccountServiceNewId, "ix_AccountServiceTransfers_accountServiceNewId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNewId).HasColumnName("accountServiceNewId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.AccountServiceTransferAccountServices)
                    .HasForeignKey(d => d.AccountServiceId)
                    .HasConstraintName("FK_AccountServiceTransfers_accountServiceId");

                entity.HasOne(d => d.AccountServiceNew)
                    .WithMany(p => p.AccountServiceTransferAccountServiceNews)
                    .HasForeignKey(d => d.AccountServiceNewId)
                    .HasConstraintName("FK_AccountServiceTransfers_accountServiceNewId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.AccountServiceTransfers)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_AccountServiceTransfers_groupOperId");
            });

            modelBuilder.Entity<AccountServiceTransfersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServiceTransfersView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNewHouseHolderCode).HasColumnName("accountServiceNewHouseHolderCode");

                entity.Property(e => e.AccountServiceNewHouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceNewHouseHolderName");

                entity.Property(e => e.AccountServiceNewId).HasColumnName("accountServiceNewId");

                entity.Property(e => e.AccountServiceNewProviderCode).HasColumnName("accountServiceNewProviderCode");

                entity.Property(e => e.AccountServiceNewProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceNewProviderName");

                entity.Property(e => e.AccountServiceNewServiceCode).HasColumnName("accountServiceNewServiceCode");

                entity.Property(e => e.AccountServiceNewServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceNewServiceName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServicesSubQuality>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountServicesSubQuality", "cp");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period }, "IX_cpAccountServicesSubQuality_period_accountServiceId")
                    .IsClustered();

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalculatedPercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("calculatedPercent");

                entity.Property(e => e.CalculatedSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("calculatedSumm");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");
            });

            modelBuilder.Entity<AccountServicesSubQuality1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AccountServicesSubQuality", "notice");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period }, "IX_NoticeAccountServicesSubQuality_period_accountServiceId")
                    .IsClustered();

                entity.HasIndex(e => e.Id, "PK_NoticeAccountServicesSubQuality_id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalculatedPercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("calculatedPercent");

                entity.Property(e => e.CalculatedSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("calculatedSumm");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");
            });

            modelBuilder.Entity<AccountServicesToRecalc>(entity =>
            {
                entity.ToTable("AccountServicesToRecalc", "sn");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId }, "IX_AccountServicesToRecalc_period_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsCalculated).HasColumnName("isCalculated");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<AccountServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesView", "sn");

                entity.Property(e => e.AccountCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("accountCreated");

                entity.Property(e => e.AccountFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountFromDate");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountKodCl).HasColumnName("accountKod_cl");

                entity.Property(e => e.AccountKodObj).HasColumnName("accountKod_obj");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("algorithmName");

                entity.Property(e => e.ApartmentAddrLevel).HasColumnName("apartmentAddrLevel");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentAdrId).HasColumnName("apartmentAdrId");

                entity.Property(e => e.ApartmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCreated");

                entity.Property(e => e.ApartmentDoorWay).HasColumnName("apartmentDoorWay");

                entity.Property(e => e.ApartmentEnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEnergoAccount");

                entity.Property(e => e.ApartmentFloorHouse).HasColumnName("apartmentFloorHouse");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentKodCl).HasColumnName("apartmentKod_cl");

                entity.Property(e => e.ApartmentKodObj).HasColumnName("apartmentKod_obj");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.ApartmentRoomsCount).HasColumnName("apartmentRoomsCount");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalancePeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancePeni");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.ClUsl).HasColumnName("cl_usl");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.CloseDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("closeDocOrgName");

                entity.Property(e => e.CounterCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterCount");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.CurrentRateId).HasColumnName("currentRateId");

                entity.Property(e => e.EquipmentCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("equipmentCount");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterCode).HasColumnName("financialCenterCode");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FinancialCenterLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterLongName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderLongName");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsServiceBankrupt).HasColumnName("isServiceBankrupt");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.LastRateId).HasColumnName("lastRateId");

                entity.Property(e => e.ObjUsl).HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("openDocOrgName");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PeriodCashlessPayments)
                    .HasColumnType("datetime")
                    .HasColumnName("periodCashlessPayments");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerLongName");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ResourceProviderCode).HasColumnName("resourceProviderCode");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderLongName");

                entity.Property(e => e.ResourceProviderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderShortName");

                entity.Property(e => e.SeasonalCount).HasColumnName("seasonalCount");

                entity.Property(e => e.ServiceApartmentTypeId).HasColumnName("serviceApartmentTypeId");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceLongName");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeGroupCode).HasColumnName("serviceTypeGroupCode");

                entity.Property(e => e.ServiceTypeGroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeGroupName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeParentId).HasColumnName("serviceTypeParentId");

                entity.Property(e => e.SummCashlessPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summCashlessPayments");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.UseAccountServiceGroups).HasColumnName("useAccountServiceGroups");
            });

            modelBuilder.Entity<AccountServicesViewForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewForLK", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<AccountServicesViewUi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewUi", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalancePeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancePeni");

                entity.Property(e => e.CounterCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterCount");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.EquipmentCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("equipmentCount");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.SummCashlessPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summCashlessPayments");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServicesViewWithBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewWithBalance", "CRM");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalancePeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancePeni");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountServicesViewWithBalance1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewWithBalance", "sn");

                entity.Property(e => e.AccountCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("accountCreated");

                entity.Property(e => e.AccountFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountFromDate");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountKodCl).HasColumnName("accountKod_cl");

                entity.Property(e => e.AccountKodObj).HasColumnName("accountKod_obj");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("algorithmName");

                entity.Property(e => e.ApartmentAddrLevel).HasColumnName("apartmentAddrLevel");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentAdrId).HasColumnName("apartmentAdrId");

                entity.Property(e => e.ApartmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCreated");

                entity.Property(e => e.ApartmentDoorWay).HasColumnName("apartmentDoorWay");

                entity.Property(e => e.ApartmentEnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEnergoAccount");

                entity.Property(e => e.ApartmentFloorHouse).HasColumnName("apartmentFloorHouse");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentKodCl).HasColumnName("apartmentKod_cl");

                entity.Property(e => e.ApartmentKodObj).HasColumnName("apartmentKod_obj");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.ApartmentRoomsCount).HasColumnName("apartmentRoomsCount");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalancePeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancePeni");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.ClUsl).HasColumnName("cl_usl");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.CloseDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("closeDocOrgName");

                entity.Property(e => e.CounterCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterCount");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.CurrentRateId).HasColumnName("currentRateId");

                entity.Property(e => e.EquipmentCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("equipmentCount");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterCode).HasColumnName("financialCenterCode");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FinancialCenterLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterLongName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderLongName");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsServiceBankrupt).HasColumnName("isServiceBankrupt");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.LastRateId).HasColumnName("lastRateId");

                entity.Property(e => e.ObjUsl).HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("openDocOrgName");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PeriodCashlessPayments)
                    .HasColumnType("datetime")
                    .HasColumnName("periodCashlessPayments");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerLongName");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ResourceProviderCode).HasColumnName("resourceProviderCode");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderLongName");

                entity.Property(e => e.ResourceProviderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderShortName");

                entity.Property(e => e.SeasonalCount).HasColumnName("seasonalCount");

                entity.Property(e => e.ServiceApartmentTypeId).HasColumnName("serviceApartmentTypeId");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceLongName");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeGroupCode).HasColumnName("serviceTypeGroupCode");

                entity.Property(e => e.ServiceTypeGroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeGroupName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeParentId).HasColumnName("serviceTypeParentId");

                entity.Property(e => e.SummCashlessPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summCashlessPayments");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.UseAccountServiceGroups).HasColumnName("useAccountServiceGroups");
            });

            modelBuilder.Entity<AccountServicesViewWithMaxCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewWithMaxCharge", "cp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoCalcNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcNormRate");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");
            });

            modelBuilder.Entity<AccountServicesViewWithMaxCharge1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewWithMaxCharge", "notice");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AnnuityPaymentMonthPercents).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnnuityPaymentRefinanceRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnnuityPaymentTotalSumm).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnySubServiceCode).HasColumnName("anySubServiceCode");

                entity.Property(e => e.AvgConsumptionForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumptionForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.CalcPercentRefinanceRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.CalcPercentSaldo).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ElectroCoeffChargeSumm).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroCoefficientK).HasColumnType("numeric(2, 1)");

                entity.Property(e => e.ElectroDayRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroDayResource).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroNightResource).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncreaseCoefficientK)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientK");

                entity.Property(e => e.IncreaseCoefficientRateByVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientRateByVolume");

                entity.Property(e => e.IncreaseCoefficientResource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientResource");

                entity.Property(e => e.InfoCalcNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcNormRate");

                entity.Property(e => e.InfoEnergoServiceResource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoEnergoServiceResource");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoHouseRateNonGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseRateNonGiga");

                entity.Property(e => e.InfoHouseResourceGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseResourceGiga");

                entity.Property(e => e.InfoHouseResourceNonGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseResourceNonGiga");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.ViewNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("viewNormRate");
            });

            modelBuilder.Entity<AccountServicesViewWithoutMaxCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesViewWithoutMaxCharge", "notice");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AnnuityPaymentMonthPercents).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnnuityPaymentRefinanceRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnnuityPaymentTotalSumm).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.AnySubServiceCode).HasColumnName("anySubServiceCode");

                entity.Property(e => e.AvgConsumptionForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumptionForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.CalcPercentRefinanceRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.CalcPercentSaldo).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ElectroCoeffChargeSumm).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroCoefficientK).HasColumnType("numeric(2, 1)");

                entity.Property(e => e.ElectroDayRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroDayResource).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ElectroNightResource).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncreaseCoefficientK)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientK");

                entity.Property(e => e.IncreaseCoefficientRateByVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientRateByVolume");

                entity.Property(e => e.IncreaseCoefficientResource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("increaseCoefficientResource");

                entity.Property(e => e.InfoCalcNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcNormRate");

                entity.Property(e => e.InfoEnergoServiceResource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoEnergoServiceResource");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoHouseRateNonGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseRateNonGiga");

                entity.Property(e => e.InfoHouseResourceGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseResourceGiga");

                entity.Property(e => e.InfoHouseResourceNonGiga)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("infoHouseResourceNonGiga");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.ViewNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("viewNormRate");
            });

            modelBuilder.Entity<AccountServicesWithArchivView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountServicesWithArchivView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.BalancePeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancePeni");

                entity.Property(e => e.CounterCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterCount");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.EquipmentCount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("equipmentCount");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.SummCashlessPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summCashlessPayments");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<AccountTypeDocument>(entity =>
            {
                entity.ToTable("AccountTypeDocuments", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.HasOne(d => d.ReportTemplate)
                    .WithMany(p => p.AccountTypeDocuments)
                    .HasForeignKey(d => d.ReportTemplateId)
                    .HasConstraintName("FK__AccountTypeDocuments_ReportTemplates");
            });

            modelBuilder.Entity<AccountTypeDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountTypeDocumentsView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.ReportTemplateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reportTemplateName");
            });

            modelBuilder.Entity<AccountsOtherView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountsOtherView", "sp");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.CountByNumber).HasColumnName("countByNumber");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Fio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgCommission)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("orgCommission");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceProviderBankAccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("serviceProviderBankAccountNumber");

                entity.Property(e => e.ServiceProviderBankBik)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankBIK")
                    .IsFixedLength(true);

                entity.Property(e => e.ServiceProviderBankCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankCity");

                entity.Property(e => e.ServiceProviderBankLoro)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("serviceProviderBankLoro");

                entity.Property(e => e.ServiceProviderBankName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankName");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.ServiceProviderInn).HasColumnName("serviceProviderINN");

                entity.Property(e => e.ServiceProviderKpp).HasColumnName("serviceProviderKPP");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderName");

                entity.Property(e => e.ServiceProviderTelephone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderTelephone");

                entity.Property(e => e.SnOrgId).HasColumnName("snOrgId");

                entity.Property(e => e.SumDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sumDebt");
            });

            modelBuilder.Entity<AccountsOtherWithDebtView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountsOtherWithDebtView", "sp");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.CountByNumber).HasColumnName("countByNumber");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Fio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgCommission)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("orgCommission");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceProviderBankAccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("serviceProviderBankAccountNumber");

                entity.Property(e => e.ServiceProviderBankBik)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankBIK")
                    .IsFixedLength(true);

                entity.Property(e => e.ServiceProviderBankCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankCity");

                entity.Property(e => e.ServiceProviderBankLoro)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("serviceProviderBankLoro");

                entity.Property(e => e.ServiceProviderBankName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderBankName");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.ServiceProviderInn).HasColumnName("serviceProviderINN");

                entity.Property(e => e.ServiceProviderKpp).HasColumnName("serviceProviderKPP");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderName");

                entity.Property(e => e.ServiceProviderTelephone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderTelephone");

                entity.Property(e => e.SnOrgId).HasColumnName("snOrgId");

                entity.Property(e => e.SumDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sumDebt");
            });

            modelBuilder.Entity<AccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountsView", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdministrationDistrictId).HasColumnName("administrationDistrictId");

                entity.Property(e => e.AdministrationDistrictName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("administrationDistrictName");

                entity.Property(e => e.ApartmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCreated");

                entity.Property(e => e.ApartmentDoorWay).HasColumnName("apartmentDoorWay");

                entity.Property(e => e.ApartmentEnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEnergoAccount");

                entity.Property(e => e.ApartmentFloorHouse).HasColumnName("apartmentFloorHouse");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentRoomsCount).HasColumnName("apartmentRoomsCount");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.ClLs).HasColumnName("cl_ls");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateComment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateComment");

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docInfo");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdentityCardHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("identityCardHolderName");

                entity.Property(e => e.IdentityCardNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("identityCardNumber");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsCloseInPaymentSystem).HasColumnName("isCloseInPaymentSystem");

                entity.Property(e => e.NeedEmailNotice).HasColumnName("needEmailNotice");

                entity.Property(e => e.NeedOwnerPresence).HasColumnName("needOwnerPresence");

                entity.Property(e => e.NeedPrintNotice).HasColumnName("needPrintNotice");

                entity.Property(e => e.NeedSendAndPrintNotice).HasColumnName("needSendAndPrintNotice");

                entity.Property(e => e.NoticeAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("noticeAddressName");

                entity.Property(e => e.NoticeAdrId).HasColumnName("noticeAdrId");

                entity.Property(e => e.NoticeAdrName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrName");

                entity.Property(e => e.NoticeAdrPostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrPostalIndex");

                entity.Property(e => e.NoticeEmail)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("noticeEmail");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ObjLs).HasColumnName("obj_ls");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.OwnerOrgId).HasColumnName("ownerOrgId");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");

                entity.Property(e => e.PersonAge).HasColumnName("personAge");

                entity.Property(e => e.PgCl).HasColumnName("pg_cl");

                entity.Property(e => e.PgObj).HasColumnName("pg_obj");

                entity.Property(e => e.SetCounterIndicationWoauth).HasColumnName("setCounterIndicationWOAuth");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeBudget).HasColumnName("typeBudget");

                entity.Property(e => e.TypeBudgetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeBudgetName");

                entity.Property(e => e.UseAccountServiceGroups).HasColumnName("useAccountServiceGroups");
            });

            modelBuilder.Entity<AccountsView1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountsView", "sp");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Fio)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.SnOrgId).HasColumnName("snOrgId");

                entity.Property(e => e.SnOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("snOrgName");
            });

            modelBuilder.Entity<AccountsViewNotArchived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountsViewNotArchived", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdministrationDistrictId).HasColumnName("administrationDistrictId");

                entity.Property(e => e.AdministrationDistrictName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("administrationDistrictName");

                entity.Property(e => e.ApartmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCreated");

                entity.Property(e => e.ApartmentDoorWay).HasColumnName("apartmentDoorWay");

                entity.Property(e => e.ApartmentEnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("apartmentEnergoAccount");

                entity.Property(e => e.ApartmentFloorHouse).HasColumnName("apartmentFloorHouse");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentRoomsCount).HasColumnName("apartmentRoomsCount");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.ClLs).HasColumnName("cl_ls");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateComment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateComment");

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docInfo");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdentityCardHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("identityCardHolderName");

                entity.Property(e => e.IdentityCardNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("identityCardNumber");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsCloseInPaymentSystem).HasColumnName("isCloseInPaymentSystem");

                entity.Property(e => e.NeedEmailNotice).HasColumnName("needEmailNotice");

                entity.Property(e => e.NeedOwnerPresence).HasColumnName("needOwnerPresence");

                entity.Property(e => e.NeedPrintNotice).HasColumnName("needPrintNotice");

                entity.Property(e => e.NeedSendAndPrintNotice).HasColumnName("needSendAndPrintNotice");

                entity.Property(e => e.NoticeAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("noticeAddressName");

                entity.Property(e => e.NoticeAdrId).HasColumnName("noticeAdrId");

                entity.Property(e => e.NoticeAdrName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrName");

                entity.Property(e => e.NoticeAdrPostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrPostalIndex");

                entity.Property(e => e.NoticeEmail)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("noticeEmail");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ObjLs).HasColumnName("obj_ls");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.OwnerOrgId).HasColumnName("ownerOrgId");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");

                entity.Property(e => e.PersonAge).HasColumnName("personAge");

                entity.Property(e => e.PgCl).HasColumnName("pg_cl");

                entity.Property(e => e.PgObj).HasColumnName("pg_obj");

                entity.Property(e => e.SetCounterIndicationWoauth).HasColumnName("setCounterIndicationWOAuth");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeBudget).HasColumnName("typeBudget");

                entity.Property(e => e.TypeBudgetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeBudgetName");

                entity.Property(e => e.UseAccountServiceGroups).HasColumnName("useAccountServiceGroups");
            });

            modelBuilder.Entity<SNModels.Action>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.Id })
                    .HasName("PK__noticeActions");

                entity.ToTable("Actions", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeActions_id")
                    .IsUnique();

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CountAccounts).HasColumnName("countAccounts");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NoticeTemplateSettingIdIfOne).HasColumnName("noticeTemplateSettingIdIfOne");

                entity.Property(e => e.StartFromArmpaymentNotices).HasColumnName("startFromARMPaymentNotices");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.NoticeTemplateSettingIdIfOneNavigation)
                    .WithMany(p => p.Actions)
                    .HasForeignKey(d => d.NoticeTemplateSettingIdIfOne)
                    .HasConstraintName("FK__noticeActions__noticeTemplateSettingIdIfOne");
            });

            modelBuilder.Entity<Action1>(entity =>
            {
                entity.ToTable("Actions", "sn");

                entity.HasIndex(e => e.ObjectId, "IX_Actions_objectId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CanceledAction).HasColumnName("canceledAction");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupFasetId).HasColumnName("groupFasetId");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.ObjectTypeFasetId).HasColumnName("objectTypeFasetId");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Action1s)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Actions_Users");
            });

            modelBuilder.Entity<ActionDistributed>(entity =>
            {
                entity.HasKey(e => e.ActionId)
                    .HasName("PK_noticeActionDistributed");

                entity.ToTable("ActionDistributed", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeActionDistributed_Id")
                    .IsUnique();

                entity.Property(e => e.ActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("actionId");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndexPartPrimaryStation).HasColumnName("indexPartPrimaryStation");

                entity.Property(e => e.IsBreak).HasColumnName("isBreak");

                entity.Property(e => e.PartCount).HasColumnName("partCount");

                entity.Property(e => e.WorkModeBlocks).HasColumnName("workModeBlocks");

                entity.HasOne(d => d.Action)
                    .WithOne(p => p.ActionDistributed)
                    .HasPrincipalKey<SNModels.Action>(p => p.Id)
                    .HasForeignKey<ActionDistributed>(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeActionDistributed_actionId");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.ActionDistributeds)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeActionDistributedParts_areaId");
            });

            modelBuilder.Entity<ActionDistributedPart>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.IndexPart, e.Id })
                    .HasName("PK_noticeActionDistributedParts");

                entity.ToTable("ActionDistributedParts", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeActionDistributedParts_Id")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.IndexPart).HasColumnName("indexPart");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AccountCount).HasColumnName("accountCount");

                entity.Property(e => e.AccountInFileCount).HasColumnName("accountInFileCount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FinishTime)
                    .HasColumnType("datetime")
                    .HasColumnName("finishTime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.IndexFirstAccount).HasColumnName("indexFirstAccount");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsReady).HasColumnName("isReady");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.SessionId)
                    .HasColumnName("sessionId")
                    .HasDefaultValueSql("(@@spid)");

                entity.Property(e => e.StationNumber).HasColumnName("stationNumber");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionDistributedParts)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeActionDistributedParts_actionId");
            });

            modelBuilder.Entity<ActionDistributedPartFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ActionDistributedPartFiles", "notice");

                entity.HasIndex(e => new { e.ActionDistributedPartId, e.FileName }, "IX_noticeActionDistributedPartFiles")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.ActionDistributedPartId).HasColumnName("actionDistributedPartId");

                entity.Property(e => e.FileData).HasColumnName("fileData");

                entity.Property(e => e.FileName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("fileName");
            });

            modelBuilder.Entity<ActionDistributedPartsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ActionDistributedPartsView", "notice");

                entity.Property(e => e.AccountCount).HasColumnName("accountCount");

                entity.Property(e => e.AccountInFileCount).HasColumnName("accountInFileCount");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExistFileData).HasColumnName("existFileData");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FinishTime)
                    .HasColumnType("datetime")
                    .HasColumnName("finishTime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IndexFirstAccount).HasColumnName("indexFirstAccount");

                entity.Property(e => e.IndexPart).HasColumnName("indexPart");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.IsReady).HasColumnName("isReady");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.RunNow).HasColumnName("runNow");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.StationNumber).HasColumnName("stationNumber");
            });

            modelBuilder.Entity<ActionInsertedObject>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.TableId, e.ObjectId });

                entity.ToTable("ActionInsertedObjects", "sn");

                entity.HasIndex(e => new { e.TableId, e.ObjectId }, "IX_ActionInsertedObjects_tableId_objectId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionInsertedObjects)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FK_ActionInsertedObjects_actionId");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.ActionInsertedObjects)
                    .HasForeignKey(d => d.TableId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionInsertedObjects_tableId");
            });

            modelBuilder.Entity<ActionInsertedObjectsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ActionInsertedObjectsView", "sn");

                entity.Property(e => e.ActionGroupFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("actionGroupFasetName");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.ActionObjectId).HasColumnName("actionObjectId");

                entity.Property(e => e.ActionObjectTypeFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("actionObjectTypeFasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.SchemaName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("schemaName");

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("tableName");
            });

            modelBuilder.Entity<ActionLog>(entity =>
            {
                entity.ToTable("ActionLogs", "sn");

                entity.HasIndex(e => e.ActionId, "IX_ActionLogs_actionId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.TimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("timeBegin");

                entity.Property(e => e.TimeElapsed)
                    .HasColumnName("timeElapsed")
                    .HasComputedColumnSql("(datediff(millisecond,[timeBegin],[timeEnd]))", false);

                entity.Property(e => e.TimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("timeEnd");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionLogs)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FK_ActionLogs_actionId");
            });

            modelBuilder.Entity<ActionParameter>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.Name, e.Id })
                    .HasName("PK__noticeActionParameters");

                entity.ToTable("ActionParameters", "notice");

                entity.HasIndex(e => new { e.ActionId, e.PrintName }, "IX__noticeActionParameters_actionId_printName_printValue");

                entity.HasIndex(e => e.Id, "IX__noticeActionParameters_id")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionParameters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeActionParameters__actionId");
            });

            modelBuilder.Entity<ActionReportDbfResult>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.Id })
                    .HasName("PK_noticeActionReportDbfResult");

                entity.ToTable("ActionReportDbfResult", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeActionReportDbfResult_Id")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.CountAccountWithResult)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("countAccountWithResult");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("date");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<ActionReportSaveListResult>(entity =>
            {
                entity.ToTable("ActionReportSaveListResult", "epd");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Benefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefit");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.ChargeItogPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeItogPeriod");

                entity.Property(e => e.ChargeItogPeriodOdn)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeItogPeriodODN");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.ConsService)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("consService");

                entity.Property(e => e.ConsServiceOdn)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("consServiceODN");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.LocalDistrictId).HasColumnName("localDistrictId");

                entity.Property(e => e.Ownerid).HasColumnName("ownerid");

                entity.Property(e => e.PayCurrPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("payCurrPeriod");

                entity.Property(e => e.PenyCurrPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penyCurrPeriod");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.SaldoBegin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoBegin");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SizePayServiceCons)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sizePayServiceCons");

                entity.Property(e => e.SizePayServiceConsOdn)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sizePayServiceConsODN");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.SubDivId).HasColumnName("subDivId");
            });

            modelBuilder.Entity<ActionReportSaveListResult1>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.AccountId })
                    .HasName("PK_noticeActionReportSaveListResult");

                entity.ToTable("ActionReportSaveListResult", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeActionReportSaveListResult_Id")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<ActionTemplate>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.Id })
                    .HasName("PK_noticeActionTemplate");

                entity.ToTable("ActionTemplates", "notice");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ActionTemplates)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeActionTemplate_actionId");
            });

            modelBuilder.Entity<ActionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ActionsView", "sn");

                entity.Property(e => e.CanceledAction).HasColumnName("canceledAction");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupFasetId).HasColumnName("groupFasetId");

                entity.Property(e => e.GroupFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupFasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.ObjectTypeFasetId).HasColumnName("objectTypeFasetId");

                entity.Property(e => e.ObjectTypeFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("objectTypeFasetName");
            });

            modelBuilder.Entity<AddressObject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AddressObjects", "ascupe");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Flat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<AddressesFromP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("addresses_from_ps", "tmp");

                entity.Property(e => e.Adr)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.PsAddressId).HasColumnName("ps_address_id");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");
            });

            modelBuilder.Entity<Apartment>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.ApartmentId })
                    .HasName("PK_rep_Apartments");

                entity.ToTable("Apartments", "rep");

                entity.HasIndex(e => new { e.Period, e.Street, e.House, e.HouseHolderName }, "IX_repApartment__period_street_house_houseHolderName");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BathsCount)
                    .HasColumnName("bathsCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CitySocr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("citySocr");

                entity.Property(e => e.ConvenienceTypeId).HasColumnName("convenienceTypeId");

                entity.Property(e => e.ConvenienceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("convenienceTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedResidentVacationDaysCount).HasColumnName("createdResidentVacationDaysCount");

                entity.Property(e => e.DoorWay).HasColumnName("doorWay");

                entity.Property(e => e.ElectricPlatesCount)
                    .HasColumnName("electricPlatesCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FasetApartmentTypeId).HasColumnName("fasetApartmentTypeId");

                entity.Property(e => e.FasetApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetApartmentTypeName");

                entity.Property(e => e.FasetHouseTypeId).HasColumnName("fasetHouseTypeId");

                entity.Property(e => e.FasetHouseTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetHouseTypeName");

                entity.Property(e => e.Flat)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FlatSocr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("flatSocr");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GarageSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("garageSquare");

                entity.Property(e => e.GaragesCount)
                    .HasColumnName("garagesCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GasPlatesCount)
                    .HasColumnName("gasPlatesCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HasHotWater)
                    .HasColumnName("hasHotWater")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HeatingCoppersCount)
                    .HasColumnName("heatingCoppersCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HorsesCount)
                    .HasColumnName("horsesCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HothousesCount)
                    .HasColumnName("hothousesCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HothousesSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("hothousesSquare");

                entity.Property(e => e.House)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseFloors).HasColumnName("houseFloors");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseHolderParentId).HasColumnName("houseHolderParentId");

                entity.Property(e => e.HouseHolderParentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderParentName");

                entity.Property(e => e.HouseSocr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseSocr");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCommunal)
                    .HasColumnName("isCommunal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LargeCattleCount)
                    .HasColumnName("largeCattleCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.OnLastDayMonthResidentsCount).HasColumnName("onLastDayMonthResidentsCount");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PersonBenefitsCount).HasColumnName("personBenefitsCount");

                entity.Property(e => e.PigsCount)
                    .HasColumnName("pigsCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ResidentDaysCount).HasColumnName("residentDaysCount");

                entity.Property(e => e.ResidentVacationDaysCount).HasColumnName("residentVacationDaysCount");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.ShallowCattleCount)
                    .HasColumnName("shallowCattleCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetSocr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("streetSocr");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");

                entity.Property(e => e.WaterHeatersCount)
                    .HasColumnName("waterHeatersCount")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Apartment1>(entity =>
            {
                entity.ToTable("Apartments", "sn");

                entity.HasIndex(e => e.AdrId, "IX_Apartments__adrId");

                entity.HasIndex(e => e.Datee, "IX_Apartments__datee_id_adrId");

                entity.HasIndex(e => e.EnergoAccount, "IX_Apartments__energoAccount");

                entity.HasIndex(e => e.HouseId, "IX_Apartments__houseId");

                entity.HasIndex(e => e.Number, "IX_Apartments__number")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AdrId)
                    .HasColumnName("adrId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы LocalAddresses");

                entity.Property(e => e.CadastralNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("cadastralNumber");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.1900',(104)))")
                    .HasComment("Дата ввода ПЖ в жилой фонд");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата вывода ПЖ из жилого фонда");

                entity.Property(e => e.DoorWay)
                    .HasColumnName("doorWay")
                    .HasComment("Подъезд");

                entity.Property(e => e.EnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("energoAccount")
                    .HasComment("Номер л/с организации поставщика эл.энергии");

                entity.Property(e => e.FloorHouse)
                    .HasColumnName("floorHouse")
                    .HasComment("Этаж");

                entity.Property(e => e.FloorsCount)
                    .HasColumnName("floorsCount")
                    .HasComment("Этажность дома (количество этажей)");

                entity.Property(e => e.HouseId)
                    .HasColumnName("houseId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Houses");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComment("Номер паспорта жилья");

                entity.Property(e => e.ObjectCategoryId).HasColumnName("objectCategoryId");

                entity.Property(e => e.OkvedTypeId).HasColumnName("okvedTypeId");

                entity.Property(e => e.Phone)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone2");

                entity.Property(e => e.RoomsCount)
                    .HasColumnName("roomsCount")
                    .HasComment("Количество комнат");

                entity.Property(e => e.TLoad)
                    .IsUnicode(false)
                    .HasColumnName("tLoad");

                entity.Property(e => e.ToDateDocId)
                    .HasColumnName("toDateDocId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы OrgDocuments  (документ основание вывода из жилого фонда)");

                entity.Property(e => e.VolumeTko)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volumeTko");

                entity.HasOne(d => d.Adr)
                    .WithMany(p => p.Apartment1s)
                    .HasForeignKey(d => d.AdrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartments_LocalAddresses");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.Apartment1s)
                    .HasForeignKey(d => d.HouseId)
                    .HasConstraintName("FK_apartments_Houses");

                entity.HasOne(d => d.ObjectCategory)
                    .WithMany(p => p.Apartment1ObjectCategories)
                    .HasForeignKey(d => d.ObjectCategoryId)
                    .HasConstraintName("FK_Apartments_objectCategoryId");

                entity.HasOne(d => d.OkvedType)
                    .WithMany(p => p.Apartment1OkvedTypes)
                    .HasForeignKey(d => d.OkvedTypeId)
                    .HasConstraintName("FK_Apartments_okvedTypeId");

                entity.HasOne(d => d.ToDateDoc)
                    .WithMany(p => p.Apartment1s)
                    .HasForeignKey(d => d.ToDateDocId)
                    .HasConstraintName("FK_Apartments_OrgDocuments");
            });

            modelBuilder.Entity<ApartmentArea>(entity =>
            {
                entity.ToTable("ApartmentAreas", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb }, "UIX_ApartmentAreas_apartmentId_dateb")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.Balcony)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("balcony")
                    .HasComment("Площадь балкона");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasComment("Дата начала действия площади");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.DocId)
                    .HasColumnName("docId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы OrgDocuments (документ основание смены площади)");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("heating")
                    .HasComment("Отапливаемая площадь помещения");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("living")
                    .HasComment("Жилая площадь помещения");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("total")
                    .HasComment("Общая площадь помещений");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentAreas)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentAreas_apartments");
            });

            modelBuilder.Entity<ApartmentAreasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentAreasView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Balcony)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("balcony");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("heating");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("living");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("total");
            });

            modelBuilder.Entity<ApartmentCanonicalType>(entity =>
            {
                entity.ToTable("ApartmentCanonicalTypes", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.FromDate }, "IX_ApartmentCanonicalTypes_apartmentId_fromDate");

                entity.HasIndex(e => e.FromDate, "IX_ApartmentCanonicalTypes_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentCanonicalTypes)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentCanonicalTypes_apartments");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ApartmentCanonicalTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_ApartmentCanonicalTypes_FasetItems");
            });

            modelBuilder.Entity<ApartmentCanonicalTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCanonicalTypesView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<ApartmentCharacteristic>(entity =>
            {
                entity.ToTable("ApartmentCharacteristics", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentCharacteristics_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BoilerRoom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("boilerRoom");

                entity.Property(e => e.BuldingVolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("buldingVolume");

                entity.Property(e => e.CounterAvailability).HasColumnName("counterAvailability");

                entity.Property(e => e.DailyConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dailyConsumption");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsUseTemperatureCoef)
                    .IsRequired()
                    .HasColumnName("isUseTemperatureCoef")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MaxDesignLoad)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("maxDesignLoad");

                entity.Property(e => e.NumberConsumersByNorm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("numberConsumersByNorm");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SpecificHeatingCharacteristic)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specificHeatingCharacteristic");

                entity.Property(e => e.WaterConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("waterConsumption");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentCharacteristics)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Apartments_ID");
            });

            modelBuilder.Entity<ApartmentCharacteristicsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCharacteristicsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BoilerRoom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("boilerRoom");

                entity.Property(e => e.BuldingVolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("buldingVolume");

                entity.Property(e => e.CounterAvailability).HasColumnName("counterAvailability");

                entity.Property(e => e.DailyConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("dailyConsumption");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InternalTemperatureRoom)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("internalTemperatureRoom");

                entity.Property(e => e.IsUseTemperatureCoef).HasColumnName("isUseTemperatureCoef");

                entity.Property(e => e.MaxDesignLoad)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("maxDesignLoad");

                entity.Property(e => e.NumberConsumersByNorm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("numberConsumersByNorm");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.SpecificHeatingCharacteristic)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specificHeatingCharacteristic");

                entity.Property(e => e.WaterConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("waterConsumption");
            });

            modelBuilder.Entity<ApartmentCountRoom>(entity =>
            {
                entity.ToTable("ApartmentCountRooms", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb }, "DF_ApartmentCountRooms_apartmentId_dateb")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentCountRooms)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentCountRooms_apartments");
            });

            modelBuilder.Entity<ApartmentCountRoomsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountRoomsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");
            });

            modelBuilder.Entity<ApartmentCounter>(entity =>
            {
                entity.ToTable("ApartmentCounters", "sn");

                entity.HasIndex(e => e.PointAccounting, "IX_ApartmentCounters__pointAccounting");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentCounters_apartmentId");

                entity.HasIndex(e => e.OldCounterId, "IX_ApartmentCounters_oldCounterId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId)
                    .HasColumnName("communalShareTypeId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы FasetItems. Определяет способ расчета долей для комуналок");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName")
                    .HasComment("Название прибора учета");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber")
                    .HasComment("Номер прибора учета");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId)
                    .HasColumnName("counterServiceTypeId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы sn.ServiceTypes Определяет тип услуги на которой стоит прибор учета");

                entity.Property(e => e.CounterSize)
                    .HasColumnName("counterSize")
                    .HasComment("Разрядность прибора учета");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasComment("Дата установки прибора учета");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата ликвидации прибора учета");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor")
                    .HasComment("Коэффициент");

                entity.Property(e => e.Fraction)
                    .HasColumnName("fraction")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl)
                    .HasColumnName("kod_cl")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.KodObj)
                    .HasColumnName("kod_obj")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType)
                    .HasColumnName("maddleType")
                    .HasDefaultValueSql("([sn].[FasetItem_GetId]('Тип использования прибора учета \"по среднему\"','Нет'))")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы sn.FasetItems.  ");

                entity.Property(e => e.MarkId)
                    .HasColumnName("markId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы sn.CounterMarks (справочник марок)");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId)
                    .HasColumnName("placeId")
                    .HasComment("Не используется");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting")
                    .HasComment("Точка учета поставщика услуг");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power")
                    .HasComment("Мощность прибора учета");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId)
                    .HasColumnName("sessionId")
                    .HasComment("Ссылка на угткальный идентификатор таблицы sn.Sessions");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp")
                    .HasComment("Номер пломбы");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate")
                    .HasComment("Дата пломбирования");

                entity.Property(e => e.StatusAskupe)
                    .HasColumnName("statusASKUPE")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы FasetItems. ");

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы sn.FasetItems. Фактически указывается тип прибора учета - Электрич., газов., водяной");

                entity.Property(e => e.TypeScaleCounterId)
                    .HasColumnName("typeScaleCounterId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы sn.FasetItems. Определяет тип тарифов, напрмер по счетчику");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Users");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Counters_Apartment");

                entity.HasOne(d => d.CommunalShareType)
                    .WithMany(p => p.ApartmentCounterCommunalShareTypes)
                    .HasForeignKey(d => d.CommunalShareTypeId)
                    .HasConstraintName("FK_ApartmentCounters_FasetItems104");

                entity.HasOne(d => d.CounterServiceType)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.CounterServiceTypeId)
                    .HasConstraintName("FK_ApartmentCounters_ServiceTypes");

                entity.HasOne(d => d.MaddleTypeNavigation)
                    .WithMany(p => p.ApartmentCounterMaddleTypeNavigations)
                    .HasForeignKey(d => d.MaddleType)
                    .HasConstraintName("FK_Counters_maddleType");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.MarkId)
                    .HasConstraintName("FK_Counters_CounterMarks");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_ApartmentCounters_CounterModels_Id");

                entity.HasOne(d => d.OldCounter)
                    .WithMany(p => p.InverseOldCounter)
                    .HasForeignKey(d => d.OldCounterId)
                    .HasConstraintName("FK_ApartmentCounters_ApartmentCounters");

                entity.HasOne(d => d.Place)
                    .WithMany(p => p.ApartmentCounterPlaces)
                    .HasForeignKey(d => d.PlaceId)
                    .HasConstraintName("FK_Counters_placeId");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ApartmentCounters_Sessions");

                entity.HasOne(d => d.StatusAskupeNavigation)
                    .WithMany(p => p.ApartmentCounterStatusAskupeNavigations)
                    .HasForeignKey(d => d.StatusAskupe)
                    .HasConstraintName("FK_ApartmentCounters_FasetItems_Id");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ApartmentCounterTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Counters_typeId");

                entity.HasOne(d => d.TypeScaleCounter)
                    .WithMany(p => p.ApartmentCounterTypeScaleCounters)
                    .HasForeignKey(d => d.TypeScaleCounterId)
                    .HasConstraintName("FK_ApartmentCounters_FasetItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounters)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ApartmentCounters_Users");
            });

            modelBuilder.Entity<ApartmentCounterBetweenCheckInterval>(entity =>
            {
                entity.ToTable("ApartmentCounterBetweenCheckIntervals", "sn");

                entity.HasIndex(e => e.CounterId, "IX_ApartmentCounterBetweenCheckIntervals_counterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.NextCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextCheckDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PrevCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevCheckDate");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterBetweenCheckIntervals_apartmentCounters");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ApartmentCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_ApartmentCounterBetweenCheckIntervals_docId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ApartmentCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_ApartmentCounterBetweenCheckIntervals_organizations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterBetweenCheckIntervals_users");
            });

            modelBuilder.Entity<ApartmentCounterBetweenCheckIntervalsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterBetweenCheckIntervalsView", "sn");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NextCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextCheckDate");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrganizationShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PrevCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevCheckDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApartmentCounterCheckInterval>(entity =>
            {
                entity.ToTable("ApartmentCounterCheckIntervals", "sn");

                entity.HasIndex(e => new { e.CounterId, e.FromDate }, "UX_ApartmentCounterCheckIntervals_counterId_fromDate")
                    .IsUnique();

                entity.HasIndex(e => new { e.CounterId, e.FromDate, e.ToDate }, "UX_ApartmentCounterCheckIntervals_counterId_fromDate_toDate")
                    .IsUnique();

                entity.HasIndex(e => new { e.CounterId, e.ToDate }, "UX_ApartmentCounterCheckIntervals_counterId_toDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromIndicationValue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("fromIndicationValue");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToIndicationValue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("toIndicationValue");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterCheckIntervals)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterCheckIntervals_Counter");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ApartmentCounterCheckIntervals)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ApartmentCounterCheckIntervals_Sessions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounterCheckIntervals)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ApartmentCounterCheckIntervals_Users");
            });

            modelBuilder.Entity<ApartmentCounterCheckIntervalsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterCheckIntervalsView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromIndicationValue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("fromIndicationValue");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToIndicationValue)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("toIndicationValue");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ApartmentCounterIndication>(entity =>
            {
                entity.ToTable("ApartmentCounterIndications", "arc");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsSaveAfterTime).HasColumnName("isSaveAfterTime");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.SourceValType).HasColumnName("sourceValType");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");
            });

            modelBuilder.Entity<ApartmentCounterIndication1>(entity =>
            {
                entity.ToTable("ApartmentCounterIndications", "sn");

                entity.HasIndex(e => e.InvoiceNumber, "IDX_ApartmentCounterIndications_invoiceNumber_id");

                entity.HasIndex(e => e.CounterId, "IX_ApartmentCounterIndications_CounterId_inc_id");

                entity.HasIndex(e => new { e.CounterId, e.ValType, e.ValDate, e.Created }, "IX_ApartmentCounterIndications_CounterId_valType_valDate_created_inc_val");

                entity.HasIndex(e => e.GroupOperId, "IX_ApartmentCounterIndications__groupOperId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарии");

                entity.Property(e => e.CounterId)
                    .HasColumnName("counterId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы ApartmentCounters");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания");

                entity.Property(e => e.GroupOperId)
                    .HasColumnName("groupOperId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы GroupOperations. Служит для некой группировки показаний");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsSaveAfterTime).HasColumnName("isSaveAfterTime");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.Pack)
                    .HasColumnName("pack")
                    .HasComment("Номер пачки (для массового ввода)");

                entity.Property(e => e.SessionId)
                    .HasColumnName("sessionId")
                    .HasComment("Ссылка на уникаьный идентификатор таблицы sessions");

                entity.Property(e => e.SourceValType).HasColumnName("sourceValType");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasComment("Ссылка на уникальный идентификатор табл. Users");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val")
                    .HasComment("Показание");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate")
                    .HasComment("Дата показания");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType)
                    .HasColumnName("valType")
                    .HasComment("Тип показания. Ссылка на таблицу sn.FasetItems  (FasetName = Тип показания прибора учета; FasetId=38)");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterIndication1s)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterIndications_Counter");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.ApartmentCounterIndication1s)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_CounterIndications_GroupOperations");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ApartmentCounterIndication1s)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_CounterIndications_Sessions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounterIndication1s)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CounterIndications_Users");

                entity.HasOne(d => d.ValTypeNavigation)
                    .WithMany(p => p.ApartmentCounterIndication1s)
                    .HasForeignKey(d => d.ValType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterIndications_valType");
            });

            modelBuilder.Entity<ApartmentCounterIndicationsToRecalc>(entity =>
            {
                entity.HasKey(e => e.CounterIndicationId);

                entity.ToTable("ApartmentCounterIndicationsToRecalc", "sn");

                entity.Property(e => e.CounterIndicationId)
                    .ValueGeneratedNever()
                    .HasColumnName("counterIndicationId");

                entity.Property(e => e.ErrorText)
                    .IsUnicode(false)
                    .HasColumnName("errorText");

                entity.Property(e => e.IsError).HasColumnName("isError");
            });

            modelBuilder.Entity<ApartmentCounterIndicationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterIndicationsView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.AvgConsumption).HasColumnName("avgConsumption");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsSaveAfterTime).HasColumnName("isSaveAfterTime");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.MethodValInsertName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.PrevVal)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("prevVal");

                entity.Property(e => e.PrevValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevValDate");

                entity.Property(e => e.PrevValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("prevValRevert");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.SourceValType).HasColumnName("sourceValType");

                entity.Property(e => e.SourseValName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sourseValName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCounterIndicationsViewService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterIndicationsViewService", "sn");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCounterIndicationsWithArchivView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterIndicationsWithArchivView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.AvgConsumption).HasColumnName("avgConsumption");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsSaveAfterTime).HasColumnName("isSaveAfterTime");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.MethodValInsertName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.PrevVal)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("prevVal");

                entity.Property(e => e.PrevValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevValDate");

                entity.Property(e => e.PrevValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("prevValRevert");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.SourceValType).HasColumnName("sourceValType");

                entity.Property(e => e.SourseValName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sourseValName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCounterLinkage>(entity =>
            {
                entity.ToTable("ApartmentCounterLinkages", "sn");

                entity.HasIndex(e => e.ApartmentCounterId, "IX_ApartmentCounterLinkages_ApartmentCounterId");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentCounterLinkages_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.HasOne(d => d.ApartmentCounter)
                    .WithMany(p => p.ApartmentCounterLinkages)
                    .HasForeignKey(d => d.ApartmentCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterLinkages_ApartmentCounters");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentCounterLinkages)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterLinkages_Apartments");
            });

            modelBuilder.Entity<ApartmentCounterLinkagesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterLinkagesView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentCounterLinkagesViewForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterLinkagesView_ForLK", "lk");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentCounterName>(entity =>
            {
                entity.ToTable("ApartmentCounterName", "sms");

                entity.HasIndex(e => e.CounterId, "UIX_ApartmentCounterName")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.Counter)
                    .WithOne(p => p.ApartmentCounterName)
                    .HasForeignKey<ApartmentCounterName>(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterName_ApartmentCounterId");
            });

            modelBuilder.Entity<ApartmentCounterNameView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterNameView", "sms");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ApartmentCounterPlace>(entity =>
            {
                entity.ToTable("ApartmentCounterPlaces", "sn");

                entity.HasIndex(e => new { e.CounterId, e.FromDate }, "IX_ApartmentCounterPlaces_counterId_fromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterPlaces)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ApCP__ApartmentCounters");

                entity.HasOne(d => d.FasetItem)
                    .WithMany(p => p.ApartmentCounterPlacesNavigation)
                    .HasForeignKey(d => d.FasetItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ApCP__FasetItems");
            });

            modelBuilder.Entity<ApartmentCounterPlaceFactor>(entity =>
            {
                entity.ToTable("ApartmentCounterPlaceFactors", "sn");

                entity.HasIndex(e => new { e.PlaceId, e.FromDate }, "IXU_ApartmentCounterPlaceFactors")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("value");

                entity.HasOne(d => d.Place)
                    .WithMany(p => p.ApartmentCounterPlaceFactors)
                    .HasForeignKey(d => d.PlaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterPlaceFactors__placeId");
            });

            modelBuilder.Entity<ApartmentCounterPlaceFactorsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterPlaceFactorsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PlaceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("placeName");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(5, 3)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<ApartmentCounterPlacesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterPlacesView", "sn");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ApartmentCounterSeal>(entity =>
            {
                entity.ToTable("ApartmentCounterSeals", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.SealType).HasColumnName("sealType");

                entity.Property(e => e.Series)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("series");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterSeals)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterSeals_ApartmentCounters");

                entity.HasOne(d => d.SealTypeNavigation)
                    .WithMany(p => p.ApartmentCounterSeals)
                    .HasForeignKey(d => d.SealType)
                    .HasConstraintName("FK_ApartmentCounterSeals_SealType");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ApartmentCounterSeals)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ApartmentCounterSeals_Sessions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounterSeals)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ApartmentCounterSeals_Users");
            });

            modelBuilder.Entity<ApartmentCounterSealsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterSealsView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.SealType).HasColumnName("sealType");

                entity.Property(e => e.SealTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sealTypeName");

                entity.Property(e => e.Series)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("series");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ApartmentCounterShare>(entity =>
            {
                entity.ToTable("ApartmentCounterShares", "sn");

                entity.HasIndex(e => new { e.ApartmentCounterId, e.FromDate }, "IXU_ApartmentCounterShares")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(12, 7)")
                    .HasColumnName("share");

                entity.HasOne(d => d.ApartmentCounter)
                    .WithMany(p => p.ApartmentCounterShares)
                    .HasForeignKey(d => d.ApartmentCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentCounterShares_ApartmentCounter");
            });

            modelBuilder.Entity<ApartmentCounterSharesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterSharesView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(12, 7)")
                    .HasColumnName("share");
            });

            modelBuilder.Entity<ApartmentCounterValuesMpa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterValuesMPA", "sn");

                entity.Property(e => e.AcCl).HasColumnName("ac_cl");

                entity.Property(e => e.AcObj).HasColumnName("ac_obj");

                entity.Property(e => e.AccNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accNumber");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.Val).HasColumnName("val");
            });

            modelBuilder.Entity<ApartmentCounterVolume>(entity =>
            {
                entity.ToTable("ApartmentCounterVolumes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.Volum)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("volum");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentCounterVolumes)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterVolumes_Counter");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.ApartmentCounterVolumes)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_CounterVolumes_GroupOperations");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ApartmentCounterVolumes)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_CounterVolumes_Sessions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentCounterVolumes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CounterVolumes_Users");

                entity.HasOne(d => d.ValTypeNavigation)
                    .WithMany(p => p.ApartmentCounterVolumes)
                    .HasForeignKey(d => d.ValType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterVolumes_valType");
            });

            modelBuilder.Entity<ApartmentCounterVolumesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCounterVolumesView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");

                entity.Property(e => e.Volum)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("volum");
            });

            modelBuilder.Entity<ApartmentCountersIndicationsForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersIndicationsForLk", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.MethodValInsertName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.NewValType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("newValType");

                entity.Property(e => e.ScaleTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCountersIndicationsInputView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersIndicationsInputView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.City)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsSaveDuplicateIndication).HasColumnName("isSaveDuplicateIndication");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.MethodValInsertName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.NewValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("newValDate");

                entity.Property(e => e.NewValType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("newValType");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.ServiceTypeAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeAlias");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Street)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.TypeScaleCounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeScaleCounterName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCountersIndicationsInputViewForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersIndicationsInputViewForLk", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.City)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.IsSaveDuplicateIndication).HasColumnName("isSaveDuplicateIndication");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.MethodValInsertName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.NewValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("newValDate");

                entity.Property(e => e.NewValType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("newValType");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Street)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.TypeScaleCounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeScaleCounterName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCountersIndicationsInputViewForMpa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersIndicationsInputViewForMpa", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterServiceTypeAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeAlias");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeId).HasColumnName("counterTypeId");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.ModelName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("modelName");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");
            });

            modelBuilder.Entity<ApartmentCountersIndicationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersIndicationsView", "CRM");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterServiceToDate");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.LastCheckIntervalFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalFromDate");

                entity.Property(e => e.LastCheckIntervalToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalToDate");

                entity.Property(e => e.MethodValInsertName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("methodValInsertName");

                entity.Property(e => e.NewValType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("newValType");

                entity.Property(e => e.ScaleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersView", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.CloseReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("closeReasonName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CommunalShareTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("communalShareTypeName");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndicationsAverageMounthId).HasColumnName("counterIndicationsAverageMounthId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.CounterTypeId).HasColumnName("counterTypeId");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LastCheckIntervalFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalFromDate");

                entity.Property(e => e.LastCheckIntervalFromIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalFromIndication");

                entity.Property(e => e.LastCheckIntervalId).HasColumnName("lastCheckIntervalId");

                entity.Property(e => e.LastCheckIntervalToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalToDate");

                entity.Property(e => e.LastCheckIntervalToIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalToIndication");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleTypeId).HasColumnName("maddleTypeId");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PlaceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("placeName");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.StatusAskupename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusASKUPEName");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.TypeScaleCounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeScaleCounterName");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UnitMeasureName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitMeasureName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.ValAverageMounth)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("valAverageMounth");

                entity.Property(e => e.ValDateAverageMounth)
                    .HasColumnType("datetime")
                    .HasColumnName("valDateAverageMounth");
            });

            modelBuilder.Entity<ApartmentCountersViewForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersView_ForLK", "lk");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterTypeId).HasColumnName("counterTypeId");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.LastCheckIntervalFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalFromDate");

                entity.Property(e => e.LastCheckIntervalFromIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalFromIndication");

                entity.Property(e => e.LastCheckIntervalId).HasColumnName("lastCheckIntervalId");

                entity.Property(e => e.LastCheckIntervalToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalToDate");

                entity.Property(e => e.LastCheckIntervalToIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalToIndication");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleTypeId).HasColumnName("maddleTypeId");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");
            });

            modelBuilder.Entity<ApartmentCountersViewWithIndication>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersViewWithIndication", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.CloseReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("closeReasonName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CommunalShareTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("communalShareTypeName");

                entity.Property(e => e.CounterIndicationsAverageMounthId).HasColumnName("counterIndicationsAverageMounthId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterServiceTypeName");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.CounterTypeId).HasColumnName("counterTypeId");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.CreatorLoginName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("creatorLoginName");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LastCheckIntervalFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalFromDate");

                entity.Property(e => e.LastCheckIntervalFromIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalFromIndication");

                entity.Property(e => e.LastCheckIntervalId).HasColumnName("lastCheckIntervalId");

                entity.Property(e => e.LastCheckIntervalToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalToDate");

                entity.Property(e => e.LastCheckIntervalToIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastCheckIntervalToIndication");

                entity.Property(e => e.Linkage).HasColumnName("linkage");

                entity.Property(e => e.LinkageName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("linkageName");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleTypeId).HasColumnName("maddleTypeId");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PlaceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("placeName");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.StatusAskupename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusASKUPEName");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.TypeScaleCounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeScaleCounterName");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UnitMeasureName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitMeasureName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValAverageMounth)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("valAverageMounth");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValDateAverageMounth)
                    .HasColumnType("datetime")
                    .HasColumnName("valDateAverageMounth");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<ApartmentCountersViewWithLinkage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentCountersViewWithLinkages", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("factor");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<ApartmentEquipment>(entity =>
            {
                entity.ToTable("ApartmentEquipments", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentEquipments__apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Info)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber");

                entity.Property(e => e.TypeEquipment).HasColumnName("typeEquipment");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentEquipments)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentEquipments_Apartments");

                entity.HasOne(d => d.TypeEquipmentNavigation)
                    .WithMany(p => p.ApartmentEquipments)
                    .HasForeignKey(d => d.TypeEquipment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentEquipments_FasetItems");
            });

            modelBuilder.Entity<ApartmentEquipmentCounter>(entity =>
            {
                entity.ToTable("ApartmentEquipmentCounters", "sn");

                entity.HasIndex(e => new { e.CounterId, e.Dateb, e.Datee }, "IX_ApartmentEquipmentCounters__counterId_fromDate_toDate");

                entity.HasIndex(e => new { e.EquipmentId, e.Dateb }, "IX_ApartmentEquipmentCounters__equipmentId_dateb");

                entity.HasIndex(e => new { e.EquipmentId, e.Datee }, "IX_ApartmentEquipmentCounters__equipmentId_datee");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb }, "IX_ApartmentEquipmentCounters_apartmentId_dateb");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.EquipmentId).HasColumnName("equipmentId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentEquipmentCounters)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentEquipmentCounters_Apartments");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.ApartmentEquipmentCounters)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentEquipmentCounters_Counters");

                entity.HasOne(d => d.Equipment)
                    .WithMany(p => p.ApartmentEquipmentCounters)
                    .HasForeignKey(d => d.EquipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentEquipmentCounters_ApartmentEquipments");
            });

            modelBuilder.Entity<ApartmentEquipmentCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentEquipmentCountersView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentName");

                entity.Property(e => e.CounterDateb)
                    .HasColumnType("datetime")
                    .HasColumnName("counterDateb");

                entity.Property(e => e.CounterDatee)
                    .HasColumnType("datetime")
                    .HasColumnName("counterDatee");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.EquipmentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("equipmentCreated");

                entity.Property(e => e.EquipmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("equipmentFromDate");

                entity.Property(e => e.EquipmentId).HasColumnName("equipmentId");

                entity.Property(e => e.EquipmentInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("equipmentInfo");

                entity.Property(e => e.EquipmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("equipmentToDate");

                entity.Property(e => e.EquipmentTypeId).HasColumnName("equipmentTypeId");

                entity.Property(e => e.EquipmentTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("equipmentTypeName");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentEquipmentHousekeeping>(entity =>
            {
                entity.ToTable("ApartmentEquipmentHousekeepings", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb }, "IX_ApartmentEquipmentHousekeepings_apartmentId_dateb");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.EquipmentId).HasColumnName("equipmentId");

                entity.Property(e => e.HousekeepingId).HasColumnName("housekeepingId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentEquipmentHousekeepings)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHousekeepingEquipments_Apartments");

                entity.HasOne(d => d.Equipment)
                    .WithMany(p => p.ApartmentEquipmentHousekeepings)
                    .HasForeignKey(d => d.EquipmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHousekeepingEquipments_ApartmentEquipments");

                entity.HasOne(d => d.Housekeeping)
                    .WithMany(p => p.ApartmentEquipmentHousekeepings)
                    .HasForeignKey(d => d.HousekeepingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHousekeepingEquipments_ApartmentHousekeepings");
            });

            modelBuilder.Entity<ApartmentEquipmentHousekeepingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentEquipmentHousekeepingsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.EquipmentDateb)
                    .HasColumnType("datetime")
                    .HasColumnName("equipmentDateb");

                entity.Property(e => e.EquipmentDatee)
                    .HasColumnType("datetime")
                    .HasColumnName("equipmentDatee");

                entity.Property(e => e.EquipmentId).HasColumnName("equipmentId");

                entity.Property(e => e.EquipmentInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("equipmentInfo");

                entity.Property(e => e.EquipmentTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("equipmentTypeName");

                entity.Property(e => e.HousekeepingDateb)
                    .HasColumnType("datetime")
                    .HasColumnName("housekeepingDateb");

                entity.Property(e => e.HousekeepingDatec)
                    .HasColumnType("datetime")
                    .HasColumnName("housekeepingDatec");

                entity.Property(e => e.HousekeepingDatee)
                    .HasColumnType("datetime")
                    .HasColumnName("housekeepingDatee");

                entity.Property(e => e.HousekeepingId).HasColumnName("housekeepingId");

                entity.Property(e => e.HousekeepingName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("housekeepingName");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.HousekeepingTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("housekeepingTypeName");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentEquipmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentEquipmentsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentName");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Info)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<ApartmentExternalHouseParameter>(entity =>
            {
                entity.ToTable("ApartmentExternalHouseParameters", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentExternalHouseParameters_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ExternalHouseParameterId).HasColumnName("externalHouseParameterId");
            });

            modelBuilder.Entity<ApartmentExternalHouseParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentExternalHouseParametersView", "sn");

                entity.Property(e => e.ApartmentAdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAdrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ExternalHouseParameterId).HasColumnName("externalHouseParameterId");

                entity.Property(e => e.Fromdate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromdate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Todate)
                    .HasColumnType("datetime")
                    .HasColumnName("todate");
            });

            modelBuilder.Entity<ApartmentHeatPointsTplu>(entity =>
            {
                entity.ToTable("ApartmentHeatPointsTPlus", "sn_ul");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentHeatPointsTPlus_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.HeatPointId).HasColumnName("heatPointId");
            });

            modelBuilder.Entity<ApartmentHouseHolder>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.ApartmentId })
                    .HasName("PK_repApartmentHouseHolders");

                entity.ToTable("ApartmentHouseHolders", "rep");

                entity.HasIndex(e => new { e.Id, e.Period }, "IX_repApartmentHouseHolders_id")
                    .IsUnique();

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HhId).HasColumnName("hhId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentHouseHolder1>(entity =>
            {
                entity.ToTable("ApartmentHouseHolders", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.FromDate }, "IX_ApartmentHouseHolders_apartmentId_fromDate")
                    .IsUnique();

                entity.HasIndex(e => e.OrgId, "IX_ApartmentHouseHolders_orgId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentHouseHolder1s)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHouseHolder_Apartments");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ApartmentHouseHolder1s)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHouseHolders_Organizations");
            });

            modelBuilder.Entity<ApartmentHouseHoldersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentHouseHoldersView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<ApartmentHousekeeping>(entity =>
            {
                entity.ToTable("ApartmentHousekeepings", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentHousekeepings_apartmentId");

                entity.HasIndex(e => new { e.TypeHk, e.Dateb }, "IX_ApartmentHousekeepings_typeHk_dateb_id_datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.NameHk)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("nameHk");

                entity.Property(e => e.SquareHk)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("squareHk");

                entity.Property(e => e.TypeHk).HasColumnName("typeHk");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentHousekeepings)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHousekeepings_Apartments");

                entity.HasOne(d => d.TypeHkNavigation)
                    .WithMany(p => p.ApartmentHousekeepings)
                    .HasForeignKey(d => d.TypeHk)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentHousekeepings_TypeHK");
            });

            modelBuilder.Entity<ApartmentHousekeepingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentHousekeepingsView", "sn");

                entity.Property(e => e.ApartmenNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmenNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.NameHk)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("nameHk");

                entity.Property(e => e.SquareHk)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("squareHk");

                entity.Property(e => e.TypeHk).HasColumnName("typeHk");

                entity.Property(e => e.TypeHkName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeHkName");
            });

            modelBuilder.Entity<ApartmentIndicationsFile>(entity =>
            {
                entity.ToTable("ApartmentIndicationsFiles", "acm");

                entity.HasIndex(e => e.CounterIndicationId, "IX_CounterIndicationsFiles__counterIndicationId_inc_streamFilesId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterIndicationId).HasColumnName("counterIndicationId");

                entity.Property(e => e.StreamFilesId).HasColumnName("streamFilesId");

                entity.HasOne(d => d.CounterIndication)
                    .WithMany(p => p.ApartmentIndicationsFiles)
                    .HasForeignKey(d => d.CounterIndicationId)
                    .HasConstraintName("FK_ApartmentIndicationsFiles_counterIndicationId");

                entity.HasOne(d => d.StreamFiles)
                    .WithMany(p => p.ApartmentIndicationsFiles)
                    .HasForeignKey(d => d.StreamFilesId)
                    .HasConstraintName("FK_ApartmentIndicationsFiles_streamFilesId");
            });

            modelBuilder.Entity<ApartmentInfo>(entity =>
            {
                entity.ToTable("ApartmentInfos", "rep");

                entity.HasIndex(e => new { e.ApartmentId, e.Period }, "IX_repApartmentInfos__apartmentId_period");

                entity.HasIndex(e => new { e.Period, e.ApartmentId }, "IX_repApartmentInfos__period_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Min1Resident).HasColumnName("min1Resident");

                entity.Property(e => e.OnEndOwners).HasColumnName("onEndOwners");

                entity.Property(e => e.OnEndResidentNotVacations).HasColumnName("onEndResidentNotVacations");

                entity.Property(e => e.OnEndResidentVacations).HasColumnName("onEndResidentVacations");

                entity.Property(e => e.OnEndResidents).HasColumnName("onEndResidents");

                entity.Property(e => e.OwnerDays).HasColumnName("ownerDays");

                entity.Property(e => e.OwnerMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ownerMonths");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ResidentDaysAll).HasColumnName("residentDaysAll");

                entity.Property(e => e.ResidentDaysNotVacation).HasColumnName("residentDaysNotVacation");

                entity.Property(e => e.ResidentDaysVacation).HasColumnName("residentDaysVacation");

                entity.Property(e => e.ResidentMonthsAll)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("residentMonthsAll");

                entity.Property(e => e.ResidentMonthsNotVacation)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("residentMonthsNotVacation");

                entity.Property(e => e.ResidentMonthsVacation)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("residentMonthsVacation");

                entity.Property(e => e.UniqueOwners).HasColumnName("uniqueOwners");

                entity.Property(e => e.UniqueResidentNotAllVacations).HasColumnName("uniqueResidentNotAllVacations");

                entity.Property(e => e.UniqueResidentVacations).HasColumnName("uniqueResidentVacations");

                entity.Property(e => e.UniqueResidents).HasColumnName("uniqueResidents");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<ApartmentLink>(entity =>
            {
                entity.ToTable("ApartmentLinks", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb, e.Datee }, "IX_apartmentLinks_apartmentId_dateb_datee");

                entity.HasIndex(e => e.ChildId, "IX_apartmentLinks_childId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentLinkApartments)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentLinks_apartments");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.ApartmentLinkChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentLinks_apartmentChilds");
            });

            modelBuilder.Entity<ApartmentLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentLinksView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ChildAdressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("childAdressName");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentMergeHistory>(entity =>
            {
                entity.ToTable("ApartmentMergeHistory", "sn");

                entity.HasIndex(e => e.NextApartmentId, "IX_ApartmentMergeHistory_nextApartmentId");

                entity.HasIndex(e => e.PreviousApartmentId, "IX_ApartmentMergeHistory_previousApartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.NextApartmentId).HasColumnName("nextApartmentId");

                entity.Property(e => e.PreviousApartmentId).HasColumnName("previousApartmentId");

                entity.HasOne(d => d.NextApartment)
                    .WithMany(p => p.ApartmentMergeHistoryNextApartments)
                    .HasForeignKey(d => d.NextApartmentId)
                    .HasConstraintName("FK_ApartmentMergeHistory_ApartmentsNext");

                entity.HasOne(d => d.PreviousApartment)
                    .WithMany(p => p.ApartmentMergeHistoryPreviousApartments)
                    .HasForeignKey(d => d.PreviousApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentMergeHistory_Apartments");
            });

            modelBuilder.Entity<ApartmentMergeHistoryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentMergeHistoryView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NextAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nextAddressName");

                entity.Property(e => e.NextApartmentId).HasColumnName("nextApartmentId");

                entity.Property(e => e.NextFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextFromDate");

                entity.Property(e => e.NextNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("nextNumber");

                entity.Property(e => e.NextOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nextOwnerName");

                entity.Property(e => e.NextToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextToDate");

                entity.Property(e => e.PreviousAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("previousAddressName");

                entity.Property(e => e.PreviousApartmentId).HasColumnName("previousApartmentId");

                entity.Property(e => e.PreviousFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("previousFromDate");

                entity.Property(e => e.PreviousNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("previousNumber");

                entity.Property(e => e.PreviousOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("previousOwnerName");

                entity.Property(e => e.PreviousToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("previousToDate");
            });

            modelBuilder.Entity<ApartmentNote>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__ApartmentNotes")
                    .IsClustered(false);

                entity.ToTable("ApartmentNotes", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentNotes_apartmentId")
                    .IsClustered();

                entity.HasIndex(e => e.Created, "IX_ApartmentNotes_created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Caption)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("caption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateEffective)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEffective");

                entity.Property(e => e.Note)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.NoteType).HasColumnName("noteType");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentNotes)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentNotes_apartments");

                entity.HasOne(d => d.NoteTypeNavigation)
                    .WithMany(p => p.ApartmentNotes)
                    .HasForeignKey(d => d.NoteType)
                    .HasConstraintName("FK_ApartmentNotes_noteType");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.ApartmentNotes)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .HasConstraintName("FK_apartmentNotes_OrgDocument");
            });

            modelBuilder.Entity<ApartmentNotesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentNotesView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Caption)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("caption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateEffective)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEffective");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Note)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.NoteType).HasColumnName("noteType");

                entity.Property(e => e.NoteTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("noteTypeName");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ApartmentOwner>(entity =>
            {
                entity.ToTable("ApartmentOwners", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.OwnerId, e.Dateb }, "UIX_ApartmentOwners_apartmentId_ownerId_dateb")
                    .IsUnique();

                entity.HasIndex(e => e.OldId, "tmp_OldId_ApartmentOwners");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc")
                    .HasComment("Дата документа на основании которого владеют жилплощадью");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasComment("Дата начала");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Denom)
                    .HasColumnName("denom")
                    .HasComment("Доля (Знаменатель)");

                entity.Property(e => e.Doc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("doc")
                    .HasComment("Название, серия и номер документа определяющего права владения");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.NotUseOwnerNumDenom).HasColumnName("notUseOwnerNumDenom");

                entity.Property(e => e.Num)
                    .HasColumnName("num")
                    .HasComment("Доля (Числитель)");

                entity.Property(e => e.OldId).HasColumnName("oldId");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("ownerId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Owner");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("printName")
                    .HasComment("Собственник. ФИО для физиков. Наименование организации для Юриков");

                entity.Property(e => e.SaleContract)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("saleContract")
                    .HasComment("Документ являющийся основанием права владения (Договора и т.д.)");

                entity.Property(e => e.SaleContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleContractDate")
                    .HasComment("Дата документа являющегося основанием права владения ");

                entity.Property(e => e.TypeOwnerId)
                    .HasColumnName("typeOwnerId")
                    .HasComment("Тип владения собственностью. Ссылка на id таблицы sn.FasetItems (FasetId = 55)");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentOwners)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentOwners_apartments");

                entity.HasOne(d => d.DocNavigation)
                    .WithMany(p => p.ApartmentOwners)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_apartmentOwners_docs");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.ApartmentOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_apartmentOwners_owners");

                entity.HasOne(d => d.TypeOwner)
                    .WithMany(p => p.ApartmentOwners)
                    .HasForeignKey(d => d.TypeOwnerId)
                    .HasConstraintName("FK_ApartmentOwners_FasetItems");
            });

            modelBuilder.Entity<ApartmentOwnersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentOwnersView", "sn");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNo");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Denom).HasColumnName("denom");

                entity.Property(e => e.Doc).HasColumnName("doc");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NotUseOwnerNumDenom).HasColumnName("notUseOwnerNumDenom");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(371)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.SaleContract)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("saleContract");

                entity.Property(e => e.SaleContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleContractDate");

                entity.Property(e => e.Share)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("share");

                entity.Property(e => e.TypeOwner).HasColumnName("typeOwner");

                entity.Property(e => e.TypeOwnerFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeOwnerFasetName");

                entity.Property(e => e.TypeOwnerId).HasColumnName("typeOwnerId");
            });

            modelBuilder.Entity<ApartmentOwnersWithApartmentInfoView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentOwnersWithApartmentInfoView", "sn");

                entity.Property(e => e.ApartmentNo)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ApartmentShare)
                    .HasMaxLength(63)
                    .IsUnicode(false);

                entity.Property(e => e.ApartmentSquare).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Fio)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FIO");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc");

                entity.Property(e => e.OwnerNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");
            });

            modelBuilder.Entity<ApartmentOwnershipLegalization>(entity =>
            {
                entity.ToTable("ApartmentOwnershipLegalization", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.ApartmentOwner)
                    .WithMany(p => p.ApartmentOwnershipLegalizations)
                    .HasForeignKey(d => d.ApartmentOwnerId)
                    .HasConstraintName("FK_apartmentOwnershipLegalization_owners");
            });

            modelBuilder.Entity<ApartmentPersonBenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentPersonBenefitsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");
            });

            modelBuilder.Entity<ApartmentPropertiesFullView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentPropertiesFullView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.PropertyValue).HasColumnName("propertyValue");
            });

            modelBuilder.Entity<ApartmentPropertiesToMaxfromDateView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentPropertiesToMaxfromDateView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyValue).HasColumnName("propertyValue");
            });

            modelBuilder.Entity<ApartmentPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentPropertiesView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.PropertyValue).HasColumnName("propertyValue");
            });

            modelBuilder.Entity<ApartmentProperty>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.ApartmentId, e.PropertyId })
                    .HasName("PK_RepApartmentProperties");

                entity.ToTable("ApartmentProperties", "rep");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");
            });

            modelBuilder.Entity<ApartmentProperty1>(entity =>
            {
                entity.ToTable("ApartmentProperties", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.PropertyId, e.FromDate }, "IXU_ApartmentProperties__apartmentId_propertyId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("propertyValue");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentProperty1s)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentProperties_Apartments");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.ApartmentProperty1s)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentProperties_FasetItems");
            });

            modelBuilder.Entity<ApartmentRequest>(entity =>
            {
                entity.ToTable("ApartmentRequests", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentRequests_apartmentId");

                entity.HasIndex(e => e.PersonId, "IX_ApartmentRequests_personId");

                entity.HasIndex(e => e.ReqDate, "IX_ApartmentRequests_regDate");

                entity.HasIndex(e => e.ResidentId, "IX_ApartmentRequests_residentId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Accountid).HasColumnName("accountid");

                entity.Property(e => e.AnswerDate)
                    .HasColumnType("datetime")
                    .HasColumnName("answerDate");

                entity.Property(e => e.AnswerNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("answerNumber");

                entity.Property(e => e.AnswerUserId).HasColumnName("answerUserId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmaIl)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonName");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reqDate");

                entity.Property(e => e.ResidentId).HasColumnName("residentId");

                entity.Property(e => e.ResidentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentName");

                entity.Property(e => e.ResidentTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentTel");

                entity.Property(e => e.ResultId).HasColumnName("resultId");

                entity.Property(e => e.ResultKind).HasColumnName("resultKind");

                entity.Property(e => e.ResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resultName");

                entity.Property(e => e.TimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("timeBegin");

                entity.Property(e => e.TimeDuration).HasColumnName("timeDuration");

                entity.Property(e => e.TimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("timeEnd");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ApartmentRequests)
                    .HasForeignKey(d => d.Accountid)
                    .HasConstraintName("FK_ApartmentRequests_Accounts");

                entity.HasOne(d => d.AnswerUser)
                    .WithMany(p => p.ApartmentRequestAnswerUsers)
                    .HasForeignKey(d => d.AnswerUserId)
                    .HasConstraintName("FK_ApartmentRequests_AnswerUsers");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentRequests)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentRequests_Apartments");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ApartmentRequests)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_ApartmentRequests_Persons");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.ApartmentRequestReasons)
                    .HasForeignKey(d => d.ReasonId)
                    .HasConstraintName("FK_ApartmentRequests_Reasons");

                entity.HasOne(d => d.Resident)
                    .WithMany(p => p.ApartmentRequests)
                    .HasForeignKey(d => d.ResidentId)
                    .HasConstraintName("FK_ApartmentRequests_Residents");

                entity.HasOne(d => d.Result)
                    .WithMany(p => p.ApartmentRequestResults)
                    .HasForeignKey(d => d.ResultId)
                    .HasConstraintName("FK_ApartmentRequests_Results");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ApartmentRequestTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_ApartmentRequests_Type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentRequestUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentRequests_Users");
            });

            modelBuilder.Entity<ApartmentRequestAccount>(entity =>
            {
                entity.ToTable("ApartmentRequestAccounts", "sn");

                entity.HasIndex(e => new { e.ApartmentRequestId, e.AccountId }, "IXU_ApartmentRequestAccounts__apartmentRequestId_accountId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ApartmentRequestId).HasColumnName("apartmentRequestId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ApartmentRequestAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentRequestAccounts_accounts");

                entity.HasOne(d => d.ApartmentRequest)
                    .WithMany(p => p.ApartmentRequestAccounts)
                    .HasForeignKey(d => d.ApartmentRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentRequestAccounts_apartmentRequests");
            });

            modelBuilder.Entity<ApartmentRequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentRequestsView", "sn");

                entity.Property(e => e.AccountAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountAddress");

                entity.Property(e => e.AccountLcnumbers).HasColumnName("AccountLCNumbers");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AnswerDate)
                    .HasColumnType("datetime")
                    .HasColumnName("answerDate");

                entity.Property(e => e.AnswerNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("answerNumber");

                entity.Property(e => e.AnswerUserId).HasColumnName("answerUserId");

                entity.Property(e => e.AnswerUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("answerUserName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonName");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reqDate");

                entity.Property(e => e.Resident)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("resident");

                entity.Property(e => e.ResidentId).HasColumnName("residentId");

                entity.Property(e => e.ResidentName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("residentName");

                entity.Property(e => e.ResidentTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentTel");

                entity.Property(e => e.Result)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.ResultId).HasColumnName("resultId");

                entity.Property(e => e.ResultKind).HasColumnName("resultKind");

                entity.Property(e => e.ResultKindName)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("resultKindName");

                entity.Property(e => e.ResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resultName");

                entity.Property(e => e.TimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("timeBegin");

                entity.Property(e => e.TimeDuration).HasColumnName("timeDuration");

                entity.Property(e => e.TimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("timeEnd");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ApartmentResident>(entity =>
            {
                entity.ToTable("ApartmentResidents", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb, e.Datee }, "IX_ApartmentResidents__apartmentId_dateb_datee");

                entity.HasIndex(e => new { e.PersonId, e.Dateb }, "IX_ApartmentResidents__personId_dateb");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Коментарии");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasComment("Дата прописки");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата внесения информации в БД");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата выписки");

                entity.Property(e => e.IsTransferedPasport).HasColumnName("isTransferedPasport");

                entity.Property(e => e.PersonId)
                    .HasColumnName("personId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Persons");

                entity.Property(e => e.Relative)
                    .HasColumnName("relative")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы FasetItems. Указывает на степень родства муж, жена, сын, дочь и т.д.");

                entity.Property(e => e.TypeResidents)
                    .HasColumnName("typeResidents")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы FasetItems. Указывает на то что прописан, проживает и т.д.");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentResidents)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentResidents_apartments");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ApartmentResidents)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentResidents_persons");

                entity.HasOne(d => d.RelativeNavigation)
                    .WithMany(p => p.ApartmentResidentRelativeNavigations)
                    .HasForeignKey(d => d.Relative)
                    .HasConstraintName("FK_apartmentResidents_FasetItems_Relative");

                entity.HasOne(d => d.TypeResidentsNavigation)
                    .WithMany(p => p.ApartmentResidentTypeResidentsNavigations)
                    .HasForeignKey(d => d.TypeResidents)
                    .HasConstraintName("FK_apartmentResidents_FasetItems_typeResidents");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ApartmentResidents)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_apartmentResidents_users");
            });

            modelBuilder.Entity<ApartmentResidentBenefit>(entity =>
            {
                entity.ToTable("ApartmentResidentBenefits", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.PersonId, e.FromDate }, "IX_ApartmentResidentBenefits__apartmentId_personId");

                entity.HasIndex(e => new { e.ApartmentId, e.PersonId, e.ToDate }, "IX_ApartmentResidentBenefits__apartmentId_personId_toDate");

                entity.HasIndex(e => new { e.PersonBenefitId, e.ServiceTypeId }, "IX_ApartmentResidentBenefits__personBenefitId_serviceTypeId");

                entity.HasIndex(e => new { e.PersonId, e.ServiceTypeId, e.FromDate }, "IX_ApartmentResidentBenefits__personId_serviceTypeId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReason)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("closeReason");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentResidentBenefits)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentResidentBenefits_apartments");

                entity.HasOne(d => d.PersonBenefit)
                    .WithMany(p => p.ApartmentResidentBenefits)
                    .HasForeignKey(d => d.PersonBenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentResidentBenefits_PersonBenefits");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.ApartmentResidentBenefits)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentResidentBenefits_persons");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ApartmentResidentBenefits)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentResidentBenefits_ServiceType");
            });

            modelBuilder.Entity<ApartmentResidentBenefitPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentBenefitPropertiesView", "sn");

                entity.Property(e => e.ApartmentResidentId).HasColumnName("apartmentResidentId");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.BankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Kind).HasColumnName("kind");

                entity.Property(e => e.KindName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("kindName");
            });

            modelBuilder.Entity<ApartmentResidentBenefitProperty>(entity =>
            {
                entity.ToTable("ApartmentResidentBenefitProperties", "sn");

                entity.HasIndex(e => new { e.ApartmentResidentId, e.FromDate }, "IX_ApartmentResidentBenefitProperties_apartmentResidentId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentResidentId).HasColumnName("apartmentResidentId");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Kind).HasColumnName("kind");

                entity.HasOne(d => d.ApartmentResident)
                    .WithMany(p => p.ApartmentResidentBenefitProperties)
                    .HasForeignKey(d => d.ApartmentResidentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentResidentBenefitProperties_Accounts");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.ApartmentResidentBenefitProperties)
                    .HasForeignKey(d => d.BankId)
                    .HasConstraintName("FK_ApartmentResidentBenefitProperties_Banks");

                entity.HasOne(d => d.KindNavigation)
                    .WithMany(p => p.ApartmentResidentBenefitProperties)
                    .HasForeignKey(d => d.Kind)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ApartmentResidentBenefitsServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentBenefitsServiceTypesView", "sn");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.BenefitPercent)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("benefitPercent");

                entity.Property(e => e.BenefitServiceTypeId).HasColumnName("benefitServiceTypeId");

                entity.Property(e => e.BenefitServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitServiceTypeName");

                entity.Property(e => e.FamilyFasetId).HasColumnName("familyFasetId");

                entity.Property(e => e.FamilyFasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("familyFasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsOwnerBenefit).HasColumnName("isOwnerBenefit");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ApartmentResidentBenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentBenefitsView", "sn");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.CloseReason)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("closeReason");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FamilyFasetId).HasColumnName("familyFasetId");

                entity.Property(e => e.FamilyFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("familyFasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.PercentServiceTypes)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("percentServiceTypes");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");

                entity.Property(e => e.PersonBenefitOwnerId).HasColumnName("personBenefitOwnerId");

                entity.Property(e => e.PersonBenefitOwnerName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personBenefitOwnerName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ApartmentResidentVacation>(entity =>
            {
                entity.ToTable("ApartmentResidentVacations", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentResidentVacations__apartmentId");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb, e.Datee }, "IX_ApartmentResidentVacations__apartmentId_dateb_datee");

                entity.HasIndex(e => new { e.ApartmentId, e.Datec, e.Datee }, "IX_ApartmentResidentVacations__apartmentId_datec_datee");

                entity.HasIndex(e => new { e.ApartmentId, e.Dateb }, "IX_ApartmentResidentVacations__apartmentId_fromDate");

                entity.HasIndex(e => new { e.ApartmentId, e.ResidentId, e.Dateb, e.Datee }, "IX_ApartmentResidentVacations__apartmentId_residentId_dateb_date");

                entity.HasIndex(e => new { e.ApartmentId, e.ResidentId, e.Datec, e.Datee }, "IX_ApartmentResidentVacations__apartmentId_residentId_datec_date");

                entity.HasIndex(e => new { e.ResidentId, e.Dateb }, "IX_ApartmentResidentVacations__residentId_fromDate");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartaments");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc")
                    .HasComment("Дата документа");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата занесения информации");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.IsForControl).HasColumnName("isForControl");

                entity.Property(e => e.ResidentId)
                    .HasColumnName("residentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы ApartamentResidents");

                entity.Property(e => e.VacationFasetId)
                    .HasColumnName("vacationFasetId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы FasetItems. Указывает причину отсутствия (Умер, не живет и т.д.)");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentResidentVacations)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentVacations_apartments");

                entity.HasOne(d => d.Resident)
                    .WithMany(p => p.ApartmentResidentVacations)
                    .HasForeignKey(d => d.ResidentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentVacations_residents");

                entity.HasOne(d => d.VacationFaset)
                    .WithMany(p => p.ApartmentResidentVacations)
                    .HasForeignKey(d => d.VacationFasetId)
                    .HasConstraintName("FK_apartmentVacations_FasetItems_vacation");
            });

            modelBuilder.Entity<ApartmentResidentVacationServiceType>(entity =>
            {
                entity.HasKey(e => new { e.ApartmentResidentVacationId, e.ServiceTypeId });

                entity.ToTable("ApartmentResidentVacationServiceTypes", "sn");

                entity.HasIndex(e => e.Id, "IX_ApartmentResidentVacationServiceTypes_Id");

                entity.Property(e => e.ApartmentResidentVacationId).HasColumnName("apartmentResidentVacationId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.ApartmentResidentVacation)
                    .WithMany(p => p.ApartmentResidentVacationServiceTypes)
                    .HasForeignKey(d => d.ApartmentResidentVacationId)
                    .HasConstraintName("FK_apartmentResidentVacationServiceTypes_vacation");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ApartmentResidentVacationServiceTypes)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentResidentVacationServiceTypes_serviceType");
            });

            modelBuilder.Entity<ApartmentResidentVacationServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentVacationServiceTypesView", "sn");

                entity.Property(e => e.ApartmentResidentVacationId).HasColumnName("apartmentResidentVacationId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ApartmentResidentVacationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentVacationsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsForControl).HasColumnName("isForControl");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.ResidentId).HasColumnName("residentId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.VacationFasetId).HasColumnName("vacationFasetId");

                entity.Property(e => e.VacationFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("vacationFasetName");
            });

            modelBuilder.Entity<ApartmentResidentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentResidentsView", "sn");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AllowPersonalDataUsage).HasColumnName("allowPersonalDataUsage");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentLocalAddressId).HasColumnName("apartmentLocalAddressId");

                entity.Property(e => e.ApartmentName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentName");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate");

                entity.Property(e => e.IsTransferedPasport).HasColumnName("isTransferedPasport");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.Relative).HasColumnName("relative");

                entity.Property(e => e.RelativeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("relativeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeResidentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeResidentName");

                entity.Property(e => e.TypeResidents).HasColumnName("typeResidents");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Userlogin)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userlogin");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<ApartmentRoom>(entity =>
            {
                entity.ToTable("ApartmentRooms", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX__ApartmentRooms_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Parameter).HasColumnName("parameter");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("total");
            });

            modelBuilder.Entity<ApartmentTerritorialSubdivision>(entity =>
            {
                entity.ToTable("ApartmentTerritorialSubdivisions", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.FromDate }, "IX_ApartmentTerritorialSubdivisions_apartmentId_fromDate");

                entity.HasIndex(e => e.OrgId, "IX_ApartmentTerritorialSubdivisions_orgId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentTerritorialSubdivisions)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentTerritorialSubdivision_Apartments");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ApartmentTerritorialSubdivisions)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentTerritorialSubdivision_OrgDocuments");
            });

            modelBuilder.Entity<ApartmentTerritorialSubdivisionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentTerritorialSubdivisionsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrganizationCode).HasColumnName("organizationCode");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");
            });

            modelBuilder.Entity<ApartmentTkocontainer>(entity =>
            {
                entity.ToTable("ApartmentTKOContainers", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentTkoplatformId).HasColumnName("apartmentTKOPlatformId");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volume");

                entity.HasOne(d => d.ApartmentTkoplatform)
                    .WithMany(p => p.ApartmentTkocontainers)
                    .HasForeignKey(d => d.ApartmentTkoplatformId)
                    .HasConstraintName("FK_apartmentTKOContainers_apartmentTKOPlatformId");
            });

            modelBuilder.Entity<ApartmentTkoplatform>(entity =>
            {
                entity.ToTable("ApartmentTKOPlatforms", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentTKOPlatforms_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CallsCount).HasColumnName("callsCount");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.2000',(104)))");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.IsTko).HasColumnName("isTko");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("latitude");

                entity.Property(e => e.LocalityId).HasColumnName("localityId");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("longitude");

                entity.Property(e => e.PeriodicityId).HasColumnName("periodicityId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentTkoplatforms)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentTKOPlatforms_apartmentId");

                entity.HasOne(d => d.Locality)
                    .WithMany(p => p.ApartmentTkoplatforms)
                    .HasForeignKey(d => d.LocalityId)
                    .HasConstraintName("FK_apartmentTKOPlatforms_localityId");

                entity.HasOne(d => d.Periodicity)
                    .WithMany(p => p.ApartmentTkoplatforms)
                    .HasForeignKey(d => d.PeriodicityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentTKOPlatforms_FasetItems_periodicityId");
            });

            modelBuilder.Entity<ApartmentTkoplatformsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentTKOPlatformsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CallsCount).HasColumnName("callsCount");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsTko).HasColumnName("isTko");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("latitude");

                entity.Property(e => e.LocalityId).HasColumnName("localityId");

                entity.Property(e => e.LocalityName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("localityName");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("longitude");

                entity.Property(e => e.PeriodicityId).HasColumnName("periodicityId");

                entity.Property(e => e.PeriodicityName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("periodicityName");

                entity.Property(e => e.TkoType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tkoType");
            });

            modelBuilder.Entity<ApartmentType>(entity =>
            {
                entity.ToTable("ApartmentTypes", "sn");

                entity.HasIndex(e => new { e.ApartmentId, e.FromDate, e.FasetId }, "IX_ApartmentTypes_apartmentId_fasetId_fromDate");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ApartmentId)
                    .HasColumnName("apartmentId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Apartments");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.FasetId)
                    .HasColumnName("fasetId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Faset");

                entity.Property(e => e.FasetItemId)
                    .HasColumnName("fasetItemId")
                    .HasComment("Ссылка на уникальный идентифиатор ID таблицы FasetItems");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentTypes)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_apartmentTypes_apartments");

                entity.HasOne(d => d.Faset)
                    .WithMany(p => p.ApartmentTypes)
                    .HasForeignKey(d => d.FasetId)
                    .HasConstraintName("FK_ApartmentTypes_Fasets");

                entity.HasOne(d => d.FasetItem)
                    .WithMany(p => p.ApartmentTypes)
                    .HasForeignKey(d => d.FasetItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentTypes_FasetItems");
            });

            modelBuilder.Entity<ApartmentTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentTypesView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FasetItemName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemName");

                entity.Property(e => e.FasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ApartmentTypesViewWithToDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentTypesView_withToDate", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FasetItemName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemName");

                entity.Property(e => e.FasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Todate)
                    .HasColumnType("datetime")
                    .HasColumnName("todate");
            });

            modelBuilder.Entity<ApartmentWorkTime>(entity =>
            {
                entity.ToTable("ApartmentWorkTimes", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentWorkTimes_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ConsiderHolidays).HasColumnName("considerHolidays");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentWorkTimes)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentWorkTimes_apartmentID");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.ApartmentWorkTimes)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentWorkTimes_templateID");
            });

            modelBuilder.Entity<ApartmentWorkTimeTable>(entity =>
            {
                entity.ToTable("ApartmentWorkTimeTable", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_ApartmentWorkTimeTable_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.ApartmentWorkTimeTables)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ApartmentWorkTimeTable_apartmentsID");
            });

            modelBuilder.Entity<ApartmentWorkTimeTableView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentWorkTimeTableView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("templateName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ApartmentWorkTimesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentWorkTimesView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ConsiderHolidays).HasColumnName("considerHolidays");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("templateName");
            });

            modelBuilder.Entity<ApartmentsOwnersFio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("apartments_owners_fio", "tmp");

                entity.HasIndex(e => new { e.Fio, e.BirthDate, e.AccountNumber }, "IX_TMP_AOF_FBA");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApOwDatec)
                    .HasColumnType("datetime")
                    .HasColumnName("apOwDatec");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Fio)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<ApartmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentsView", "sn");

                entity.Property(e => e.AccountCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountCreatedDate");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.CadastralNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("cadastralNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DoorWay).HasColumnName("doorWay");

                entity.Property(e => e.EnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("energoAccount");

                entity.Property(e => e.FloorHouse).HasColumnName("floorHouse");

                entity.Property(e => e.FloorsCount).HasColumnName("floorsCount");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ObjectCategoryId).HasColumnName("objectCategoryId");

                entity.Property(e => e.ObjectCategoryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("objectCategoryName");

                entity.Property(e => e.OkvedTypeId).HasColumnName("okvedTypeId");

                entity.Property(e => e.OkvedTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("okvedTypeName");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.OwnerOrgId).HasColumnName("ownerOrgId");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");

                entity.Property(e => e.PersonAge).HasColumnName("personAge");

                entity.Property(e => e.Phone)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone2");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToDateDocId).HasColumnName("toDateDocId");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.VolumeTko)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volumeTko");
            });

            modelBuilder.Entity<ApartmentsViewUi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ApartmentsViewUi", "sn");

                entity.Property(e => e.AccountCreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountCreatedDate");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountToDate");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.CadastralNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("cadastralNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DoorWay).HasColumnName("doorWay");

                entity.Property(e => e.EnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("energoAccount");

                entity.Property(e => e.FloorHouse).HasColumnName("floorHouse");

                entity.Property(e => e.FloorsCount).HasColumnName("floorsCount");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ObjectCategoryId).HasColumnName("objectCategoryId");

                entity.Property(e => e.ObjectCategoryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("objectCategoryName");

                entity.Property(e => e.OkvedTypeId).HasColumnName("okvedTypeId");

                entity.Property(e => e.OkvedTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("okvedTypeName");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.OwnerOrgId).HasColumnName("ownerOrgId");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");

                entity.Property(e => e.PersonAge).HasColumnName("personAge");

                entity.Property(e => e.Phone)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone2");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToDateDocId).HasColumnName("toDateDocId");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.VolumeTko)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volumeTko");
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.ToTable("Areas", "sn");

                entity.HasIndex(e => e.AreaGroupId, "IX_Areas_areaGroupId");

                entity.HasIndex(e => e.Name, "IX_Areas_name");

                entity.HasIndex(e => e.Name, "IX_Areas_name_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaGroupId).HasColumnName("areaGroupId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsSystem).HasColumnName("isSystem");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.StatusTemporary).HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("(user_name())");

                entity.HasOne(d => d.AreaGroup)
                    .WithMany(p => p.Areas)
                    .HasForeignKey(d => d.AreaGroupId)
                    .HasConstraintName("FK_Areas_AreaGroups");
            });

            modelBuilder.Entity<AreaAccount>(entity =>
            {
                entity.HasKey(e => new { e.AreaId, e.AccountId });

                entity.ToTable("AreaAccounts", "sn");

                entity.HasIndex(e => e.AccountId, "IX_AreaAccounts_accountId");

                entity.HasIndex(e => new { e.AreaId, e.IndexPart, e.AccountId }, "IX__AreaAccounts__areaId_indexPart_accountId");

                entity.HasIndex(e => e.Id, "IX__AreaAccounts__id");

                entity.HasIndex(e => new { e.AreaId, e.IndexPart }, "IX_snAreaAccounts_areaId_indexPart");

                entity.HasIndex(e => new { e.AreaId, e.Number, e.NumberGroup }, "IX_snAreaAccounts_areaId_number");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndexPart).HasColumnName("indexPart");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.NumberGroup).HasColumnName("numberGroup");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AreaAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_AreaAccounts_Accounts");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaAccounts)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_AreaAccounts_Areas");
            });

            modelBuilder.Entity<AreaAddress>(entity =>
            {
                entity.ToTable("AreaAddresses", "sn");

                entity.HasIndex(e => new { e.AreaId, e.AddressId }, "IX_AreaAddresses_areaId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.AreaAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_AreaAddresses_LocalAddresses");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaAddresses)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_AreaAddresses_Areas");
            });

            modelBuilder.Entity<AreaApartment>(entity =>
            {
                entity.ToTable("AreaApartments", "sn");

                entity.HasIndex(e => e.AreaId, "IX_AreaApartments_areaId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.AreaApartments)
                    .HasForeignKey(d => d.ApartmentId)
                    .HasConstraintName("FK_AreaApartments_Apartments");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaApartments)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_AreaApartments_Areas");
            });

            modelBuilder.Entity<AreaEmail>(entity =>
            {
                entity.ToTable("AreaEmail", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasId).HasColumnName("areasId");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("email");
            });

            modelBuilder.Entity<AreaGroup>(entity =>
            {
                entity.ToTable("AreaGroups", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<AreaOrganization>(entity =>
            {
                entity.ToTable("AreaOrganizations", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaOrganizations)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_AreaOrganizations_Areas");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.AreaOrganizations)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_AreaOrganizations_Organizations");
            });

            modelBuilder.Entity<AreaPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AreaPropertiesView", "sn");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<AreaProperty>(entity =>
            {
                entity.HasKey(e => new { e.AreaId, e.PropertyId });

                entity.ToTable("AreaProperties", "sn");

                entity.HasIndex(e => e.Id, "IX__AreaProperties__id")
                    .IsUnique();

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AreaProperties)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaProperties_areaId");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.AreaProperties)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaProperties_propertyId");
            });

            modelBuilder.Entity<AreasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AreasView", "sn");

                entity.Property(e => e.AreaGroupId).HasColumnName("areaGroupId");

                entity.Property(e => e.AreaGroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("areaGroupName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsSystem).HasColumnName("isSystem");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<AuditNoticeAccountService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AuditNoticeAccountServices", "notice");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName")
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<Bailiff>(entity =>
            {
                entity.ToTable("Bailiffs", "ext");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.ToTable("Banks", "sn");

                entity.HasIndex(e => e.Bik, "UX_Banks__BIK")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Bik)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("BIK")
                    .IsFixedLength(true);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Info)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.LoroAccount)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("loroAccount");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.ToTable("BankAccounts", "sn");

                entity.HasIndex(e => new { e.AccountNumber, e.BankId }, "IX_BankAccounts__AccountNumber_BankId");

                entity.HasIndex(e => e.OwnerId, "IX_BankAccounts__ownerId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalSystemCode)
                    .IsUnicode(false)
                    .HasColumnName("externalSystemCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.2000',(104)))");

                entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccounts_Banks");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.OwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccounts_Owners");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.BankAccounts)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_BankAccounts_propertyId");
            });

            modelBuilder.Entity<BankAccountProvider>(entity =>
            {
                entity.ToTable("BankAccountProviders", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExternalSystemCode)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("externalSystemCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Maskfilename)
                    .IsUnicode(false)
                    .HasColumnName("maskfilename");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.BankAccountProviders)
                    .HasForeignKey(d => d.BankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccountProviders_BankAccounts");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.BankAccountProviders)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccountProviders_Organizations");
            });

            modelBuilder.Entity<BankAccountProvidersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankAccountProvidersView", "sn");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExternalSystemCode)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("externalSystemCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Maskfilename)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("maskfilename");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<BankAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankAccountsView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bankCity");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankName");

                entity.Property(e => e.Bik)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("BIK")
                    .IsFixedLength(true);

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalSystemCode)
                    .IsUnicode(false)
                    .HasColumnName("externalSystemCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");

                entity.Property(e => e.LoroAccount)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("loroAccount");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<BankPaymentOrder>(entity =>
            {
                entity.ToTable("BankPaymentOrders", "pay");

                entity.HasIndex(e => new { e.OrderName, e.Md5 }, "UQ_BankPaymentOrder_OrderName_Md5")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankTypeId).HasColumnName("bankTypeId");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsPayCurrentReceipt).HasColumnName("isPayCurrentReceipt");

                entity.Property(e => e.Md5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("md5");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orderName");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PaymentRecipient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentRecipient");

                entity.Property(e => e.PaymentSender)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSender");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalReceivedSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalReceivedSumm");

                entity.Property(e => e.TotalSendSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalSendSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.BankType)
                    .WithMany(p => p.BankPaymentOrderBankTypes)
                    .HasForeignKey(d => d.BankTypeId)
                    .HasConstraintName("FK_BankPaymentOrders_FasetItems_BankTypeId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.BankPaymentOrderStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrders_FasetItemId");
            });

            modelBuilder.Entity<BankPaymentOrderRecordExternalProcessing>(entity =>
            {
                entity.HasKey(e => new { e.BankPaymentOrderRecordId, e.ExternalProcessingId })
                    .HasName("PK__BankPaymentOrdersRecords");

                entity.ToTable("BankPaymentOrderRecordExternalProcessings", "sn");

                entity.Property(e => e.BankPaymentOrderRecordId).HasColumnName("bankPaymentOrderRecordId");

                entity.Property(e => e.ExternalProcessingId).HasColumnName("externalProcessingId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.BankPaymentOrderRecord)
                    .WithMany(p => p.BankPaymentOrderRecordExternalProcessings)
                    .HasForeignKey(d => d.BankPaymentOrderRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrderRecordExternalProcessings_BankPaymentOrdersRecords");

                entity.HasOne(d => d.ExternalProcessing)
                    .WithMany(p => p.BankPaymentOrderRecordExternalProcessings)
                    .HasForeignKey(d => d.ExternalProcessingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrderRecordExternalProcessings_ExternalProcessings");
            });

            modelBuilder.Entity<BankPaymentOrderRecordJn>(entity =>
            {
                entity.HasKey(e => new { e.BankPaymentOrderRecordId, e.JnId })
                    .HasName("PK__BankPaymentOrdersRecordsJn");

                entity.ToTable("BankPaymentOrderRecordJn", "sn");

                entity.HasIndex(e => e.JnId, "IX__BankPaymentOrderRecordJn_jnId");

                entity.Property(e => e.BankPaymentOrderRecordId).HasColumnName("bankPaymentOrderRecordId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.BankPaymentOrderRecord)
                    .WithMany(p => p.BankPaymentOrderRecordJns)
                    .HasForeignKey(d => d.BankPaymentOrderRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrderRecordJn_BankPaymentOrdersRecords");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.BankPaymentOrderRecordJns)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrderRecordJn_Jn");
            });

            modelBuilder.Entity<BankPaymentOrdersRecord>(entity =>
            {
                entity.ToTable("BankPaymentOrdersRecords", "pay");

                entity.HasIndex(e => e.GroupOperId, "IX_BankPaymentOrdersRecords__groupOperId");

                entity.HasIndex(e => e.BankPaymentOrdersId, "IX_BankPaymentOrdersRecords_bankPaymentOrdersId");

                entity.HasIndex(e => e.DebtActionId, "IX_BankPaymentOrdersRecords_debtActionId");

                entity.HasIndex(e => e.PaymentOrderId, "IX_BankPaymentOrdersRecords_paymentOrderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountDocumentId).HasColumnName("accountDocumentId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Apx)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("apx");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.BankPaymentOrdersId).HasColumnName("bankPaymentOrdersId");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.IsSend).HasColumnName("isSend");

                entity.Property(e => e.NoticePaymentOrderId).HasColumnName("noticePaymentOrderId");

                entity.Property(e => e.NoticePaymentOrderNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("noticePaymentOrderNumber");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orderName");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OtherBankPaymentAttributeId).HasColumnName("otherBankPaymentAttributeId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PayerBank)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payerBank");

                entity.Property(e => e.PayerBankAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payerBankAccountNumber");

                entity.Property(e => e.PayerBankBik)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("payerBankBIK");

                entity.Property(e => e.PayerBankShortAccountNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("payerBankShortAccountNumber");

                entity.Property(e => e.PaymentNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("paymentNumber");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentPayer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentPayer");

                entity.Property(e => e.PaymentPayerInn)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("paymentPayerINN");

                entity.Property(e => e.PaymentReceiver)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentReceiver");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.SubService)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("subService");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.ArrivalBankAccount)
                    .WithMany(p => p.BankPaymentOrdersRecords)
                    .HasForeignKey(d => d.ArrivalBankAccountId)
                    .HasConstraintName("FK_BankPaymentOrdersRecords_BankAccounts");

                entity.HasOne(d => d.BankPaymentOrders)
                    .WithMany(p => p.BankPaymentOrdersRecords)
                    .HasForeignKey(d => d.BankPaymentOrdersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrdersRecords_BankPaymentOrders");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.BankPaymentOrdersRecords)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_pay_BankPaymentOrdersRecords_debtActionId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.BankPaymentOrdersRecords)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_BankPaymentOrdersRecords_GroupOperations");

                entity.HasOne(d => d.OtherBankPaymentAttribute)
                    .WithMany(p => p.BankPaymentOrdersRecordOtherBankPaymentAttributes)
                    .HasForeignKey(d => d.OtherBankPaymentAttributeId)
                    .HasConstraintName("FK_BankPaymentOrderRecord_FasetItems_OtherBankPaymentAttributeId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.BankPaymentOrdersRecordStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankPaymentOrdersRecords_FasetItemId");
            });

            modelBuilder.Entity<BankPaymentOrdersRecordAccount>(entity =>
            {
                entity.ToTable("BankPaymentOrdersRecordAccounts", "pay");

                entity.HasIndex(e => e.BankPaymentOrdersRecordId, "IX_BankPaymentOrdersRecordAccounts_bankPaymentOrdersRecordId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.BankPaymentOrdersRecordId).HasColumnName("bankPaymentOrdersRecordId");

                entity.HasOne(d => d.BankPaymentOrdersRecord)
                    .WithMany(p => p.BankPaymentOrdersRecordAccounts)
                    .HasForeignKey(d => d.BankPaymentOrdersRecordId)
                    .HasConstraintName("FK__payBankPaymentOrdersRecordAccounts");
            });

            modelBuilder.Entity<BankPaymentOrdersRecordAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankPaymentOrdersRecordAccountsView", "pay");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankPaymentOrdersRecordId).HasColumnName("bankPaymentOrdersRecordId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<BankPaymentOrdersRecordError>(entity =>
            {
                entity.ToTable("BankPaymentOrdersRecordErrors", "pay");

                entity.HasIndex(e => e.BankPaymentOrderRecordId, "IX_BankPaymentOrdersRecordErrors_bankPaymentOrderRecordId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BankPaymentOrderRecordId).HasColumnName("bankPaymentOrderRecordId");

                entity.Property(e => e.Error)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ErrorId).HasColumnName("errorId");

                entity.Property(e => e.ErrorTypeId).HasColumnName("errorTypeId");
            });

            modelBuilder.Entity<BankPaymentOrdersRecordsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankPaymentOrdersRecordsView", "pay");

                entity.Property(e => e.AccountDocumentId).HasColumnName("accountDocumentId");

                entity.Property(e => e.AccountDocumentNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("accountDocumentNumber");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Apx)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("apx");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.BankPaymentOrdersId).HasColumnName("bankPaymentOrdersId");

                entity.Property(e => e.BankPaymentOrdersName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankPaymentOrdersName");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.DebtActionCourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtActionCourtProcessNumber");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsSend).HasColumnName("isSend");

                entity.Property(e => e.NoticePaymentOrderId).HasColumnName("noticePaymentOrderId");

                entity.Property(e => e.NoticePaymentOrderNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("noticePaymentOrderNumber");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orderName");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.OtherBankPaymentAttributeId).HasColumnName("otherBankPaymentAttributeId");

                entity.Property(e => e.OtherBankPaymentAttributeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("otherBankPaymentAttributeName");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PayerBank)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payerBank");

                entity.Property(e => e.PayerBankAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payerBankAccountNumber");

                entity.Property(e => e.PayerBankBik)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("payerBankBIK");

                entity.Property(e => e.PayerBankShortAccountNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("payerBankShortAccountNumber");

                entity.Property(e => e.PaymentNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("paymentNumber");

                entity.Property(e => e.PaymentOrderDeltaSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("paymentOrderDeltaSumm");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderMainId).HasColumnName("paymentOrderMainId");

                entity.Property(e => e.PaymentOrderNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderNumber");

                entity.Property(e => e.PaymentPayer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentPayer");

                entity.Property(e => e.PaymentPayerInn)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("paymentPayerINN");

                entity.Property(e => e.PaymentReceiver)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentReceiver");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.SubService)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("subService");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<BankPaymentOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankPaymentOrdersView", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AllRecordsSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("allRecordsSumm");

                entity.Property(e => e.BankTypeId).HasColumnName("bankTypeId");

                entity.Property(e => e.CancellationSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("cancellationSumm");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPayCurrentReceipt).HasColumnName("isPayCurrentReceipt");

                entity.Property(e => e.Md5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("md5");

                entity.Property(e => e.OrderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orderName");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PaymentRecipient)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentRecipient");

                entity.Property(e => e.PaymentSender)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSender");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.ProcessedRecordsSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("processedRecordsSumm");

                entity.Property(e => e.RevenueSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("revenueSumm");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalReceivedSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalReceivedSumm");

                entity.Property(e => e.TotalSendSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalSendSumm");

                entity.Property(e => e.UnprocessedRecordsSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("unprocessedRecordsSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<BarCode128>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK__barCode128");

                entity.ToTable("barCode128", "util");

                entity.HasIndex(e => e.BarChar, "IX_utilbarCode128_barChar")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .ValueGeneratedNever()
                    .HasColumnName("code");

                entity.Property(e => e.BarChar).HasColumnName("barChar");

                entity.Property(e => e.BinCode)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("binCode");
            });

            modelBuilder.Entity<Benefit>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Period });

                entity.ToTable("Benefits", "rep");

                entity.HasIndex(e => new { e.Period, e.ApartmentId, e.ServiceId }, "IX_repBenefits__period_apartmentId_serviceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.BenefitChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitChargeSumm");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitDocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocNum");

                entity.Property(e => e.BenefitDocSer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocSer");

                entity.Property(e => e.BenefitDocTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocTypeName");

                entity.Property(e => e.BenefitFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("benefitFromDate");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.BenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitRecSumm");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.BenefitToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("benefitToDate");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.ExploitingPersonKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exploitingPersonKey");

                entity.Property(e => e.FasetBudgetTypeId).HasColumnName("fasetBudgetTypeId");

                entity.Property(e => e.FasetBudgetTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetBudgetTypeName");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("firstName");

                entity.Property(e => e.FullName)
                    .HasMaxLength(562)
                    .IsUnicode(false)
                    .HasColumnName("fullName")
                    .HasComputedColumnSql("((((ltrim(rtrim(isnull([lastName],'')))+' ')+ltrim(rtrim(isnull([firstName],''))))+' ')+ltrim(rtrim(isnull([middleName],''))))", true);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastName");

                entity.Property(e => e.LawId).HasColumnName("lawId");

                entity.Property(e => e.LawName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lawName");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("middleName");

                entity.Property(e => e.MonetizedBenefitChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitChargeSumm");

                entity.Property(e => e.MonetizedBenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitRecSumm");

                entity.Property(e => e.PersonApartmentKey)
                    .HasMaxLength(594)
                    .IsUnicode(false)
                    .HasColumnName("personApartmentKey")
                    .HasComputedColumnSql("((((((((ltrim(rtrim(isnull([lastName],'q')))+' ')+ltrim(rtrim(isnull([firstName],'w'))))+' ')+ltrim(rtrim(isnull([middleName],'e'))))+' ')+isnull(CONVERT([varchar](10),[birthDate],(104)),'r'))+' ')+isnull(CONVERT([varchar](20),[apartmentId],(0)),'t'))", false);

                entity.Property(e => e.PersonDocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("personDocDate");

                entity.Property(e => e.PersonDocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("personDocNum");

                entity.Property(e => e.PersonDocSer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("personDocSer");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonKey)
                    .HasMaxLength(573)
                    .IsUnicode(false)
                    .HasColumnName("personKey")
                    .HasComputedColumnSql("((((((ltrim(rtrim(isnull([lastName],'q')))+' ')+ltrim(rtrim(isnull([firstName],'w'))))+' ')+ltrim(rtrim(isnull([middleName],'e'))))+' ')+isnull(CONVERT([varchar](10),[birthDate],(104)),'r'))", false);

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<Benefit1>(entity =>
            {
                entity.ToTable("Benefits", "sn");

                entity.HasIndex(e => e.Code, "Ch_Benefits_code")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcFeature).HasColumnName("calcFeature");

                entity.Property(e => e.ClLg)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_lg");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ExternalCode).HasColumnName("externalCode");

                entity.Property(e => e.IsAddress).HasColumnName("isAddress");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.ObjLg)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_lg");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.HasOne(d => d.CalcFeatureNavigation)
                    .WithMany(p => p.Benefit1s)
                    .HasForeignKey(d => d.CalcFeature)
                    .HasConstraintName("FK_Benefits_FasetItems");
            });

            modelBuilder.Entity<BenefitAccount>(entity =>
            {
                entity.ToTable("BenefitAccounts", "bc");

                entity.HasIndex(e => new { e.Period, e.AccountId }, "IX_BenefitAccounts__period_accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.BenefitAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_BenefitAccounts_Accounts");
            });

            modelBuilder.Entity<BenefitApartment>(entity =>
            {
                entity.ToTable("BenefitApartments", "bc");

                entity.HasIndex(e => new { e.ApartmentId, e.Period }, "IX_bcBenefitApartments_apartmentId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountBenefit).HasColumnName("accountBenefit");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("firstName");

                entity.Property(e => e.Flat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.House)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.LastName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lastName");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("middleName");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("region");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.BenefitApartments)
                    .HasForeignKey(d => d.ApartmentId)
                    .HasConstraintName("FK_BenefitApartments_Apartments");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.BenefitApartments)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_BenefitApartments_Persons");
            });

            modelBuilder.Entity<BenefitArea>(entity =>
            {
                entity.ToTable("BenefitArea", "sn");

                entity.HasIndex(e => new { e.BenefitId, e.BenefitSrvTypeId, e.Dateb, e.MonetizationDate }, "IX_BenefitArea__benefitId_benefitSrvTypeId_fromDate_monetizationDate");

                entity.HasIndex(e => new { e.BenefitId, e.ExceptApartmentTypeId }, "IX_BenefitArea_benefitId_exceptApartmentTypeId");

                entity.HasIndex(e => e.BenefitId, "IX_BenefitArea_benefitSrvTypeId_dateb_monetizationDate");

                entity.HasIndex(e => new { e.BenefitSrvTypeId, e.Datee }, "IX_BenefitArea_benefitSrvTypeId_datee");

                entity.HasIndex(e => e.Dateb, "IX_BenefitArea_dateb_inc_benefitId_benefitSrvTypeId");

                entity.HasIndex(e => e.Datee, "IX_BenefitArea_datee_inc_benefitId_benefitSrvTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalSquareFactor)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("additionalSquareFactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BenefitAggregationTypeid).HasColumnName("benefitAggregationTypeid");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitNormUseTypeId).HasColumnName("benefitNormUseTypeId");

                entity.Property(e => e.BenefitSrvTypeId).HasColumnName("benefitSrvTypeId");

                entity.Property(e => e.CanExceedNorm).HasColumnName("canExceedNorm");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExceptApartmentTypeId).HasColumnName("exceptApartmentTypeId");

                entity.Property(e => e.FamilyFasetId).HasColumnName("familyFasetId");

                entity.Property(e => e.IsLimitBenefitNorm).HasColumnName("isLimitBenefitNorm");

                entity.Property(e => e.IsMonetization)
                    .IsRequired()
                    .HasColumnName("isMonetization")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSave)
                    .IsRequired()
                    .HasColumnName("isSave")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Sum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sum");

                entity.Property(e => e.UseAllSquare).HasColumnName("useAllSquare");

                entity.Property(e => e.UseAllSquareSumm).HasColumnName("useAllSquareSumm");

                entity.Property(e => e.UseApartmentOwnerShare).HasColumnName("useApartmentOwnerShare");

                entity.Property(e => e.UseFamilySquare).HasColumnName("useFamilySquare");

                entity.Property(e => e.UseNormToAloneBenefitOwner)
                    .IsRequired()
                    .HasColumnName("useNormToAloneBenefitOwner")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UsePersonSquare).HasColumnName("usePersonSquare");

                entity.HasOne(d => d.BenefitAggregationType)
                    .WithMany(p => p.BenefitAreaBenefitAggregationTypes)
                    .HasForeignKey(d => d.BenefitAggregationTypeid)
                    .HasConstraintName("FK_BenefitArea_FasetItems4");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.BenefitAreas)
                    .HasForeignKey(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitArea_Benefits");

                entity.HasOne(d => d.BenefitNormUseType)
                    .WithMany(p => p.BenefitAreaBenefitNormUseTypes)
                    .HasForeignKey(d => d.BenefitNormUseTypeId)
                    .HasConstraintName("FK_BenefitArea_FasetItems3");

                entity.HasOne(d => d.BenefitSrvType)
                    .WithMany(p => p.BenefitAreas)
                    .HasForeignKey(d => d.BenefitSrvTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitArea_BenefitServiceTypes");

                entity.HasOne(d => d.ExceptApartmentType)
                    .WithMany(p => p.BenefitAreaExceptApartmentTypes)
                    .HasForeignKey(d => d.ExceptApartmentTypeId)
                    .HasConstraintName("FK_BenefitArea_FasetItems1");

                entity.HasOne(d => d.FamilyFaset)
                    .WithMany(p => p.BenefitAreaFamilyFasets)
                    .HasForeignKey(d => d.FamilyFasetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitArea_FasetItems");
            });

            modelBuilder.Entity<BenefitAreaView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitAreaView", "sn");

                entity.Property(e => e.AdditionalSquareFactor)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("additionalSquareFactor");

                entity.Property(e => e.BenefitAggregationTypeId).HasColumnName("benefitAggregationTypeId");

                entity.Property(e => e.BenefitAggregationTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitAggregationTypeName");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.BenefitNormUseTypeId).HasColumnName("benefitNormUseTypeId");

                entity.Property(e => e.BenefitNormUseTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormUseTypeName");

                entity.Property(e => e.BenefitSrvTypeId).HasColumnName("benefitSrvTypeId");

                entity.Property(e => e.BenefitSrvTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitSrvTypeName");

                entity.Property(e => e.CanExceedNorm).HasColumnName("canExceedNorm");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExceptApartmentTypeId).HasColumnName("exceptApartmentTypeId");

                entity.Property(e => e.ExceptApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exceptApartmentTypeName");

                entity.Property(e => e.FamilyFasetId).HasColumnName("familyFasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsLimitBenefitNorm).HasColumnName("isLimitBenefitNorm");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.Sum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sum");

                entity.Property(e => e.UseAllSquare).HasColumnName("useAllSquare");

                entity.Property(e => e.UseAllSquareSumm).HasColumnName("useAllSquareSumm");

                entity.Property(e => e.UseApartmentOwnerShare).HasColumnName("useApartmentOwnerShare");

                entity.Property(e => e.UseFamilySquare).HasColumnName("useFamilySquare");

                entity.Property(e => e.UseNormToAloneBenefitOwner).HasColumnName("useNormToAloneBenefitOwner");

                entity.Property(e => e.UsePersonSquare).HasColumnName("usePersonSquare");
            });

            modelBuilder.Entity<BenefitDebt>(entity =>
            {
                entity.ToTable("BenefitDebts", "sn");

                entity.HasIndex(e => new { e.PersonId, e.ServiceTypeId, e.Period }, "IX_BenefitDebts_personId_serviceTypeId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("closeDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.BenefitDebts)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_BenefitDebts_Persons");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.BenefitDebts)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_BenefitDebts_ServiceTypes");
            });

            modelBuilder.Entity<BenefitDebtsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitDebtsView", "sn");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("closeDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitDiffEsrn>(entity =>
            {
                entity.ToTable("BenefitDiff_ESRN", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DontUse).HasColumnName("dont_use");

                entity.Property(e => e.Family)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("FAMILY");

                entity.Property(e => e.Father)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FATHER");

                entity.Property(e => e.FullName)
                    .HasMaxLength(102)
                    .IsUnicode(false)
                    .HasColumnName("fullName")
                    .HasComputedColumnSql("((((ltrim(rtrim(isnull([family],'')))+' ')+ltrim(rtrim(isnull([name],''))))+' ')+ltrim(rtrim(isnull([father],''))))", true);

                entity.Property(e => e.Lg).HasColumnName("LG");

                entity.Property(e => e.Ls)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LS");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Prich)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PRICH");

                entity.Property(e => e.Street)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.Summa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SUMMA");

                entity.Property(e => e.Usl).HasColumnName("USL");
            });

            modelBuilder.Entity<BenefitDiffKszn>(entity =>
            {
                entity.ToTable("BenefitDiff_KSZN", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Family)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("FAMILY");

                entity.Property(e => e.Father)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FATHER");

                entity.Property(e => e.Kszn)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("KSZN");

                entity.Property(e => e.Lg)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("LG");

                entity.Property(e => e.Ls)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("LS");

                entity.Property(e => e.Name)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Street)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("STREET");

                entity.Property(e => e.Summa)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SUMMA");
            });

            modelBuilder.Entity<BenefitLaw>(entity =>
            {
                entity.ToTable("BenefitLaws", "sn");

                entity.HasIndex(e => e.BenefitId, "IUX_BenefitLaws__benefitId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.LawId).HasColumnName("lawId");

                entity.HasOne(d => d.Benefit)
                    .WithOne(p => p.BenefitLaw)
                    .HasForeignKey<BenefitLaw>(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitLaws_Benefits");

                entity.HasOne(d => d.Law)
                    .WithMany(p => p.BenefitLaws)
                    .HasForeignKey(d => d.LawId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitLaws_Laws");
            });

            modelBuilder.Entity<BenefitNormsForElectric>(entity =>
            {
                entity.ToTable("BenefitNormsForElectric", "sn");

                entity.HasIndex(e => new { e.BenefitId, e.FromResidents, e.ToResidents, e.IsWithCooker, e.FromDate }, "IX_BenefitNormsForElectric__all");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentType).HasColumnName("apartmentType");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.RoomsCountEnd).HasColumnName("roomsCountEnd");

                entity.Property(e => e.RoomsCountStart).HasColumnName("roomsCountStart");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");

                entity.HasOne(d => d.ApartmentTypeNavigation)
                    .WithMany(p => p.BenefitNormsForElectrics)
                    .HasForeignKey(d => d.ApartmentType);

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.BenefitNormsForElectrics)
                    .HasForeignKey(d => d.BenefitId)
                    .HasConstraintName("FK_BenefitNormsForElectric_Benefits");
            });

            modelBuilder.Entity<BenefitNormsForElectricView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitNormsForElectricView", "sn");

                entity.Property(e => e.ApartmentType).HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentTypeName");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.RoomsCountEnd).HasColumnName("roomsCountEnd");

                entity.Property(e => e.RoomsCountStart).HasColumnName("roomsCountStart");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitNormsForGa>(entity =>
            {
                entity.ToTable("BenefitNormsForGas", "sn");

                entity.HasIndex(e => new { e.BenefitId, e.FromDate, e.TypeId, e.ExceptTypeId }, "IX_BenefitNormsForGas__benefitId_fromDate_typeId_exceptTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("value");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.BenefitNormsForGas)
                    .HasForeignKey(d => d.BenefitId)
                    .HasConstraintName("FK_BenefitNormsForGas_Benefits");

                entity.HasOne(d => d.ExceptType)
                    .WithMany(p => p.BenefitNormsForGaExceptTypes)
                    .HasForeignKey(d => d.ExceptTypeId);

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.BenefitNormsForGaTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<BenefitNormsForGasResultView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitNormsForGasResultView", "sn");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExceptFasetId).HasColumnName("exceptFasetId");

                entity.Property(e => e.ExceptFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exceptFasetName");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.ExceptTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exceptTypeName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitNormsForGasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitNormsForGasView", "sn");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExceptFasetId).HasColumnName("exceptFasetId");

                entity.Property(e => e.ExceptFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exceptFasetName");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.ExceptTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exceptTypeName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitNormsForSquare>(entity =>
            {
                entity.ToTable("BenefitNormsForSquare", "sn");

                entity.HasIndex(e => e.BenefitId, "IX_BenefitNormsForSquare__benefitId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.FromRooms).HasColumnName("fromRooms");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.ToRooms)
                    .HasColumnName("toRooms")
                    .HasDefaultValueSql("((99))");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.BenefitNormsForSquares)
                    .HasForeignKey(d => d.BenefitId)
                    .HasConstraintName("FK_BenefitNormsForSquare_Benefits");
            });

            modelBuilder.Entity<BenefitNormsForSquareResultView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitNormsForSquareResultView", "sn");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.FromRooms).HasColumnName("fromRooms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.ToRooms).HasColumnName("toRooms");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitNormsForSquareView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitNormsForSquareView", "sn");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.FromRooms).HasColumnName("fromRooms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.ToRooms).HasColumnName("toRooms");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<BenefitServiceType>(entity =>
            {
                entity.ToTable("BenefitServiceTypes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.BenefitServiceTypes)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitServiceTypes_Organizations");
            });

            modelBuilder.Entity<BenefitServiceTypeLink>(entity =>
            {
                entity.HasKey(e => new { e.BenefitServiceTypeId, e.SrvTypeId });

                entity.ToTable("BenefitServiceTypeLinks", "sn");

                entity.Property(e => e.BenefitServiceTypeId).HasColumnName("benefitServiceTypeId");

                entity.Property(e => e.SrvTypeId).HasColumnName("srvTypeId");

                entity.HasOne(d => d.BenefitServiceType)
                    .WithMany(p => p.BenefitServiceTypeLinks)
                    .HasForeignKey(d => d.BenefitServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitServiceTypeLinks_BenefitServiceTypes");

                entity.HasOne(d => d.SrvType)
                    .WithMany(p => p.BenefitServiceTypeLinks)
                    .HasForeignKey(d => d.SrvTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BenefitServiceTypeLinks_ServiceTypes");
            });

            modelBuilder.Entity<BenefitsGt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Benefits_gt", "rep");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.BenefitChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitChargeSumm");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitDocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocNum");

                entity.Property(e => e.BenefitDocSer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocSer");

                entity.Property(e => e.BenefitDocTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitDocTypeName");

                entity.Property(e => e.BenefitFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("benefitFromDate");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.BenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitRecSumm");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.BenefitToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("benefitToDate");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.ExploitingPersonKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("exploitingPersonKey");

                entity.Property(e => e.FasetBudgetTypeId).HasColumnName("fasetBudgetTypeId");

                entity.Property(e => e.FasetBudgetTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetBudgetTypeName");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("firstName");

                entity.Property(e => e.FullName)
                    .HasMaxLength(562)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastName");

                entity.Property(e => e.LawId).HasColumnName("lawId");

                entity.Property(e => e.LawName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lawName");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("middleName");

                entity.Property(e => e.MonetizedBenefitChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitChargeSumm");

                entity.Property(e => e.MonetizedBenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitRecSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonApartmentKey)
                    .HasMaxLength(594)
                    .IsUnicode(false)
                    .HasColumnName("personApartmentKey");

                entity.Property(e => e.PersonDocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("personDocDate");

                entity.Property(e => e.PersonDocNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("personDocNum");

                entity.Property(e => e.PersonDocSer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("personDocSer");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonKey)
                    .HasMaxLength(573)
                    .IsUnicode(false)
                    .HasColumnName("personKey");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<BenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BenefitsView", "sn");

                entity.Property(e => e.BudgetTypeId).HasColumnName("budgetTypeId");

                entity.Property(e => e.BudgetTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("budgetTypeName");

                entity.Property(e => e.CalcFeature).HasColumnName("calcFeature");

                entity.Property(e => e.CalcFeatureName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcFeatureName");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalCode).HasColumnName("externalCode");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsAddress).HasColumnName("isAddress");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LawId).HasColumnName("lawId");

                entity.Property(e => e.LawName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lawName");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<Boiler>(entity =>
            {
                entity.ToTable("Boilers", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");
            });

            modelBuilder.Entity<BoilersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BoilersView", "sn");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<BoilersVolume>(entity =>
            {
                entity.ToTable("BoilersVolume", "sn");

                entity.HasIndex(e => e.BoilerId, "ix_BoilerVol");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BoilerId).HasColumnName("boilerId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.TypeVolume).HasColumnName("typeVolume");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<BoilersVolumeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BoilersVolumeView", "sn");

                entity.Property(e => e.BoilerId).HasColumnName("boilerId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.TypeVolume).HasColumnName("typeVolume");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<BranchCounterInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BranchCounterInvoices", "notice");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.ToTable("Budget", "sn");

                entity.HasIndex(e => new { e.OrgId, e.BudgetFasetId }, "IXU_Budget_OrgId_BudgetFasetId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetFasetId).HasColumnName("budgetFasetId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.BudgetFaset)
                    .WithMany(p => p.Budgets)
                    .HasForeignKey(d => d.BudgetFasetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Budget_FasetItems");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.Budgets)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Budget_Organizations1");
            });

            modelBuilder.Entity<Cache>(entity =>
            {
                entity.HasKey(e => e.KeyHash)
                    .HasName("PK_utilCaches");

                entity.ToTable("Caches", "util");

                entity.HasIndex(e => e.Created, "IX_utilCaches_created");

                entity.HasIndex(e => e.Id, "IX_utilCaches_id")
                    .IsUnique();

                entity.Property(e => e.KeyHash)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("keyHash");

                entity.Property(e => e.AddKey)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("addKey");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<CacheSnaccount>(entity =>
            {
                entity.HasKey(e => new { e.CacheId, e.AccountId })
                    .HasName("PK_utilCacheSNAccounts");

                entity.ToTable("CacheSNAccounts", "util");

                entity.Property(e => e.CacheId).HasColumnName("cacheId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CacheSnaccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_utilCacheSNAccounts_accountId");

                entity.HasOne(d => d.Cache)
                    .WithMany(p => p.CacheSnaccounts)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.CacheId)
                    .HasConstraintName("FK_utilCacheSNAccounts_cacheId");
            });

            modelBuilder.Entity<Calc>(entity =>
            {
                entity.ToTable("Calcs", "cp");

                entity.Property(e => e.CalcId)
                    .ValueGeneratedNever()
                    .HasColumnName("calcId");

                entity.Property(e => e.ErrorText)
                    .IsUnicode(false)
                    .HasColumnName("errorText");

                entity.Property(e => e.TryCount).HasColumnName("tryCount");
            });

            modelBuilder.Entity<Calc1>(entity =>
            {
                entity.ToTable("Calcs", "sn");

                entity.HasIndex(e => new { e.Id, e.UseResidentVacations, e.IsSubCalc }, "IX_Calcs_created_calcTime");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.CalcTime)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("calcTime")
                    .HasComment("Время выполнения расчета");

                entity.Property(e => e.CountApartment).HasColumnName("countApartment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Время начала проведения расчета");

                entity.Property(e => e.FinalTime)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("finalTime");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsFromPayment).HasColumnName("isFromPayment");

                entity.Property(e => e.IsSaveGroupOperCalcParams).HasColumnName("isSaveGroupOperCalcParams");

                entity.Property(e => e.IsSubCalc).HasColumnName("isSubCalc");

                entity.Property(e => e.ParentCalcId).HasColumnName("parentCalcId");

                entity.Property(e => e.SubCalcServices).HasColumnName("subCalcServices");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UseResidentVacations)
                    .HasColumnName("useResidentVacations")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Calc2>(entity =>
            {
                entity.ToTable("Calcs", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcStatus).HasColumnName("calcStatus");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEnd");

                entity.Property(e => e.DateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStart");

                entity.Property(e => e.FromDate)
                    .HasColumnType("date")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("date")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Calc2s)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_vmcCalcs_Users");
            });

            modelBuilder.Entity<Calc3>(entity =>
            {
                entity.ToTable("Calcs", "vmca");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcTime)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("calcTime");

                entity.Property(e => e.CountApartment).HasColumnName("countApartment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FinalTime)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("finalTime");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsFromPayment).HasColumnName("isFromPayment");

                entity.Property(e => e.IsSaveGroupOperCalcParams).HasColumnName("isSaveGroupOperCalcParams");

                entity.Property(e => e.IsSubCalc).HasColumnName("isSubCalc");

                entity.Property(e => e.ParentCalcId).HasColumnName("parentCalcId");

                entity.Property(e => e.SubCalcServices).HasColumnName("subCalcServices");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UseResidentVacations).HasColumnName("useResidentVacations");
            });

            modelBuilder.Entity<CalcAlg>(entity =>
            {
                entity.ToTable("CalcAlgs", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitNormFormulaId).HasColumnName("benefitNormFormulaId");

                entity.Property(e => e.CalcPriority).HasColumnName("calcPriority");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeNormFormulaId).HasColumnName("chargeNormFormulaId");

                entity.Property(e => e.IsMin1Resident).HasColumnName("isMin1Resident");

                entity.Property(e => e.IsRecalcWithUseResidentVacations)
                    .IsRequired()
                    .HasColumnName("isRecalcWithUseResidentVacations")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NeedBenefitCalc).HasColumnName("needBenefitCalc");

                entity.Property(e => e.NeedSaveCalc)
                    .IsRequired()
                    .HasColumnName("needSaveCalc")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NeedSaveJnParams)
                    .IsRequired()
                    .HasColumnName("needSaveJnParams")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ParamFasetItemId).HasColumnName("paramFasetItemId");

                entity.Property(e => e.UseCounterTypeForLastYear)
                    .IsRequired()
                    .HasColumnName("useCounterTypeForLastYear")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseOwnersInCalcAvg).HasColumnName("useOwnersInCalcAvg");

                entity.Property(e => e.UseOwnershipShareInBenefits).HasColumnName("useOwnershipShareInBenefits");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseSeasonalFactor)
                    .IsRequired()
                    .HasColumnName("useSeasonalFactor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseSuspensionFactor)
                    .HasColumnName("useSuspensionFactor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");

                entity.HasOne(d => d.BenefitNormFormula)
                    .WithMany(p => p.CalcAlgs)
                    .HasForeignKey(d => d.BenefitNormFormulaId)
                    .HasConstraintName("FK_CalcAlgs_CalcAlgorithmBenefitNormFormulas");

                entity.HasOne(d => d.ChargeFormula)
                    .WithMany(p => p.CalcAlgChargeFormulas)
                    .HasForeignKey(d => d.ChargeFormulaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcAlgs_CalcAlgorithmChargeFormulas");

                entity.HasOne(d => d.ChargeNormFormula)
                    .WithMany(p => p.CalcAlgChargeNormFormulas)
                    .HasForeignKey(d => d.ChargeNormFormulaId);

                entity.HasOne(d => d.ParamFasetItem)
                    .WithMany(p => p.CalcAlgs)
                    .HasForeignKey(d => d.ParamFasetItemId)
                    .HasConstraintName("FK_CalcAlgs_FasetItems");
            });

            modelBuilder.Entity<CalcAlgWithOdnbyNormLink>(entity =>
            {
                entity.ToTable("CalcAlgWithODNbyNormLinks", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcAlgNormid).HasColumnName("calcAlgNormid");

                entity.Property(e => e.CalcAlgid).HasColumnName("calcAlgid");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.CalcAlgNorm)
                    .WithMany(p => p.CalcAlgWithOdnbyNormLinkCalcAlgNorms)
                    .HasForeignKey(d => d.CalcAlgNormid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcAlgWithODNbyNormLinks_CalcAlgsNorm");

                entity.HasOne(d => d.CalcAlg)
                    .WithMany(p => p.CalcAlgWithOdnbyNormLinkCalcAlgs)
                    .HasForeignKey(d => d.CalcAlgid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcAlgWithODNbyNormLinks_CalcAlgs");
            });

            modelBuilder.Entity<CalcAlgWithOdnbyNormLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcAlgWithODNbyNormLinksView", "sn");

                entity.Property(e => e.CalcAlgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgName");

                entity.Property(e => e.CalcAlgNormName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgNormName");

                entity.Property(e => e.CalcAlgNormid).HasColumnName("calcAlgNormid");

                entity.Property(e => e.CalcAlgid).HasColumnName("calcAlgid");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<CalcAlgorithm>(entity =>
            {
                entity.ToTable("CalcAlgorithms", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcPriority).HasColumnName("calcPriority");

                entity.Property(e => e.DefaultTariffFaset)
                    .HasColumnName("defaultTariffFaset")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParamFasetId).HasColumnName("paramFasetId");

                entity.Property(e => e.ParamFasetItemId).HasColumnName("paramFasetItemId");

                entity.Property(e => e.SubTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subTypeName");

                entity.Property(e => e.TypeFaset)
                    .HasColumnName("typeFaset")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.DefaultTariffFasetNavigation)
                    .WithMany(p => p.CalcAlgorithmDefaultTariffFasetNavigations)
                    .HasForeignKey(d => d.DefaultTariffFaset)
                    .HasConstraintName("FK_CalcAlgorithms_FasetItems1");

                entity.HasOne(d => d.ParamFasetItem)
                    .WithMany(p => p.CalcAlgorithmParamFasetItems)
                    .HasForeignKey(d => d.ParamFasetItemId)
                    .HasConstraintName("FK_CalcAlgorithms_FasetItems2");

                entity.HasOne(d => d.TypeFasetNavigation)
                    .WithMany(p => p.CalcAlgorithmTypeFasetNavigations)
                    .HasForeignKey(d => d.TypeFaset);
            });

            modelBuilder.Entity<CalcAlgorithmBenefitNormFormula>(entity =>
            {
                entity.ToTable("CalcAlgorithmBenefitNormFormulas", "sn");

                entity.HasIndex(e => e.Name, "IXU_CalcAlgorithmBenefitNormFormulas")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NeedElectricNorm).HasColumnName("needElectricNorm");

                entity.Property(e => e.NeedGasNorm).HasColumnName("needGasNorm");

                entity.Property(e => e.NeedSquareNorm).HasColumnName("needSquareNorm");

                entity.Property(e => e.NeedWaterNorm).HasColumnName("needWaterNorm");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CalcAlgorithmChargeFormula>(entity =>
            {
                entity.ToTable("CalcAlgorithmChargeFormulas", "sn");

                entity.HasIndex(e => e.Name, "IXU_CalcAlgorithmChargeFormulas__name")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula")
                    .HasDefaultValueSql("('')")
                    .HasComment("Формула. Явным образом указываются поля таблицы CalcServiceByDays и знаки математических действий необходимых для расчета суммы услуги");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Наименование расчета. (Например, Расчет по коммунальным услугам (cо счетчиками и без))");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeCoefficientCalc")
                    .HasComment("Особый коэффициент алгоритма (специфическое что угодно), составляющее ресурса. ");

                entity.Property(e => e.NoticeConsumption)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeConsumption")
                    .HasComment("Расход по прибору учета, составляющее ресурса");

                entity.Property(e => e.NoticeInfoCalcFasetId)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeInfoExistCounter)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoExistCounter")
                    .HasComment("noticeInfoExistCounter - равен 1, если к услуге привязан счетчик (как правило определяется по counterId is not null в sn.CalcServicesByDays), информационное поле. ");

                entity.Property(e => e.NoticeInfoGroupRate)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoGroupRate");

                entity.Property(e => e.NoticeInfoHouseNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoHouseNormRate")
                    .HasComment("Норматив указанный на доме, информационное поле. ");

                entity.Property(e => e.NoticeInfoHouseRate)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoHouseRate")
                    .HasComment("Тариф указанный на доме, информационное поле");

                entity.Property(e => e.NoticeInfoNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoNormRate")
                    .HasComment("норматив на услуге, информационное поле, заполняется не зависимо от того, участвует норматив в расчете или нет (в случае со счетчиками также заполняется), (очевидно, что не заполняется, если соответствующее поле не заполнено в sn.CalcServicesByDays). ");

                entity.Property(e => e.NoticeIsFill).HasColumnName("noticeIsFill");

                entity.Property(e => e.NoticeNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeNormRate")
                    .HasComment("Норматив. Проставляется явным образом имя поля таблицы CalcServiceByDays из которого необходимо скопировать данные в таблицы Notice.* для формирования платежного документа");

                entity.Property(e => e.NoticeRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeRate")
                    .HasComment("Тариф. Проставляется явным образом имя поля таблицы CalcServiceByDays из которого необходимо скопировать данные в таблицы Notice.* для формирования платежного документа ");

                entity.Property(e => e.NoticeRateCapacity)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeRateCapacity");

                entity.Property(e => e.NoticeResidentsCount)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeResidentsCount")
                    .HasComment("Количество проживающих, составляющее ресурса. ");

                entity.Property(e => e.NoticeResource)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeResource")
                    .HasComment("Ресурс, является произведением noticeNormRate, noticeConsumption, noticeSquare, noticeResidentsCount, noticeCoefficientCalc");

                entity.Property(e => e.NoticeSquare)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeSquare")
                    .HasComment("Площадь помещения, составляющее ресурса");

                entity.Property(e => e.ParamFasetId).HasColumnName("paramFasetId");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName")
                    .HasDefaultValueSql("('')")
                    .HasComment("Имя хранимой процедуры осуществляющей расчет стоимости услуги");

                entity.HasOne(d => d.ParamFaset)
                    .WithMany(p => p.CalcAlgorithmChargeFormulas)
                    .HasForeignKey(d => d.ParamFasetId)
                    .HasConstraintName("FK_CalcAlgorithmChargeFormulas_Fasets");
            });

            modelBuilder.Entity<CalcAlgorithmChargeFormulasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcAlgorithmChargeFormulasView", "sn");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeConsumption)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeConsumption");

                entity.Property(e => e.NoticeInfoExistCounter)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoExistCounter");

                entity.Property(e => e.NoticeInfoGroupRate)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoGroupRate");

                entity.Property(e => e.NoticeInfoHouseNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoHouseNormRate");

                entity.Property(e => e.NoticeInfoHouseRate)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoHouseRate");

                entity.Property(e => e.NoticeInfoNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeInfoNormRate");

                entity.Property(e => e.NoticeIsFill).HasColumnName("noticeIsFill");

                entity.Property(e => e.NoticeNormRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeNormRate");

                entity.Property(e => e.NoticeRate)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeRate");

                entity.Property(e => e.NoticeResidentsCount)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeResidentsCount");

                entity.Property(e => e.NoticeResource)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeResource");

                entity.Property(e => e.NoticeSquare)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeSquare");

                entity.Property(e => e.ParamFasetId).HasColumnName("paramFasetId");

                entity.Property(e => e.ParamFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paramFasetName");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");
            });

            modelBuilder.Entity<CalcAlgsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcAlgsView", "sn");

                entity.Property(e => e.BenefitNormFormulaFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormFormulaFormula");

                entity.Property(e => e.BenefitNormFormulaId).HasColumnName("benefitNormFormulaId");

                entity.Property(e => e.BenefitNormFormulaName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormFormulaName");

                entity.Property(e => e.CalcPriority).HasColumnName("calcPriority");

                entity.Property(e => e.ChargeFormulaFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("chargeFormulaFormula");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeFormulaName)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("chargeFormulaName");

                entity.Property(e => e.ChargeProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("chargeProcName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsRecalcWithUseResidentVacations).HasColumnName("isRecalcWithUseResidentVacations");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NeedBenefitCalc).HasColumnName("needBenefitCalc");

                entity.Property(e => e.ParamFasetItemId).HasColumnName("paramFasetItemId");

                entity.Property(e => e.ParamFasetItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paramFasetItemName");

                entity.Property(e => e.UseOwnershipShareInBenefits).HasColumnName("useOwnershipShareInBenefits");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseSuspensionFactor).HasColumnName("useSuspensionFactor");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");
            });

            modelBuilder.Entity<CalcError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcErrors", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcErrors_calcId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Obj)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("obj");

                entity.Property(e => e.ObjType)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("objType");
            });

            modelBuilder.Entity<CalcHouseCounter>(entity =>
            {
                entity.HasKey(e => new { e.CalcId, e.Period, e.HouseCounterId })
                    .HasName("PK__noticeCalcHouseCounters");

                entity.ToTable("CalcHouseCounters", "notice");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.AdditionallyVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("additionallyVolume");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.CountersVolumeF03)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("countersVolumeF03");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseNormRateOdn)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseNormRateOdn");

                entity.Property(e => e.HouseRecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseRecalcVolume");

                entity.Property(e => e.HouseShare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseShare");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.HouseSquareOi)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareOI");

                entity.Property(e => e.HouseTotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseTotalSquareApartments");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Indication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indication");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IndicationDatePrev)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDatePrev");

                entity.Property(e => e.IndicationPrev)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indicationPrev");

                entity.Property(e => e.IsNotInternal)
                    .IsRequired()
                    .HasColumnName("isNotInternal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.ResourcesVolumeF03)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourcesVolumeF03");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalResidentsCount");
            });

            modelBuilder.Entity<CalcHouseCounter1>(entity =>
            {
                entity.ToTable("CalcHouseCounters", "sn");

                entity.HasIndex(e => new { e.CalcId, e.AlgorithmId }, "IX_CalcHouseCounters__calcId_algorithmId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.FactorForPersonalCounters)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("factorForPersonalCounters");

                entity.Property(e => e.FactorForSixFormula)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("factorForSixFormula");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("periodEnd");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("datetime")
                    .HasColumnName("periodStart");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");
            });

            modelBuilder.Entity<CalcHouseCounter2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounters", "vmc");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.FactorForPersonalCounters)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("factorForPersonalCounters");

                entity.Property(e => e.FactorForSixFormula)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("factorForSixFormula");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("periodEnd");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("datetime")
                    .HasColumnName("periodStart");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcHouseCounter3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounters", "vmca");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.FactorForPersonalCounters)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("factorForPersonalCounters");

                entity.Property(e => e.FactorForSixFormula)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("factorForSixFormula");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("periodEnd");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("datetime")
                    .HasColumnName("periodStart");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcHouseCounterAccountService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServices", "cp");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period, e.HouseCounterId }, "IX_calcId_cpCalcHouseCounterAccountServices")
                    .IsClustered();

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BigDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigDeltaForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseHeatCounterSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterSquare");

                entity.Property(e => e.HouseHeatCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterVolume");

                entity.Property(e => e.HouseHeatSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatSquare");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.Infoprintdelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoprintdelta");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSocial)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSocial");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalApartmentVolume");
            });

            modelBuilder.Entity<CalcHouseCounterAccountService1>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__CalcHouseCounterAccountServices")
                    .IsClustered(false);

                entity.ToTable("CalcHouseCounterAccountServices", "notice");

                entity.HasIndex(e => new { e.CalcId, e.Period, e.AccountServiceId, e.HouseCounterId }, "IX__noticeCalcHouseCounterAccountServices__period_accountServiceId_houseCounterId")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BigDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigDeltaForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.DeltaFromLastPeriod)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("deltaFromLastPeriod");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseHeatCounterSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterSquare");

                entity.Property(e => e.HouseHeatCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterVolume");

                entity.Property(e => e.HouseHeatSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatSquare");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.Infoprintdelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoprintdelta");

                entity.Property(e => e.IsHouseValInfo).HasColumnName("isHouseValInfo");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSocial)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSocial");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalApartmentVolume");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceCounter>(entity =>
            {
                entity.ToTable("CalcHouseCounterAccountServiceCounters", "sn");

                entity.HasIndex(e => new { e.CalcHouseCounterServiceId, e.AccountServiceId }, "IX_CalcHouseCounterAccoutServiceCounters__CalcHouseCounterServiceId_accountServiceId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => new { e.CalcHouseCounterServiceId, e.HouseCounterAccountServiceId }, "IX_CalcHouseCounterAccoutServiceCounters__CalcHouseCounterServiceId_houseCounterAccountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceCounterId).HasColumnName("accountServiceCounterId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolume");

                entity.Property(e => e.CounterVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolumeDifferenceFromCP");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.IsNonResidential)
                    .HasColumnName("isNonResidential")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NormBigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normBigRate");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquare");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceCounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceCounters", "vmc");

                entity.Property(e => e.AccountServiceCounterId).HasColumnName("accountServiceCounterId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolume");

                entity.Property(e => e.CounterVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolumeDifferenceFromCP");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNonResidential).HasColumnName("isNonResidential");

                entity.Property(e => e.NormBigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normBigRate");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquare");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceCounter2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceCounters", "vmca");

                entity.Property(e => e.AccountServiceCounterId).HasColumnName("accountServiceCounterId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolume");

                entity.Property(e => e.CounterVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterVolumeDifferenceFromCP");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNonResidential).HasColumnName("isNonResidential");

                entity.Property(e => e.NormBigRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normBigRate");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquare");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNonResidential>(entity =>
            {
                entity.ToTable("CalcHouseCounterAccountServiceNonResidentials", "sn");

                entity.HasIndex(e => e.NonResidentialApartmentId, "IX_CalcHouseCounterAccoutServiceNonResidentials__CalcHouseCounterServiceId");

                entity.HasIndex(e => e.CalcHouseCounterServiceId, "IX_CalcHouseCounterAccoutServiceNonResidentials__CalcHouseCounterServiceIdVolume");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.NonResidentialApartmentId).HasColumnName("nonResidentialApartmentId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNonResidential1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceNonResidentials", "vmc");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NonResidentialApartmentId).HasColumnName("nonResidentialApartmentId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNonResidential2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceNonResidentials", "vmca");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NonResidentialApartmentId).HasColumnName("nonResidentialApartmentId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNormativ>(entity =>
            {
                entity.ToTable("CalcHouseCounterAccountServiceNormativs", "sn");

                entity.HasIndex(e => new { e.CalcHouseCounterServiceId, e.HouseCounterAccountServiceId }, "IX_CalcHouseCounterAccoutServiceNormativs__CalcHouseCounterServiceId_houseCounterAccountServiceId");

                entity.HasIndex(e => new { e.CalcHouseCounterServiceId, e.AccountServiceId }, "IX_CalcHouseCounterAccoutServiceNormativs__calcHouseCounterServiceId_accountServiceId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("charge");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("deltaCharge");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.IsNonResidential)
                    .HasColumnName("isNonResidential")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.NormativVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolume");

                entity.Property(e => e.NormativVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolumeDifferenceFromCP");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNormativ1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceNormativs", "vmc");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("charge");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("deltaCharge");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNonResidential).HasColumnName("isNonResidential");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.NormativVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolume");

                entity.Property(e => e.NormativVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolumeDifferenceFromCP");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");
            });

            modelBuilder.Entity<CalcHouseCounterAccountServiceNormativ2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterAccountServiceNormativs", "vmca");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentAccountServiceId).HasColumnName("apartmentAccountServiceId");

                entity.Property(e => e.ApartmentSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcOdn)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcOdn");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("charge");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("deltaCharge");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HouseCounterAccountServiceId).HasColumnName("houseCounterAccountServiceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNonResidential).HasColumnName("isNonResidential");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("normODN");

                entity.Property(e => e.NormativVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolume");

                entity.Property(e => e.NormativVolumeDifferenceFromCp)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativVolumeDifferenceFromCP");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentCount");

                entity.Property(e => e.SquareChanges).HasColumnName("squareChanges");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentCount");
            });

            modelBuilder.Entity<CalcHouseCounterService>(entity =>
            {
                entity.ToTable("CalcHouseCounterServices", "sn");

                entity.HasIndex(e => new { e.CalcId, e.AlgorithmId }, "IX_CalcHouseCounterServices__calcId_algorithmId");

                entity.HasIndex(e => new { e.CalcId, e.AlgorithmId, e.HouseCounterServiceId, e.RangeStart }, "IX_CalcHouseCounterServices__calcId_algorithmId_houseCounterServiceId_rangeStart");

                entity.HasIndex(e => new { e.CalcId, e.AlgorithmId, e.ServiceId, e.RangeStart }, "IX_CalcHouseCounterServices__calcId_algorithmId_serviceId_rangeStart")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcSquare");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.CounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterCharge");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionGiga)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumptionGiga");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseCounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseCounterCharge");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterServiceId).HasColumnName("houseCounterServiceId");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.IsNorm).HasColumnName("isNorm");

                entity.Property(e => e.IsNotInternal).HasColumnName("isNotInternal");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NonResidentialsVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("nonResidentialsVolume");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normOdn");

                entity.Property(e => e.NormRateOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdn");

                entity.Property(e => e.NormRateOdnSum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdnSum");

                entity.Property(e => e.NormativCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativCharge");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourceVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("resourceVolume");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareOi)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareOI");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquareApartments");

                entity.Property(e => e.VolumeType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("volumeType");
            });

            modelBuilder.Entity<CalcHouseCounterService1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterServices", "vmc");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcSquare");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.CounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterCharge");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionGiga)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumptionGiga");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseCounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseCounterCharge");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterServiceId).HasColumnName("houseCounterServiceId");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNorm).HasColumnName("isNorm");

                entity.Property(e => e.IsNotInternal).HasColumnName("isNotInternal");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NonResidentialsVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("nonResidentialsVolume");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normOdn");

                entity.Property(e => e.NormRateOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdn");

                entity.Property(e => e.NormRateOdnSum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdnSum");

                entity.Property(e => e.NormativCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativCharge");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourceVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("resourceVolume");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareOi)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareOI");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquareApartments");

                entity.Property(e => e.VolumeType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("volumeType");
            });

            modelBuilder.Entity<CalcHouseCounterService2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterServices", "vmca");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("calcSquare");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.CounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterCharge");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionGiga)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("counterConsumptionGiga");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseCounterCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseCounterCharge");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterServiceId).HasColumnName("houseCounterServiceId");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsNorm).HasColumnName("isNorm");

                entity.Property(e => e.IsNotInternal).HasColumnName("isNotInternal");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NonResidentialsVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("nonResidentialsVolume");

                entity.Property(e => e.NormOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normOdn");

                entity.Property(e => e.NormRateOdn)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdn");

                entity.Property(e => e.NormRateOdnSum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateOdnSum");

                entity.Property(e => e.NormativCharge)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("normativCharge");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("recalcVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourceVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("resourceVolume");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("share");

                entity.Property(e => e.SquareOi)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareOI");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("totalSquareApartments");

                entity.Property(e => e.VolumeType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("volumeType");
            });

            modelBuilder.Entity<CalcHouseCounterServicesByDay>(entity =>
            {
                entity.ToTable("CalcHouseCounterServicesByDays", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX_CalcHouseCounterServicesByDays__accountServiceId");

                entity.HasIndex(e => e.ChcId, "IX_CalcHouseCounterServicesByDays__chcId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.ProcName)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");
            });

            modelBuilder.Entity<CalcHouseCounterServicesByDay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterServicesByDays", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");
            });

            modelBuilder.Entity<CalcHouseCounterServicesByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterServicesByDays", "vmca");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");
            });

            modelBuilder.Entity<CalcHouseCounterSubCounter>(entity =>
            {
                entity.ToTable("CalcHouseCounterSubCounters", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.RelationTypeId).HasColumnName("relationTypeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcHouseCounterSubCounter1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterSubCounters", "vmc");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.RelationTypeId).HasColumnName("relationTypeId");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcHouseCounterSubCounter2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCounterSubCounters", "vmca");

                entity.Property(e => e.CalcHouseCounterServiceId).HasColumnName("calcHouseCounterServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.RelationTypeId).HasColumnName("relationTypeId");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcHouseCountersByDay>(entity =>
            {
                entity.ToTable("CalcHouseCountersByDays", "sn");

                entity.HasIndex(e => e.ChcId, "IX_CalcHouseCountersByDays__chcId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseHeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("houseHeatingSquare");

                entity.Property(e => e.HouseResidentVacationsCount).HasColumnName("houseResidentVacationsCount");

                entity.Property(e => e.HouseResidentsCount).HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseTotalResidentsCount).HasColumnName("houseTotalResidentsCount");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.HasOne(d => d.Chc)
                    .WithMany(p => p.CalcHouseCountersByDays)
                    .HasForeignKey(d => d.ChcId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcHouseCountersByDays_CalcHouseCounters");
            });

            modelBuilder.Entity<CalcHouseCountersByDay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCountersByDays", "vmc");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseHeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("houseHeatingSquare");

                entity.Property(e => e.HouseResidentVacationsCount).HasColumnName("houseResidentVacationsCount");

                entity.Property(e => e.HouseResidentsCount).HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseTotalResidentsCount).HasColumnName("houseTotalResidentsCount");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcHouseCountersByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcHouseCountersByDays", "vmca");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseHeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("houseHeatingSquare");

                entity.Property(e => e.HouseResidentVacationsCount).HasColumnName("houseResidentVacationsCount");

                entity.Property(e => e.HouseResidentsCount).HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseTotalResidentsCount).HasColumnName("houseTotalResidentsCount");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsExistsApartmentCounter).HasColumnName("isExistsApartmentCounter");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcHouseCountersByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcHouseCountersByDaysView", "sn");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseHeatingSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("houseHeatingSquare");

                entity.Property(e => e.HouseResidentVacationsCount).HasColumnName("houseResidentVacationsCount");

                entity.Property(e => e.HouseResidentsCount).HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseTotalResidentsCount).HasColumnName("houseTotalResidentsCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("personalCountersVolume");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");
            });

            modelBuilder.Entity<CalcHouseCountersServiceByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcHouseCountersServiceByDaysView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ChcId).HasColumnName("chcId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("delta");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ServiceAccountId).HasColumnName("serviceAccountId");
            });

            modelBuilder.Entity<CalcHouseCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcHouseCountersView", "sn");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcTime)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("calcTime");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseCounterVolume");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormativeVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("normativeVolume");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("periodEnd");

                entity.Property(e => e.PeriodStart)
                    .HasColumnType("datetime")
                    .HasColumnName("periodStart");

                entity.Property(e => e.PersonalCountersVolume)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("personalCountersVolume");
            });

            modelBuilder.Entity<CalcMessage>(entity =>
            {
                entity.ToTable("CalcMessages", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcMessage1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calcMessage");
            });

            modelBuilder.Entity<CalcNode>(entity =>
            {
                entity.ToTable("CalcNodes", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcStatusId).HasColumnName("calcStatusId");

                entity.Property(e => e.ChargeStatusId).HasColumnName("chargeStatusId");

                entity.Property(e => e.CurrentCalcId).HasColumnName("currentCalcId");

                entity.Property(e => e.DateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEnd");

                entity.Property(e => e.DateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStart");

                entity.Property(e => e.FromDate)
                    .HasColumnType("date")
                    .HasColumnName("fromDate");

                entity.Property(e => e.NodeId).HasColumnName("nodeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("date")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.CalcStatus)
                    .WithMany(p => p.CalcNodes)
                    .HasForeignKey(d => d.CalcStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_vmcCalcNodes_calcStatusId");
            });

            modelBuilder.Entity<CalcNodeCurrentCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcNodeCurrentCharge", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<CalcNodeMessage>(entity =>
            {
                entity.ToTable("CalcNodeMessages", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NodeMessage)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("nodeMessage");

                entity.Property(e => e.ProcessType).HasColumnName("processType");

                entity.HasOne(d => d.CalcNode)
                    .WithMany(p => p.CalcNodeMessages)
                    .HasForeignKey(d => d.CalcNodeId)
                    .HasConstraintName("FK_vmcCalcNodeMessages_calcNodeId");
            });

            modelBuilder.Entity<CalcNodeParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcNodeParameters", "vmc");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("paramName");

                entity.Property(e => e.Paramvalue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("paramvalue");
            });

            modelBuilder.Entity<CalcNodeStatus>(entity =>
            {
                entity.ToTable("CalcNodeStatus", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CalcNodesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcNodesView", "vmc");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcStatusId).HasColumnName("calcStatusId");

                entity.Property(e => e.ChargeStatusId).HasColumnName("chargeStatusId");

                entity.Property(e => e.CurrentCalcId).HasColumnName("currentCalcId");

                entity.Property(e => e.DateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEnd");

                entity.Property(e => e.DateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStart");

                entity.Property(e => e.DbName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("dbName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("date")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NodeId).HasColumnName("nodeId");

                entity.Property(e => e.NodeStatusId).HasColumnName("nodeStatusId");

                entity.Property(e => e.NodeStatusName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("nodeStatusName");

                entity.Property(e => e.SrvName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("srvName");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("date")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<CalcOperation>(entity =>
            {
                entity.ToTable("CalcOperations", "sn");

                entity.HasIndex(e => e.Name, "UX_CalcOperations_name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AllowEditingInAnyPeriod).HasColumnName("allowEditingInAnyPeriod");

                entity.Property(e => e.AllowEditingInCurrentPeriod).HasColumnName("allowEditingInCurrentPeriod");

                entity.Property(e => e.AllowManuallyAdding).HasColumnName("allowManuallyAdding");

                entity.Property(e => e.Ko)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ko");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OffBalanceBenefit).HasColumnName("offBalanceBenefit");

                entity.Property(e => e.Opsign).HasColumnName("opsign");

                entity.Property(e => e.Split)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("split")
                    .HasDefaultValueSql("('TARIFF')");
            });

            modelBuilder.Entity<CalcOperationGroup>(entity =>
            {
                entity.ToTable("CalcOperationGroups", "sn");

                entity.HasIndex(e => e.Name, "UX_CalcOperationGroups_name")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.IsInverted).HasColumnName("isInverted");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CalcOperationGroupContent>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.OperId });

                entity.ToTable("CalcOperationGroupContents", "sn");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.OperId).HasColumnName("operId");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CalcOperationGroupContents)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcOperationGroupContents_CalcOperationGroup");

                entity.HasOne(d => d.Oper)
                    .WithMany(p => p.CalcOperationGroupContents)
                    .HasForeignKey(d => d.OperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcOperationGroupContents_CalcOperations");
            });

            modelBuilder.Entity<CalcOperationGroupContentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcOperationGroupContentsView", "sn");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.IsInverted).HasColumnName("isInverted");

                entity.Property(e => e.OffBalanceBenefit).HasColumnName("offBalanceBenefit");

                entity.Property(e => e.OpSign).HasColumnName("opSign");

                entity.Property(e => e.OperId).HasColumnName("operId");

                entity.Property(e => e.OperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operName");
            });

            modelBuilder.Entity<CalcParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcParameters", "vmc");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("paramName");

                entity.Property(e => e.Paramvalue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("paramvalue");
            });

            modelBuilder.Entity<CalcPeriod>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("CalcPeriods", "sn");

                entity.HasIndex(e => e.FromDate, "IX_CalcPeriods__fromDate")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.ToDate, "IX_CalcPeriods__toDate")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Days)
                    .HasColumnName("days")
                    .HasComputedColumnSql("(datepart(day,dateadd(day,(-1),dateadd(month,(1),[fromDate]))))", true)
                    .HasComment("Кол-во дней в месяце (вычисляемое)");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasComment("Дата начала периода");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComputedColumnSql("(datepart(month,[fromDate]))", true)
                    .HasComment("Месяц (вычисляемое)");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate")
                    .HasComputedColumnSql("(dateadd(day,(-1),dateadd(month,(1),[fromDate])))", true)
                    .HasComment("Дата окончания периода (вычисляемое)");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComputedColumnSql("(datepart(year,[fromDate]))", true)
                    .HasComment("Год (вычисляемое)");
            });

            modelBuilder.Entity<CalcPeriodRestriction>(entity =>
            {
                entity.HasKey(e => new { e.CalcPeriodId, e.AddressId })
                    .HasName("PK__CalcPeriodRestrictions");

                entity.ToTable("CalcPeriodRestrictions", "sn");

                entity.HasIndex(e => e.AddressId, "IX_CalcPeriodRestrictions__fromDate_calcPeriodId")
                    .IsUnique();

                entity.Property(e => e.CalcPeriodId).HasColumnName("calcPeriodId");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.Address)
                    .WithOne(p => p.CalcPeriodRestriction)
                    .HasForeignKey<CalcPeriodRestriction>(d => d.AddressId)
                    .HasConstraintName("FK_CalcPeriodRestrictions_CalcPeriods_LocalAdresses");

                entity.HasOne(d => d.CalcPeriod)
                    .WithMany(p => p.CalcPeriodRestrictions)
                    .HasForeignKey(d => d.CalcPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CalcPeriodRestrictions_CalcPeriods");
            });

            modelBuilder.Entity<CalcPeriodRestrictionAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("PK__CalcPeriodRestrictionAccounts");

                entity.ToTable("CalcPeriodRestrictionAccounts", "sn");

                entity.HasIndex(e => new { e.AccountId, e.Period }, "UIX__CalcPeriodRestrictionAccounts_account_period")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .ValueGeneratedNever()
                    .HasColumnName("accountId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<CalcPeriodRestrictionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcPeriodRestrictionsView", "sn");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.CalcPeriodId).HasColumnName("calcPeriodId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<CalcPeriodsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcPeriodsView", "sn");

                entity.Property(e => e.Days).HasColumnName("days");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Month).HasColumnName("month");

                entity.Property(e => e.MonthName)
                    .HasMaxLength(30)
                    .HasColumnName("monthName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Year).HasColumnName("year");
            });

            modelBuilder.Entity<CalcReadyForSaveResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcReadyForSaveResult", "vmc");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CntNode).HasColumnName("cntNode");

                entity.Property(e => e.CntReady).HasColumnName("cntReady");
            });

            modelBuilder.Entity<CalcService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServices", "cp");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period }, "IX_calcId_cpCalcServices")
                    .IsClustered();

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CsbdSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("csbdSumm");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.TryCount).HasColumnName("tryCount");
            });

            modelBuilder.Entity<CalcService1>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Period, e.CalcId });

                entity.ToTable("CalcServices", "sn");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period }, "IUX_CalcServices__calcId_accSrvId_period")
                    .IsUnique();

                entity.HasIndex(e => new { e.CalcId, e.Period, e.RowNumber, e.Delta }, "IX_CalcServices__сalcId_period_rowNumber_delta");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.CalcId }, "IX_CalcServices_accountServiceId_period_calcId_id");

                entity.HasIndex(e => e.CalcId, "IX_CalcServices_calcId");

                entity.HasIndex(e => e.Id, "IX_CalcServices_id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CsbdSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("csbdSumm");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsMonetization)
                    .HasColumnName("isMonetization")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSave)
                    .IsRequired()
                    .HasColumnName("isSave")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");
            });

            modelBuilder.Entity<CalcService2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServices", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CsbdSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("csbdSumm");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcService3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServices", "vmca");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CsbdSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("csbdSumm");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcServiceBenefit>(entity =>
            {
                entity.ToTable("CalcServiceBenefits", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcServiceBenefits__calcId");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period }, "IX_CalcServiceBenefits__calcId_accountServiceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave)
                    .IsRequired()
                    .HasColumnName("isSave")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<CalcServiceBenefit1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefits", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcServiceBenefit2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefits", "vmca");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsMonetization).HasColumnName("isMonetization");

                entity.Property(e => e.IsSave).HasColumnName("isSave");

                entity.Property(e => e.MonetizationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("monetizationDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcServiceBenefitNormsForGa>(entity =>
            {
                entity.ToTable("CalcServiceBenefitNormsForGas", "sn");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period, e.RangeStart, e.BenefitOwnerId, e.ExploitingPersonId }, "IX_CalcServiceBenefitNormsForGas__all");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcServiceBenefitNormsForGa1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefitNormsForGas", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcServiceBenefitNormsForGa2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefitNormsForGas", "vmca");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ExceptTypeId).HasColumnName("exceptTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<CalcServiceBenefitsByDay>(entity =>
            {
                entity.ToTable("CalcServiceBenefitsByDays", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcServiceBenefitsByDays__calcId");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period, e.RangeStart, e.BenefitOwnerId }, "IX_CalcServiceBenefitsByDays__calcId_accountServiceId_period_rangeStart_benefitOwnerId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BenefitAggregationTypeid).HasColumnName("benefitAggregationTypeid");

                entity.Property(e => e.BenefitAreaCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitAreaCalcType");

                entity.Property(e => e.BenefitCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitCalcType");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitMaxNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitMaxNorm");

                entity.Property(e => e.BenefitNormUseTypeName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormUseTypeName");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CanExceedNorm).HasColumnName("canExceedNorm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Discount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discount");

                entity.Property(e => e.ElectricNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("electricNorm");

                entity.Property(e => e.ExceptApartmentTypeId).HasColumnName("exceptApartmentTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.GasNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("gasNorm");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseNorm).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.IsLimitBenefitNorm).HasColumnName("isLimitBenefitNorm");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedElectricNorm).HasColumnName("needElectricNorm");

                entity.Property(e => e.NeedGasNorm).HasColumnName("needGasNorm");

                entity.Property(e => e.NeedSquareNorm).HasColumnName("needSquareNorm");

                entity.Property(e => e.NeedWaterNorm).HasColumnName("needWaterNorm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateCounterForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounterForDay");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeSynonymId).HasColumnName("serviceTypeSynonymId");

                entity.Property(e => e.SquareAdd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareAdd");

                entity.Property(e => e.SquareNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseAllSquareSumm).HasColumnName("useAllSquareSumm");

                entity.Property(e => e.UseApartmentOwnerShare).HasColumnName("useApartmentOwnerShare");

                entity.Property(e => e.UseFamilySquare).HasColumnName("useFamilySquare");

                entity.Property(e => e.UsePersonSquare).HasColumnName("usePersonSquare");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");

                entity.Property(e => e.WaterNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("waterNorm");
            });

            modelBuilder.Entity<CalcServiceBenefitsByDay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefitsByDays", "vmc");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BenefitAggregationTypeid).HasColumnName("benefitAggregationTypeid");

                entity.Property(e => e.BenefitAreaCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitAreaCalcType");

                entity.Property(e => e.BenefitCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitCalcType");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitMaxNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitMaxNorm");

                entity.Property(e => e.BenefitNormUseTypeName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormUseTypeName");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CanExceedNorm).HasColumnName("canExceedNorm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Discount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discount");

                entity.Property(e => e.ElectricNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("electricNorm");

                entity.Property(e => e.ExceptApartmentTypeId).HasColumnName("exceptApartmentTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.GasNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("gasNorm");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseNorm).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsLimitBenefitNorm).HasColumnName("isLimitBenefitNorm");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedElectricNorm).HasColumnName("needElectricNorm");

                entity.Property(e => e.NeedGasNorm).HasColumnName("needGasNorm");

                entity.Property(e => e.NeedSquareNorm).HasColumnName("needSquareNorm");

                entity.Property(e => e.NeedWaterNorm).HasColumnName("needWaterNorm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateCounterForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounterForDay");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeSynonymId).HasColumnName("serviceTypeSynonymId");

                entity.Property(e => e.SquareAdd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareAdd");

                entity.Property(e => e.SquareNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseAllSquareSumm).HasColumnName("useAllSquareSumm");

                entity.Property(e => e.UseApartmentOwnerShare).HasColumnName("useApartmentOwnerShare");

                entity.Property(e => e.UseFamilySquare).HasColumnName("useFamilySquare");

                entity.Property(e => e.UsePersonSquare).HasColumnName("usePersonSquare");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");

                entity.Property(e => e.WaterNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("waterNorm");
            });

            modelBuilder.Entity<CalcServiceBenefitsByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceBenefitsByDays", "vmca");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BenefitAggregationTypeid).HasColumnName("benefitAggregationTypeid");

                entity.Property(e => e.BenefitAreaCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitAreaCalcType");

                entity.Property(e => e.BenefitCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitCalcType");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitMaxNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitMaxNorm");

                entity.Property(e => e.BenefitNormUseTypeName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("benefitNormUseTypeName");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CanExceedNorm).HasColumnName("canExceedNorm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Discount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discount");

                entity.Property(e => e.ElectricNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("electricNorm");

                entity.Property(e => e.ExceptApartmentTypeId).HasColumnName("exceptApartmentTypeId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.GasNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("gasNorm");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseNorm).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsLimitBenefitNorm).HasColumnName("isLimitBenefitNorm");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedElectricNorm).HasColumnName("needElectricNorm");

                entity.Property(e => e.NeedGasNorm).HasColumnName("needGasNorm");

                entity.Property(e => e.NeedSquareNorm).HasColumnName("needSquareNorm");

                entity.Property(e => e.NeedWaterNorm).HasColumnName("needWaterNorm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateCounterForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounterForDay");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeSynonymId).HasColumnName("serviceTypeSynonymId");

                entity.Property(e => e.SquareAdd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareAdd");

                entity.Property(e => e.SquareNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseAllSquareSumm).HasColumnName("useAllSquareSumm");

                entity.Property(e => e.UseApartmentOwnerShare).HasColumnName("useApartmentOwnerShare");

                entity.Property(e => e.UseFamilySquare).HasColumnName("useFamilySquare");

                entity.Property(e => e.UsePersonSquare).HasColumnName("usePersonSquare");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");

                entity.Property(e => e.WaterNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("waterNorm");
            });

            modelBuilder.Entity<CalcServiceBenefitsByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServiceBenefitsByDaysView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BenefitAreaCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitAreaCalcType");

                entity.Property(e => e.BenefitCalcType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitCalcType");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitShortName");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcAlgBenefitNormFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgBenefitNormFormula");

                entity.Property(e => e.CalcAlgBenefitNormFormulaName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgBenefitNormFormulaName");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Discount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discount");

                entity.Property(e => e.ElectricNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("electricNorm");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.ExploitingPersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("exploitingPersonName");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.GasNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("gasNorm");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedElectricNorm).HasColumnName("needElectricNorm");

                entity.Property(e => e.NeedGasNorm).HasColumnName("needGasNorm");

                entity.Property(e => e.NeedSquareNorm).HasColumnName("needSquareNorm");

                entity.Property(e => e.NeedWaterNorm).HasColumnName("needWaterNorm");

                entity.Property(e => e.NormSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeSynonymId).HasColumnName("serviceTypeSynonymId");

                entity.Property(e => e.SquareNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("squareNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseResidentBenefitShare).HasColumnName("useResidentBenefitShare");

                entity.Property(e => e.UseVacationsInBenefits).HasColumnName("useVacationsInBenefits");

                entity.Property(e => e.WaterNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("waterNorm");
            });

            modelBuilder.Entity<CalcServiceCountersByDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceCountersByDays", "cp");

                entity.HasIndex(e => new { e.CalcId, e.CsbdId, e.CounterId }, "IX_calcId_cpCalcServiceCountersByDays")
                    .IsClustered();

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<CalcServiceCountersByDay1>(entity =>
            {
                entity.HasKey(e => new { e.CalcId, e.CsbdId, e.CounterId, e.Id })
                    .HasName("PK_CalcServicesCountersByDays");

                entity.ToTable("CalcServiceCountersByDays", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcServiceCountersByDays__calcId_csbdId_rate");

                entity.HasIndex(e => e.CalcId, "IX_CalcServicesCountersByDays_calcId");

                entity.HasIndex(e => new { e.CalcId, e.CounterId }, "IX_CalcServicesCountersByDays_calcId_counterId");

                entity.HasIndex(e => new { e.CalcId, e.CsbdId }, "IX_CalcServicesCountersByDays_calcId_csbdId");

                entity.HasIndex(e => e.CsbdId, "IX_CalcServicesCountersByDays_csdbId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.LastIndicationTypeNavigation)
                    .WithMany(p => p.CalcServiceCountersByDay1s)
                    .HasForeignKey(d => d.LastIndicationType)
                    .HasConstraintName("FK_CalcServiceCountersByDays_FasetItems");
            });

            modelBuilder.Entity<CalcServiceCountersByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceCountersByDays", "vmc");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<CalcServiceCountersByDay3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceCountersByDays", "vmca");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<CalcServiceCountersByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServiceCountersByDaysView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodChargeSumm)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("periodChargeSumm");

                entity.Property(e => e.PeriodCounterConsumption)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("periodCounterConsumption");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServiceTypeSubQuality>(entity =>
            {
                entity.ToTable("CalcServiceTypeSubQuality", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcServiceTypeSubQuality__calcId");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period }, "IX_CalcServiceTypeSubQuality__calcId_accountServiceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalculatedPercentByPeriod)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedPercentByPeriod");

                entity.Property(e => e.DayInPeriod)
                    .HasColumnName("dayInPeriod")
                    .HasDefaultValueSql("((30))");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.InterruptedSupplyHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("interruptedSupplyHoursCount");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.SquareFactorByPeriod)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("squareFactorByPeriod");
            });

            modelBuilder.Entity<CalcServiceTypeSubQuality1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceTypeSubQuality", "vmc");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalculatedPercentByPeriod)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedPercentByPeriod");

                entity.Property(e => e.DayInPeriod).HasColumnName("dayInPeriod");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InterruptedSupplyHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("interruptedSupplyHoursCount");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.SquareFactorByPeriod)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("squareFactorByPeriod");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcServiceTypeSubQuality2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceTypeSubQuality", "vmca");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalculatedPercentByPeriod)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedPercentByPeriod");

                entity.Property(e => e.DayInPeriod).HasColumnName("dayInPeriod");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InterruptedSupplyHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("interruptedSupplyHoursCount");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.SquareFactorByPeriod)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("squareFactorByPeriod");

                entity.Property(e => e.TId).HasColumnName("tId");
            });

            modelBuilder.Entity<CalcServiceTypeSubQualityByDay>(entity =>
            {
                entity.ToTable("CalcServiceTypeSubQualityByDays", "sn");

                entity.HasIndex(e => e.CalcServiceTypeSubQualityId, "IX_CalcServiceTypeSubQualityByDays__calcServiceTypeSubQualityId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcServiceTypeSubQualityId).HasColumnName("calcServiceTypeSubQualityId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.CalculatedDayRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedDayRangePercent");

                entity.Property(e => e.CalculatedNightRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedNightRangePercent");

                entity.Property(e => e.CalculatedRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedRangePercent");

                entity.Property(e => e.ConsumptionRangePercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumptionRangePercent");

                entity.Property(e => e.DaySubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("daySubQualityHoursCount");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.HoursAtOnce)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.HoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("hoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.HoursTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotalYear");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsPressureEquivalence).HasColumnName("isPressureEquivalence");

                entity.Property(e => e.IsPressurePropertiesEquivalence).HasColumnName("isPressurePropertiesEquivalence");

                entity.Property(e => e.IsTemperatureEquivalence).HasColumnName("isTemperatureEquivalence");

                entity.Property(e => e.IsUninterruptedSupply).HasColumnName("isUninterruptedSupply");

                entity.Property(e => e.IsVoltageAndFrequencyEquivalence).HasColumnName("isVoltageAndFrequencyEquivalence");

                entity.Property(e => e.IsWaterEquivalenceToSanitaryStandard).HasColumnName("isWaterEquivalenceToSanitaryStandard");

                entity.Property(e => e.NightSubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightSubQualityHoursCount");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecordIsProcessed).HasColumnName("recordIsProcessed");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeNameAlias)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeNameAlias");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServiceTypeSubQualityByDay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceTypeSubQualityByDays", "vmc");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcServiceTypeSubQualityId).HasColumnName("calcServiceTypeSubQualityId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.CalculatedDayRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedDayRangePercent");

                entity.Property(e => e.CalculatedNightRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedNightRangePercent");

                entity.Property(e => e.CalculatedRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedRangePercent");

                entity.Property(e => e.ConsumptionRangePercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumptionRangePercent");

                entity.Property(e => e.DaySubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("daySubQualityHoursCount");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.HoursAtOnce)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.HoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("hoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.HoursTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotalYear");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsPressureEquivalence).HasColumnName("isPressureEquivalence");

                entity.Property(e => e.IsPressurePropertiesEquivalence).HasColumnName("isPressurePropertiesEquivalence");

                entity.Property(e => e.IsTemperatureEquivalence).HasColumnName("isTemperatureEquivalence");

                entity.Property(e => e.IsUninterruptedSupply).HasColumnName("isUninterruptedSupply");

                entity.Property(e => e.IsVoltageAndFrequencyEquivalence).HasColumnName("isVoltageAndFrequencyEquivalence");

                entity.Property(e => e.IsWaterEquivalenceToSanitaryStandard).HasColumnName("isWaterEquivalenceToSanitaryStandard");

                entity.Property(e => e.NightSubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightSubQualityHoursCount");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecordIsProcessed).HasColumnName("recordIsProcessed");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeNameAlias)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeNameAlias");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServiceTypeSubQualityByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServiceTypeSubQualityByDays", "vmca");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.CalcServiceTypeSubQualityId).HasColumnName("calcServiceTypeSubQualityId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.CalculatedDayRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedDayRangePercent");

                entity.Property(e => e.CalculatedNightRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedNightRangePercent");

                entity.Property(e => e.CalculatedRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedRangePercent");

                entity.Property(e => e.ConsumptionRangePercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumptionRangePercent");

                entity.Property(e => e.DaySubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("daySubQualityHoursCount");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.HoursAtOnce)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.HoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("hoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.HoursTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotalYear");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsPressureEquivalence).HasColumnName("isPressureEquivalence");

                entity.Property(e => e.IsPressurePropertiesEquivalence).HasColumnName("isPressurePropertiesEquivalence");

                entity.Property(e => e.IsTemperatureEquivalence).HasColumnName("isTemperatureEquivalence");

                entity.Property(e => e.IsUninterruptedSupply).HasColumnName("isUninterruptedSupply");

                entity.Property(e => e.IsVoltageAndFrequencyEquivalence).HasColumnName("isVoltageAndFrequencyEquivalence");

                entity.Property(e => e.IsWaterEquivalenceToSanitaryStandard).HasColumnName("isWaterEquivalenceToSanitaryStandard");

                entity.Property(e => e.NightSubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightSubQualityHoursCount");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecordIsProcessed).HasColumnName("recordIsProcessed");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeNameAlias)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeNameAlias");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServiceTypeSubQualityByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServiceTypeSubQualityByDaysView", "sn");

                entity.Property(e => e.CalcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcName");

                entity.Property(e => e.CalcServiceTypeSubQualityId).HasColumnName("calcServiceTypeSubQualityId");

                entity.Property(e => e.CalcTypeId).HasColumnName("calcTypeId");

                entity.Property(e => e.CalculatedDayRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedDayRangePercent");

                entity.Property(e => e.CalculatedNightRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedNightRangePercent");

                entity.Property(e => e.CalculatedRangePercent)
                    .HasColumnType("decimal(8, 5)")
                    .HasColumnName("calculatedRangePercent");

                entity.Property(e => e.ConsumptionRangePercent)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumptionRangePercent");

                entity.Property(e => e.DaySubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("daySubQualityHoursCount");

                entity.Property(e => e.DayTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("dayTemperature");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.ExceptAcceptableDuration).HasColumnName("exceptAcceptableDuration");

                entity.Property(e => e.HoursAtOnce)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.HoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("hoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.HoursTotal)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("hoursTotalYear");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsPressureEquivalence).HasColumnName("isPressureEquivalence");

                entity.Property(e => e.IsPressurePropertiesEquivalence).HasColumnName("isPressurePropertiesEquivalence");

                entity.Property(e => e.IsTemperatureEquivalence).HasColumnName("isTemperatureEquivalence");

                entity.Property(e => e.IsUninterruptedSupply).HasColumnName("isUninterruptedSupply");

                entity.Property(e => e.IsVoltageAndFrequencyEquivalence).HasColumnName("isVoltageAndFrequencyEquivalence");

                entity.Property(e => e.IsWaterEquivalenceToSanitaryStandard).HasColumnName("isWaterEquivalenceToSanitaryStandard");

                entity.Property(e => e.NightSubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightSubQualityHoursCount");

                entity.Property(e => e.NightTemperature)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("nightTemperature");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionCorrection)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionCorrection");

                entity.Property(e => e.PressureDeviation)
                    .HasColumnType("decimal(10, 4)")
                    .HasColumnName("pressureDeviation");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RecordIsProcessed).HasColumnName("recordIsProcessed");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeNameAlias)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeNameAlias");

                entity.Property(e => e.SquareRooms)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("squareRooms");

                entity.Property(e => e.StsqadId).HasColumnName("stsqadId");

                entity.Property(e => e.StsqpId).HasColumnName("stsqpId");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServicesByDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServicesByDays", "cp");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period, e.IsCalc }, "IX_calcId_cpCalcServicesByDays")
                    .IsClustered();

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CoefficientByDays).HasColumnName("coefficientByDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<CalcServicesByDay1>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Period, e.CalcId, e.RangeStart, e.Id });

                entity.ToTable("CalcServicesByDays", "sn");

                entity.HasIndex(e => e.CalcId, "IX_CalcServicesByDays__calcId");

                entity.HasIndex(e => new { e.CalcId, e.AccountServiceId, e.Period }, "IX_CalcServicesByDays__calcId_accountServiceId_period");

                entity.HasIndex(e => new { e.CalcId, e.AlgorithmId }, "IX_CalcServicesByDays__calcId_algorithmId");

                entity.HasIndex(e => new { e.CalcId, e.ApartmentId, e.RangeStart }, "IX_CalcServicesByDays__calcId_apartmentId_rangeStart");

                entity.HasIndex(e => new { e.CalcId, e.HouseId, e.ServiceId }, "IX_CalcServicesByDays__calcId_houseId__serviceId");

                entity.HasIndex(e => e.Id, "IX_CalcServicesByDays_id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CoefficientByDays)
                    .HasColumnName("coefficientByDays")
                    .HasComputedColumnSql("(CONVERT([float],[daysInRange],(0))/[daysInPeriod])", false);

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters)
                    .IsRequired()
                    .HasColumnName("noticeSaveFromCounters")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<CalcServicesByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServicesByDays", "vmc");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<CalcServicesByDay3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServicesByDays", "vmca");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<CalcServicesByDaysView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServicesByDaysView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.AlgorithmParamName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("algorithmParamName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty).HasColumnName("apartmentProperty");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.CalcAlgChargeFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgChargeFormula");

                entity.Property(e => e.CalcAlgChargeFormulaName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgChargeFormulaName");

                entity.Property(e => e.CalcAlgsName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgsName");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodChargeSumm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("periodChargeSumm");

                entity.Property(e => e.PeriodCounterConsumption)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("periodCounterConsumption");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServicesByDaysViewForLk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServicesByDaysView_ForLk", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.AlgorithmParamName)
                    .IsUnicode(false)
                    .HasColumnName("algorithmParamName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty).HasColumnName("apartmentProperty");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.CalcAlgChargeFormula)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgChargeFormula");

                entity.Property(e => e.CalcAlgChargeFormulaName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgChargeFormulaName");

                entity.Property(e => e.CalcAlgsName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgsName");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("periodChargeSumm");

                entity.Property(e => e.PeriodCounterConsumption)
                    .HasColumnType("decimal(38, 10)")
                    .HasColumnName("periodCounterConsumption");

                entity.Property(e => e.ProcName)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.ToDate).HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CalcServicesHousekeepingsByDay>(entity =>
            {
                entity.ToTable("CalcServicesHousekeepingsByDays", "sn");

                entity.HasIndex(e => new { e.CalcId, e.ApartmentId, e.RangeStart, e.TypeId }, "IX_CalcServicesHousekeepingsByDays__calcId_apartmentId_rangeStart_type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("square");

                entity.Property(e => e.TypeId).HasColumnName("typeId");
            });

            modelBuilder.Entity<CalcServicesHousekeepingsByDay1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServicesHousekeepingsByDays", "vmc");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("square");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");
            });

            modelBuilder.Entity<CalcServicesHousekeepingsByDay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CalcServicesHousekeepingsByDays", "vmca");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("square");

                entity.Property(e => e.TId).HasColumnName("tId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");
            });

            modelBuilder.Entity<CalcServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcServicesView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldBenefitSumm");

                entity.Property(e => e.OldChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldChargeSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");
            });

            modelBuilder.Entity<CalcStatus>(entity =>
            {
                entity.ToTable("CalcStatus", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CalcsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CalcsView", "vmc");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcStatus).HasColumnName("calcStatus");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dateEnd");

                entity.Property(e => e.DateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStart");

                entity.Property(e => e.FromDate)
                    .HasColumnType("date")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("statusName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("date")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<CanonicalService>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.CanonicalId })
                    .HasName("PK_rep_CanonicalServices");

                entity.ToTable("CanonicalServices", "rep");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<CanonicalService1>(entity =>
            {
                entity.ToTable("CanonicalServices", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.LongName)
                    .HasMaxLength(7000)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.P1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P11)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P12)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P13)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P14)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.SrvTypeId).HasColumnName("srvTypeId");

                entity.HasOne(d => d.SrvType)
                    .WithMany(p => p.CanonicalService1s)
                    .HasForeignKey(d => d.SrvTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CanonicalServices_ServiceTypes");
            });

            modelBuilder.Entity<CanonicalServicePropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CanonicalServicePropertiesView", "sn");

                entity.Property(e => e.CanonicalServiceId).HasColumnName("canonicalServiceId");

                entity.Property(e => e.CanonicalServiceName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("canonicalServiceName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.SrvTypeId).HasColumnName("srvTypeId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<CanonicalServiceProperty>(entity =>
            {
                entity.ToTable("CanonicalServiceProperties", "sn");

                entity.HasIndex(e => new { e.CanonicalServiceId, e.TypeId }, "UX_CanonicalServiceProperties__canonicalServiceId_typeId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CanonicalServiceId).HasColumnName("canonicalServiceId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.CanonicalService)
                    .WithMany(p => p.CanonicalServiceProperties)
                    .HasForeignKey(d => d.CanonicalServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CanonicalServiceProperties_CanonicalServices");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.CanonicalServiceProperties)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_CanonicalServiceProperties_FasetItems");
            });

            modelBuilder.Entity<CanonicalServiceSetting>(entity =>
            {
                entity.ToTable("CanonicalServiceSettings", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.HasOne(d => d.Faset)
                    .WithMany(p => p.CanonicalServiceSettings)
                    .HasForeignKey(d => d.FasetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CanonicalServiceSettings_Fasets");
            });

            modelBuilder.Entity<CanonicalServiceSettingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CanonicalServiceSettingsView", "sn");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FassetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fassetName");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<CanonicalServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CanonicalServicesView", "sn");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LongName)
                    .HasMaxLength(7000)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.P1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P10)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P11)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P12)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P13)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P14)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P4)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P5)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P6)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P7)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P8)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.P9)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.SrvTypeId).HasColumnName("srvTypeId");
            });

            modelBuilder.Entity<ClassifireOfDepartment>(entity =>
            {
                entity.ToTable("ClassifireOfDepartments", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parentId");
            });

            modelBuilder.Entity<ColumnsTempTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ColumnsTempTable", "util");

                entity.Property(e => e.ResAsVarchar)
                    .HasMaxLength(156)
                    .HasColumnName("resAsVarchar");

                entity.Property(e => e.ResCol)
                    .HasMaxLength(128)
                    .HasColumnName("resCol");

                entity.Property(e => e.ResType)
                    .HasMaxLength(309)
                    .HasColumnName("resType");

                entity.Property(e => e.TableName)
                    .HasMaxLength(128)
                    .HasColumnName("tableName");

                entity.Property(e => e.TableName1)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("table_name");

                entity.Property(e => e.TableObjectId).HasColumnName("table_object_id");

                entity.Property(e => e.TableType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("table_type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");
            });

            modelBuilder.Entity<CompareCalc>(entity =>
            {
                entity.HasKey(e => e.CompareNum)
                    .HasName("PK__repCompareCalcs");

                entity.ToTable("CompareCalcs", "rep");

                entity.Property(e => e.CompareNum)
                    .ValueGeneratedNever()
                    .HasColumnName("compareNum");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<CompareCalcJn>(entity =>
            {
                entity.HasKey(e => new { e.CompareNum, e.AccountServiceId, e.Id })
                    .HasName("PK_repCompareCalc_Jn");

                entity.ToTable("CompareCalc_Jn", "rep");

                entity.Property(e => e.CompareNum).HasColumnName("compareNum");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<CompareCalcJnCalcCounterParam>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.CounterId, e.RangeStart })
                    .HasName("PK_repCompareCalc_JnCalcCounterParams");

                entity.ToTable("CompareCalc_JnCalcCounterParams", "rep");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionDelta");

                entity.Property(e => e.ConsumptionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionFactor");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<CompareCalcJnCalcHouseCounterParam>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_JnCalcHouseCounterAccountServiceParams")
                    .IsClustered(false);

                entity.ToTable("CompareCalc_JnCalcHouseCounterParams", "rep");

                entity.HasIndex(e => new { e.JnId, e.HouseCounterId }, "IX_repCompareCalc_JnCalcHouseCounterParams_jnId")
                    .IsClustered();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");
            });

            modelBuilder.Entity<CompareCalcJnCalcParam>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.RangeStart })
                    .HasName("DF_repCompareCalc_JnCalcParams_useNormRate");

                entity.ToTable("CompareCalc_JnCalcParams", "rep");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceAltGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneralDelta");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneralDelta");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<CompareCalcNoticeAccountService>(entity =>
            {
                entity.HasKey(e => new { e.CompareNum, e.Period, e.AccountServiceId })
                    .HasName("PK__repCompareCalc_noticeAccountServices");

                entity.ToTable("CompareCalc_noticeAccountServices", "rep");

                entity.HasIndex(e => e.AccountServiceId, "IX_repCompareCalc_noticeAccountServices_accountServiceId");

                entity.Property(e => e.CompareNum).HasColumnName("compareNum");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientCalcForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalcForDay");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CoefficientUse)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientUse");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("consumption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoCalcFasetId).HasColumnName("infoCalcFasetId");

                entity.Property(e => e.InfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue");

                entity.Property(e => e.InfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue2");

                entity.Property(e => e.InfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoCalcValue3");

                entity.Property(e => e.InfoExistCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoExistCounter");

                entity.Property(e => e.InfoGroupRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoGroupRate");

                entity.Property(e => e.InfoHouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseNormRate");

                entity.Property(e => e.InfoHouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoHouseRate");

                entity.Property(e => e.InfoNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRate");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subRate");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<CompareCalcNoticeHouseCounterAccountService>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__repCompareCalc_noticeHouseCounterAccountServices")
                    .IsClustered(false);

                entity.ToTable("CompareCalc_noticeHouseCounterAccountServices", "rep");

                entity.HasIndex(e => new { e.CompareNum, e.Period, e.AccountServiceId, e.HouseCounterId }, "IX__repCompareCalc_noticeHouseCounterAccountServices__period_accountServiceId_houseCounterId")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.BidDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bidDeltaForDay");

                entity.Property(e => e.BigDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigDeltaForDay");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CompareNum).HasColumnName("compareNum");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.Infoprintdelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoprintdelta");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSocial)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSocial");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<Constant>(entity =>
            {
                entity.ToTable("Constants", "sn");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Comment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название константы");

                entity.Property(e => e.Value)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("value")
                    .HasComment("Значение константы");
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Counters", "ascupe");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CountScale).HasColumnName("countScale");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateVerification)
                    .HasColumnType("datetime")
                    .HasColumnName("dateVerification");

                entity.Property(e => e.EnergyResource)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("energyResource");

                entity.Property(e => e.ForcedIgnore).HasColumnName("forcedIgnore");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Koefficient)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("koefficient");

                entity.Property(e => e.LastLoadActive).HasColumnName("lastLoadActive");

                entity.Property(e => e.LastVal)
                    .HasColumnType("decimal(14, 4)")
                    .HasColumnName("lastVal");

                entity.Property(e => e.LastValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastValDate");

                entity.Property(e => e.Loadid).HasColumnName("loadid");

                entity.Property(e => e.Model)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("model");

                entity.Property(e => e.Number)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Objectcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("objectcode");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("prefix");

                entity.Property(e => e.ResourceCounterGroup).HasColumnName("resourceCounterGroup");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.SlavedNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("slavedNumber");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.LastLoadActiveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.LastLoadActive)
                    .HasConstraintName("FK_ascupeCounters_Lastload");

                entity.HasOne(d => d.Load)
                    .WithMany()
                    .HasForeignKey(d => d.Loadid)
                    .HasConstraintName("FK_ascupeCounters_load");
            });

            modelBuilder.Entity<CounterIndicationsFile>(entity =>
            {
                entity.ToTable("CounterIndicationsFiles", "sn");

                entity.HasIndex(e => e.CounterIndicationId, "IX_CounterIndicationsFiles__counterIndicationId_inc_streamFilesId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterIndicationId).HasColumnName("counterIndicationId");

                entity.Property(e => e.StreamFilesId).HasColumnName("streamFilesId");

                entity.Property(e => e.TypeCounter).HasColumnName("typeCounter");

                entity.HasOne(d => d.StreamFiles)
                    .WithMany(p => p.CounterIndicationsFiles)
                    .HasForeignKey(d => d.StreamFilesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterIndicationsFiles_StreamFiles");

                entity.HasOne(d => d.TypeCounterNavigation)
                    .WithMany(p => p.CounterIndicationsFiles)
                    .HasForeignKey(d => d.TypeCounter)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterIndicationsFiles_TypeCounter");
            });

            modelBuilder.Entity<CounterIndicationsSid>(entity =>
            {
                entity.ToTable("CounterIndicationsSid", "ext");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterValue)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("counterValue");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataIndications)
                    .HasColumnType("datetime")
                    .HasColumnName("dataIndications");

                entity.Property(e => e.Error).HasColumnName("error");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.IsPayment).HasColumnName("isPayment");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.SidId).HasColumnName("sidId");

                entity.Property(e => e.SummRecalc)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summRecalc");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<CounterIndicationsSidView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CounterIndicationsSidView", "ext");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DataIndications)
                    .HasColumnType("datetime")
                    .HasColumnName("dataIndications");

                entity.Property(e => e.Error).HasColumnName("error");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPayment).HasColumnName("isPayment");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.SidId).HasColumnName("sidId");

                entity.Property(e => e.SummRecalc)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summRecalc");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<CounterMark>(entity =>
            {
                entity.ToTable("CounterMarks", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClMark)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_mark");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ObjMark)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_mark");

                entity.Property(e => e.Rzrd).HasColumnName("rzrd");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UnitId).HasColumnName("unitId");
            });

            modelBuilder.Entity<CounterMarksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CounterMarksView", "sn");

                entity.Property(e => e.ClMark)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_mark");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ObjMark)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_mark");

                entity.Property(e => e.Rzrd).HasColumnName("rzrd");

                entity.Property(e => e.TypeCounter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounter");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<CounterModel>(entity =>
            {
                entity.ToTable("CounterModels", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.Mark)
                    .WithMany(p => p.CounterModels)
                    .HasForeignKey(d => d.MarkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CounterModels_CounterMarks_Id");
            });

            modelBuilder.Entity<CounterModelsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CounterModelsView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountersView", "ascupe");

                entity.Property(e => e.AddrObjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("addrObjectCode");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CountScale).HasColumnName("countScale");

                entity.Property(e => e.DateVerification)
                    .HasColumnType("datetime")
                    .HasColumnName("dateVerification");

                entity.Property(e => e.EnergyResource)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("energyResource");

                entity.Property(e => e.EnergyResourceName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("energyResourceName");

                entity.Property(e => e.Flat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsHouseCounter).HasColumnName("isHouseCounter");

                entity.Property(e => e.Koefficient)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("koefficient");

                entity.Property(e => e.LastLoadActiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastLoadActiveDate");

                entity.Property(e => e.LastLoadActiveFile)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("lastLoadActiveFile");

                entity.Property(e => e.LastVal)
                    .HasColumnType("decimal(14, 4)")
                    .HasColumnName("lastVal");

                entity.Property(e => e.LastValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastValDate");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("loadDate");

                entity.Property(e => e.Model)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("model");

                entity.Property(e => e.Number)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("prefix");

                entity.Property(e => e.ResourceCounterGroup).HasColumnName("resourceCounterGroup");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.SlavedNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("slavedNumber");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<CrmrequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CRMRequestsView", "mpa");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(646)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Attachments).HasColumnName("attachments");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CompletedWork)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("completedWork");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CrmJsonAccount).HasColumnName("crmJsonAccount");

                entity.Property(e => e.CrmJsonApplicantComment).HasColumnName("crmJsonApplicantComment");

                entity.Property(e => e.CrmJsonApplicantEmail).HasColumnName("crmJsonApplicantEmail");

                entity.Property(e => e.CrmJsonApplicantName).HasColumnName("crmJsonApplicantName");

                entity.Property(e => e.CrmJsonApplicantNote).HasColumnName("crmJsonApplicantNote");

                entity.Property(e => e.CrmJsonApplicantPhoneNumber).HasColumnName("crmJsonApplicantPhoneNumber");

                entity.Property(e => e.CrmJsonOperatorComment).HasColumnName("crmJsonOperatorComment");

                entity.Property(e => e.CrmJsonRequestId).HasColumnName("crmJsonRequestId");

                entity.Property(e => e.CrmJsonRequestType).HasColumnName("crmJsonRequestType");

                entity.Property(e => e.CrmJsonText).HasColumnName("crmJsonText");

                entity.Property(e => e.CrmJsonTicketReasonName).HasColumnName("crmJsonTicketReasonName");

                entity.Property(e => e.FasetItemStatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemStatusName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.ReplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("replyDate");

                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");

                entity.Property(e => e.RequestTypesName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.TerritorialSubdivisionOrganizationCode).HasColumnName("territorialSubdivisionOrganizationCode");

                entity.Property(e => e.TerritorialSubdivisionOrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("territorialSubdivisionOrganizationName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.XmlIn).HasColumnName("xmlIn");
            });

            modelBuilder.Entity<CustomReporParam>(entity =>
            {
                entity.ToTable("CustomReporParams", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ColumnsConditions)
                    .IsUnicode(false)
                    .HasColumnName("columnsConditions");

                entity.Property(e => e.ColumnsConditionsXml)
                    .IsUnicode(false)
                    .HasColumnName("columnsConditionsXML");

                entity.Property(e => e.GroupColumns)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("groupColumns");

                entity.Property(e => e.GroupColumnsXml)
                    .IsUnicode(false)
                    .HasColumnName("groupColumnsXML");

                entity.Property(e => e.GroupTables)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("groupTables");

                entity.Property(e => e.InvisibleColsIds)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("invisibleColsIds");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.SelectedColumns)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("selectedColumns");

                entity.Property(e => e.SelectedColumnsXml)
                    .IsUnicode(false)
                    .HasColumnName("selectedColumnsXML");

                entity.Property(e => e.SelectedTables)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("selectedTables");

                entity.Property(e => e.SortedColumns)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("sortedColumns");

                entity.Property(e => e.SortedColumnsXml)
                    .IsUnicode(false)
                    .HasColumnName("sortedColumnsXML");
            });

            modelBuilder.Entity<CustomReportColumnsTable>(entity =>
            {
                entity.ToTable("CustomReportColumnsTables", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("columnName");

                entity.Property(e => e.DataType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dataType");

                entity.Property(e => e.DataTypeId).HasColumnName("dataTypeId");

                entity.Property(e => e.InterfaceName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("interfaceName");

                entity.Property(e => e.NameForDbf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameForDBF");

                entity.Property(e => e.NameParentColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nameParentColumn");

                entity.Property(e => e.TableAliase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tableAliase");

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.TableInterfaceName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tableInterfaceName");
            });

            modelBuilder.Entity<CustomReportColumnsTablesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomReportColumnsTablesView", "rep");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("columnName");

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("dataType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InterfaceName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("interfaceName");

                entity.Property(e => e.NameForDbf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameForDBF");

                entity.Property(e => e.NameParentColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nameParentColumn");

                entity.Property(e => e.TableAliase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tableAliase");

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.TableInterfaceName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("tableInterfaceName");
            });

            modelBuilder.Entity<CustomReportHierarchyTable>(entity =>
            {
                entity.ToTable("CustomReportHierarchyTables", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Aliase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("aliase");

                entity.Property(e => e.AlterProcName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("alterProcName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.FillProcName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("fillProcName");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.TableName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tableName");
            });

            modelBuilder.Entity<DebtAccount>(entity =>
            {
                entity.ToTable("DebtAccounts", "sn");

                entity.HasIndex(e => new { e.AccountId, e.ApartmentOwnerId }, "IX_DebtAccount__accountId_apartmentOwnerId");

                entity.HasIndex(e => e.AccountId, "IX_DeebtAccounts__accountId");

                entity.HasIndex(e => e.DebtDocumentId, "IX_DeebtAccounts__debtDocumentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DateAnomaly)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAnomaly")
                    .HasComment("Дата создания аномалии(причины).");

                entity.Property(e => e.DebtAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAccountNumber")
                    .HasComment("Уникальный номер ЛС должника из ИБ-источника");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate")
                    .HasComment("Дата начала задолженности");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate")
                    .HasComment("Дата окончания задолженности");

                entity.Property(e => e.Gosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlina");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.Peny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("peny");

                entity.Property(e => e.RepresentationExpenses)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("representationExpenses")
                    .HasComment("Сумма дополнительных расходов");

                entity.Property(e => e.ScanDocId).HasColumnName("scanDocId");

                entity.Property(e => e.TypeIdAnomaly)
                    .HasColumnName("typeIdAnomaly")
                    .HasComment("Id аномалии(причины) исключения должника из привязанного списка.");

                entity.Property(e => e.TypeStatusByNotice)
                    .HasColumnName("typeStatusByNotice")
                    .HasComment("Статус счета должника относительно сформированного документа.");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasComment("Id пользователя выполнившего изменения.");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DebtAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccounts_Accounts");

                entity.HasOne(d => d.DebtDocument)
                    .WithMany(p => p.DebtAccounts)
                    .HasForeignKey(d => d.DebtDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccounts_DebtDocuments");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.DebtAccounts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_DebtAccounts_Users");
            });

            modelBuilder.Entity<DebtAccountAttachCharge>(entity =>
            {
                entity.HasKey(e => new { e.DebtActionId, e.JnId });

                entity.ToTable("DebtAccountAttachCharges", "sn");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.DebtAccountAttachCharges)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_DebtAccountAttachCharges_DebtActions");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.DebtAccountAttachCharges)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountAttachCharges_Jn");
            });

            modelBuilder.Entity<DebtAccountAttachChargesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountAttachChargesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.GroupOperationId).HasColumnName("groupOperationId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.JnSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("jnSumm");
            });

            modelBuilder.Entity<DebtAccountAttachPayment>(entity =>
            {
                entity.HasKey(e => new { e.DebtActionId, e.JnId });

                entity.ToTable("DebtAccountAttachPayments", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_DebtAccountAttachPayments_groupOperId");

                entity.HasIndex(e => e.JnId, "IX_DebtAccountAttachPayments_jnId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.AttachPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("attachPeriod");

                entity.Property(e => e.AttachSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("attachSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtAffairOwnerId).HasColumnName("debtAffairOwnerId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsGosposhlina).HasColumnName("isGosposhlina");

                entity.HasOne(d => d.DebtAccount)
                    .WithMany(p => p.DebtAccountAttachPayments)
                    .HasForeignKey(d => d.DebtAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountAttachPayments_DebtAccounts");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.DebtAccountAttachPayments)
                    .HasForeignKey(d => d.DebtActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountAttachPayments_DebtActions");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.DebtAccountAttachPayments)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountAttachPayments_GroupOperations");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.DebtAccountAttachPayments)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountAttachPayments_Jn");
            });

            modelBuilder.Entity<DebtAccountAttachPaymentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountAttachPaymentsView", "sn");

                entity.Property(e => e.AttachPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("attachPeriod");

                entity.Property(e => e.AttachSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("attachSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairOwnerId).HasColumnName("debtAffairOwnerId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<DebtAccountInform>(entity =>
            {
                entity.ToTable("DebtAccountInforms", "sn");

                entity.HasIndex(e => e.AccountId, "IX_DebtAccountInforms__accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CallResult).HasColumnName("callResult");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ContactFio)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("contactFIO");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateB)
                    .HasColumnType("datetime")
                    .HasColumnName("dateB");

                entity.Property(e => e.DateE)
                    .HasColumnType("datetime")
                    .HasColumnName("dateE");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.NameEmployee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nameEmployee");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.DebtAccountInforms)
                    .HasForeignKey(d => d.HouseHolderId);

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.DebtAccountInformStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_DebtAccountInforms_Status");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.DebtAccountInformTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountInforms_Type");
            });

            modelBuilder.Entity<DebtAccountInformsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountInformsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.CallResultId).HasColumnName("callResultId");

                entity.Property(e => e.CallResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("callResultName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ContactFio)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("contactFIO");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateB)
                    .HasColumnType("datetime")
                    .HasColumnName("dateB");

                entity.Property(e => e.DateE)
                    .HasColumnType("datetime")
                    .HasColumnName("dateE");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameEmployee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nameEmployee");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<DebtAccountService>(entity =>
            {
                entity.ToTable("DebtAccountServices", "sn");

                entity.HasIndex(e => e.AccountServiceId, "IX_DebtAccountServices_accountServiceId");

                entity.HasIndex(e => new { e.DebtAccountId, e.AccountServiceId }, "IX_DebtAccountServices_debtAccountId_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtAccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAccountNumber")
                    .HasComment("Уникальный номер ЛС должника из ИБ-источника");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.Peny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("peny");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.DebtAccountServices)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountServices_AccountServices");

                entity.HasOne(d => d.DebtAccount)
                    .WithMany(p => p.DebtAccountServices)
                    .HasForeignKey(d => d.DebtAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountServices_DebtAccounts");
            });

            modelBuilder.Entity<DebtAccountServicesByPeriod>(entity =>
            {
                entity.ToTable("DebtAccountServicesByPeriod", "sn");

                entity.HasIndex(e => new { e.DebtAccountServiceId, e.Period }, "IX_debtAccountServiceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountServiceId).HasColumnName("debtAccountServiceId");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.DebtAccountService)
                    .WithMany(p => p.DebtAccountServicesByPeriods)
                    .HasForeignKey(d => d.DebtAccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtAccountServicesByPeriod_DebtAccountServices");
            });

            modelBuilder.Entity<DebtAccountServicesByPeriodView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountServicesByPeriodView", "sn");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceHolderCode).HasColumnName("accountServiceHolderCode");

                entity.Property(e => e.AccountServiceHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountServiceHolderName");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtAccountServiceId).HasColumnName("debtAccountServiceId");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<DebtAccountServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountServicesView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceGroupCode).HasColumnName("accountServiceGroupCode");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.Peny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("peny");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");
            });

            modelBuilder.Entity<DebtAccountStatus>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("DebtAccountStatuses", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<DebtAccountStatusContent>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("DebtAccountStatusContents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountStatusId).HasColumnName("debtAccountStatusId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");
            });

            modelBuilder.Entity<DebtAccountStatusContentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountStatusContentsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAccountStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAccountStatus");

                entity.Property(e => e.DebtAccountStatusId).HasColumnName("debtAccountStatusId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<DebtAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AnomalyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("anomalyName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.ApartmentOwnerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("apartmentOwnerName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DateAnomaly)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAnomaly");

                entity.Property(e => e.DateLastChange).HasColumnName("dateLastChange");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate");

                entity.Property(e => e.Gosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlina");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.NoticeCreated).HasColumnName("noticeCreated");

                entity.Property(e => e.PaidSumm).HasColumnName("paidSumm");

                entity.Property(e => e.Peny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("peny");

                entity.Property(e => e.RepresentationExpenses)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("representationExpenses");

                entity.Property(e => e.ScanDocId).HasColumnName("scanDocId");

                entity.Property(e => e.StatusActionName).HasColumnName("statusActionName");

                entity.Property(e => e.StatusByNoticeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusByNoticeName");

                entity.Property(e => e.StatusNotices).HasColumnName("statusNotices");

                entity.Property(e => e.StatusTypeName).HasColumnName("statusTypeName");

                entity.Property(e => e.SummAction).HasColumnName("summAction");

                entity.Property(e => e.TypeIdAnomaly).HasColumnName("typeIdAnomaly");

                entity.Property(e => e.TypeOwnerId).HasColumnName("typeOwnerId");

                entity.Property(e => e.TypeStatusByNotice).HasColumnName("typeStatusByNotice");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName).HasColumnName("userName");

                entity.Property(e => e.WithHistory).HasColumnName("withHistory");
            });

            modelBuilder.Entity<DebtAccountsViewSummPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAccountsView_SummPayment", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AnomalyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("anomalyName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.ApartmentOwnerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("apartmentOwnerName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DateAnomaly)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAnomaly");

                entity.Property(e => e.DateLastChange).HasColumnName("dateLastChange");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate");

                entity.Property(e => e.DebtRank).HasColumnName("debtRank");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate");

                entity.Property(e => e.Gosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlina");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.NoticeCreated).HasColumnName("noticeCreated");

                entity.Property(e => e.PaidSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("paidSumm");

                entity.Property(e => e.Peny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("peny");

                entity.Property(e => e.RepresentationExpenses)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("representationExpenses");

                entity.Property(e => e.ScanDocId).HasColumnName("scanDocId");

                entity.Property(e => e.StatusActionName).HasColumnName("statusActionName");

                entity.Property(e => e.StatusByNoticeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusByNoticeName");

                entity.Property(e => e.StatusNotices).HasColumnName("statusNotices");

                entity.Property(e => e.StatusTypeName).HasColumnName("statusTypeName");

                entity.Property(e => e.SummAction).HasColumnName("summAction");

                entity.Property(e => e.TypeIdAnomaly).HasColumnName("typeIdAnomaly");

                entity.Property(e => e.TypeOwnerId).HasColumnName("typeOwnerId");

                entity.Property(e => e.TypeStatusByNotice).HasColumnName("typeStatusByNotice");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName).HasColumnName("userName");

                entity.Property(e => e.WithHistory).HasColumnName("withHistory");
            });

            modelBuilder.Entity<DebtAction>(entity =>
            {
                entity.ToTable("DebtActions", "sn");

                entity.HasIndex(e => e.CourtProcessNumber, "IX_DebtActions_courtProcessNumber");

                entity.HasIndex(e => e.DebtAccountId, "IX_DebtActions_debtAccountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChangedUserId)
                    .HasColumnName("changedUserId")
                    .HasComment("Пользователь, который внёс последние изменения");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedUserId)
                    .HasColumnName("createdUserId")
                    .HasComment("Пользователь, который создал процесс");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange")
                    .HasComment("Последняя дата изменения процесса");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtActionNumber)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("debtActionNumber")
                    .HasComment("Номер процесса в системе из которой идет загрузка процессов");

                entity.Property(e => e.DebtAffairId).HasColumnName("debtAffairId");

                entity.Property(e => e.DebtAffairNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAffairNumber")
                    .HasComment("Уникальный номер дела должника из ИБ-источника");

                entity.Property(e => e.ExecProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("execProcessNumber");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.NameAction)
                    .IsUnicode(false)
                    .HasColumnName("nameAction");

                entity.Property(e => e.StageId).HasColumnName("stageId");

                entity.Property(e => e.StatusChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("statusChangeDate");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypePir).HasColumnName("typePIR");

                entity.Property(e => e.TypeStageResult).HasColumnName("typeStageResult");

                entity.HasOne(d => d.DebtAccount)
                    .WithMany(p => p.DebtActions)
                    .HasForeignKey(d => d.DebtAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActions_DebtAccounts");

                entity.HasOne(d => d.DebtAffair)
                    .WithMany(p => p.DebtActions)
                    .HasForeignKey(d => d.DebtAffairId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActions_DebtAffairs");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.DebtActionStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActions_DebtActions");

                entity.HasOne(d => d.TypePirNavigation)
                    .WithMany(p => p.DebtActionTypePirNavigations)
                    .HasForeignKey(d => d.TypePir)
                    .HasConstraintName("FK_DebtActions_TypePIR");
            });

            modelBuilder.Entity<DebtActionCourtContent>(entity =>
            {
                entity.ToTable("DebtActionCourtContents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionCourtStageId).HasColumnName("debtActionCourtStageId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.HasOne(d => d.DebtActionCourtStage)
                    .WithMany(p => p.DebtActionCourtContents)
                    .HasForeignKey(d => d.DebtActionCourtStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActionCourtStages");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.DebtActionCourtContents)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FasetItems");
            });

            modelBuilder.Entity<DebtActionCourtContentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtActionCourtContentsView", "sn");

                entity.Property(e => e.DebtActionCourtStageId).HasColumnName("debtActionCourtStageId");

                entity.Property(e => e.DebtActionCourtStageName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("debtActionCourtStageName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<DebtActionCourtStage>(entity =>
            {
                entity.ToTable("DebtActionCourtStages", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<DebtActionEvent>(entity =>
            {
                entity.ToTable("DebtActionEvents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeEvent).HasColumnName("typeEvent");

                entity.Property(e => e.TypeResult).HasColumnName("typeResult");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.DebtActionEvents)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_DebtActionEvents_DebtActions");

                entity.HasOne(d => d.TypeEventNavigation)
                    .WithMany(p => p.DebtActionEventTypeEventNavigations)
                    .HasForeignKey(d => d.TypeEvent)
                    .HasConstraintName("FK_DebtActionEvents_FasetItems");

                entity.HasOne(d => d.TypeResultNavigation)
                    .WithMany(p => p.DebtActionEventTypeResultNavigations)
                    .HasForeignKey(d => d.TypeResult)
                    .HasConstraintName("FK_DebtActionEvents_FasetItemsTypeResult");
            });

            modelBuilder.Entity<DebtActionNotice>(entity =>
            {
                entity.ToTable("DebtActionNotices", "sn");

                entity.HasIndex(e => e.TypeId, "IX_DebtActionNotice_typeId");

                entity.HasIndex(e => new { e.DebtActionId, e.TypeId, e.FromDate }, "IX_DebtActionNotices_typeId_debtActionId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualFilingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("actualFilingDate")
                    .HasComment("Дата фактической подачи заявления о вынесении судебного приказа/искового заявления в суд");

                entity.Property(e => e.AimedAtCollection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("aimedAtCollection");

                entity.Property(e => e.AmicableAgreement)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amountPaid");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.AppealMeetingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("appealMeetingDate");

                entity.Property(e => e.CasePending).HasColumnName("casePending");

                entity.Property(e => e.Cause).HasColumnName("cause");

                entity.Property(e => e.Court).HasColumnName("court");

                entity.Property(e => e.CourtNameDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("courtNameDistrict");

                entity.Property(e => e.CourtNumberAffair)
                    .HasMaxLength(50)
                    .HasColumnName("courtNumberAffair");

                entity.Property(e => e.CourtNumberDecisions)
                    .HasMaxLength(50)
                    .HasColumnName("courtNumberDecisions");

                entity.Property(e => e.Creared)
                    .HasColumnType("datetime")
                    .HasColumnName("creared")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateAbsentia)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAbsentia");

                entity.Property(e => e.DateApplicationPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateApplicationPerformSheet");

                entity.Property(e => e.DateCancelOfDecision)
                    .HasColumnType("datetime")
                    .HasColumnName("dateCancelOfDecision");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.DateDecision)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision");

                entity.Property(e => e.DateDecisionFi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_FI");

                entity.Property(e => e.DateDecisionSi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_SI");

                entity.Property(e => e.DateDecisionTi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_TI");

                entity.Property(e => e.DateMeetingFi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateMeetingFI");

                entity.Property(e => e.DateMeetingPrPr)
                    .HasColumnType("datetime")
                    .HasColumnName("dateMeetingPrPr");

                entity.Property(e => e.DateOfActualReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfActualReceipt");

                entity.Property(e => e.DateOfApplicationOnReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfApplicationOnReceipt");

                entity.Property(e => e.DateOfCassationMeeting)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfCassationMeeting");

                entity.Property(e => e.DateOfExecutiveDocument)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfExecutiveDocument");

                entity.Property(e => e.DateOfIssueDefinition)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfIssueDefinition");

                entity.Property(e => e.DateOfPaymentOfStateDuty)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfPaymentOfStateDuty");

                entity.Property(e => e.DateOfReturnOfTheCourtOrder)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfReturnOfTheCourtOrder");

                entity.Property(e => e.DateOfSendingForCollection)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfSendingForCollection");

                entity.Property(e => e.DatePayment)
                    .HasColumnType("datetime")
                    .HasColumnName("datePayment");

                entity.Property(e => e.DatePerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("datePerformSheet");

                entity.Property(e => e.DatePfexecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("datePFExecProc");

                entity.Property(e => e.DateProcessInstance).HasColumnType("datetime");

                entity.Property(e => e.DateProcessInstanceSi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateProcessInstance_SI");

                entity.Property(e => e.DateProcessInstanceTi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateProcessInstance_TI");

                entity.Property(e => e.DateReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateReceipt");

                entity.Property(e => e.DateReceivingPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateReceivingPerformSheet");

                entity.Property(e => e.DateResubmissionApplication)
                    .HasColumnType("datetime")
                    .HasColumnName("dateResubmissionApplication")
                    .HasComment("Дата повторной подачи иска/заявления после возврата/оставления без рассмотрения");

                entity.Property(e => e.DateResultConsideration)
                    .HasColumnType("datetime")
                    .HasColumnName("dateResultConsideration");

                entity.Property(e => e.DateResultConsiderationSi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("dateResultConsideration_SI");

                entity.Property(e => e.DateResultConsiderationTi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("dateResultConsideration_TI");

                entity.Property(e => e.DateSend)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSend");

                entity.Property(e => e.DateStartExecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStartExecProc");

                entity.Property(e => e.DateTransferPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateTransferPerformSheet");

                entity.Property(e => e.DateUfsspexecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateUFSSPExecProc");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtActionNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtActionNumber");

                entity.Property(e => e.DebtListNoticeId).HasColumnName("debtListNoticeId");

                entity.Property(e => e.DocStopExecProc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("docStopExecProc");

                entity.Property(e => e.ExecProcBankName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("execProcBankName");

                entity.Property(e => e.ExecProcDateReturnPfr)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcDateReturnPFR");

                entity.Property(e => e.ExecProcDateStopOutRf)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcDateStopOutRF");

                entity.Property(e => e.ExecProcIddate)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDate");

                entity.Property(e => e.ExecProcIddateReturn)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDateReturn");

                entity.Property(e => e.ExecProcIddateSsp)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDateSSP");

                entity.Property(e => e.ExecProcIdperiod)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("execProcIDPeriod");

                entity.Property(e => e.ExecProcInfo)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("execProcInfo");

                entity.Property(e => e.ExecProcNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("execProcNumber");

                entity.Property(e => e.ExecProcStatus).HasColumnName("execProcStatus");

                entity.Property(e => e.ExecutionTime).HasColumnName("executionTime");

                entity.Property(e => e.ExplanationOfReasonForRejection).HasColumnName("explanationOfReasonForRejection");

                entity.Property(e => e.F10NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f10_nudSumIsk");

                entity.Property(e => e.F11NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f11_nudDebtSumm");

                entity.Property(e => e.F12NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f12_nudDebtPeni");

                entity.Property(e => e.F13NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f13_nudGosposhlina");

                entity.Property(e => e.F14NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f14_nudGosposhlina");

                entity.Property(e => e.F17NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f17_nudGosposhlina");

                entity.Property(e => e.F25DpDateDebtPeriodFd)
                    .HasColumnType("datetime")
                    .HasColumnName("f25_dpDateDebtPeriod_fd");

                entity.Property(e => e.F25DpDateDebtPeriodTd)
                    .HasColumnType("datetime")
                    .HasColumnName("f25_dpDateDebtPeriod_td");

                entity.Property(e => e.F26NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f26_nudSumIsk");

                entity.Property(e => e.F27NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f27_nudSumIsk");

                entity.Property(e => e.F28NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f28_nudDebtSumm");

                entity.Property(e => e.F29NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f29_nudDebtPeni");

                entity.Property(e => e.F30NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f30_nudGosposhlina");

                entity.Property(e => e.F33NudRecoveredAmountSummPrPr)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f33_nudRecoveredAmountSummPrPr");

                entity.Property(e => e.F41NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f41_nudSumIsk");

                entity.Property(e => e.F42NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f42_nudDebtSumm");

                entity.Property(e => e.F43NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f43_nudDebtPeni");

                entity.Property(e => e.F44NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f44_nudGosposhlina");

                entity.Property(e => e.F45NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f45_nudSumIsk");

                entity.Property(e => e.F46NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f46_nudDebtSumm");

                entity.Property(e => e.F47NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f47_nudDebtPeni");

                entity.Property(e => e.F48NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f48_nudGosposhlina");

                entity.Property(e => e.F60NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f60_nudSumIsk");

                entity.Property(e => e.F61NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f61_nudDebtSumm");

                entity.Property(e => e.F62NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f62_nudDebtPeni");

                entity.Property(e => e.F63NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f63_nudGosposhlina");

                entity.Property(e => e.F64NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f64_nudSumIsk");

                entity.Property(e => e.F65NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f65_nudDebtSumm");

                entity.Property(e => e.F66NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f66_nudDebtPeni");

                entity.Property(e => e.F67NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f67_nudGosposhlina");

                entity.Property(e => e.F75NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f75_nudSumIsk");

                entity.Property(e => e.F76NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f76_nudDebtSumm");

                entity.Property(e => e.F77NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f77_nudDebtPeni");

                entity.Property(e => e.F78NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f78_nudGosposhlina");

                entity.Property(e => e.F79NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f79_nudSumIsk");

                entity.Property(e => e.F80NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f80_nudDebtSumm");

                entity.Property(e => e.F81NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f81_nudDebtPeni");

                entity.Property(e => e.F82NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f82_nudGosposhlina");

                entity.Property(e => e.F9DpDateDebtPeriodFd)
                    .HasColumnType("datetime")
                    .HasColumnName("f9_dpDateDebtPeriod_fd");

                entity.Property(e => e.F9DpDateDebtPeriodTd)
                    .HasColumnType("datetime")
                    .HasColumnName("f9_dpDateDebtPeriod_td");

                entity.Property(e => e.Fioworker)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIOWorker");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GosposhlinaReturn)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlinaReturn");

                entity.Property(e => e.InitiatorInstance)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InitiatorInstanceSi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("initiatorInstance_SI");

                entity.Property(e => e.InitiatorInstanceTi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("initiatorInstance_TI");

                entity.Property(e => e.InstDateDecree)
                    .HasColumnType("datetime")
                    .HasColumnName("instDateDecree");

                entity.Property(e => e.InstResultConsideration)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("instResultConsideration");

                entity.Property(e => e.InstResultConsiderationFi).HasColumnName("instResultConsideration_FI");

                entity.Property(e => e.InstResultConsiderationSi).HasColumnName("instResultConsideration_SI");

                entity.Property(e => e.InstResultConsiderationTi).HasColumnName("instResultConsideration_TI");

                entity.Property(e => e.InternalTrainingPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("internalTrainingPeriod")
                    .HasComment("Внутренний срок подготовки искового заявления");

                entity.Property(e => e.NameNotice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nameNotice");

                entity.Property(e => e.NameOfAuthority)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("nameOfAuthority");

                entity.Property(e => e.NameOfTheExecutiveDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameOfTheExecutiveDocument");

                entity.Property(e => e.NameUfsspexecProc)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("nameUFSSPExecProc");

                entity.Property(e => e.NormativeFilingPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("normativeFilingPeriod")
                    .HasComment("Нормативный срок подачи заявления о вынесении судебного приказа/искового заявления");

                entity.Property(e => e.NormativeTermForIssuing)
                    .HasColumnType("datetime")
                    .HasColumnName("normativeTermForIssuing");

                entity.Property(e => e.NotReportExecutionTime).HasColumnName("notReportExecutionTime");

                entity.Property(e => e.NoticeResultId).HasColumnName("noticeResultId");

                entity.Property(e => e.NumberPerformSheet)
                    .HasMaxLength(50)
                    .HasColumnName("numberPerformSheet");

                entity.Property(e => e.OutcomeOfTheTrial)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("outcomeOfTheTrial")
                    .HasComment("Итог судебного разбирательства (подлежит получению и/л, в иске отказано/оплата до и/л)");

                entity.Property(e => e.PaymentBeforeFiling)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("paymentBeforeFiling")
                    .HasComment("Оплата до подачи иска (руб.)");

                entity.Property(e => e.PaymentBeforeFilingAclaim)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentBeforeFilingAClaim");

                entity.Property(e => e.PaymentBeforeReceipt)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("paymentBeforeReceipt")
                    .HasComment("Оплата до получения и/л");

                entity.Property(e => e.PaymentBeforeReceiving)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentBeforeReceiving");

                entity.Property(e => e.PaymentNumber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentNumber");

                entity.Property(e => e.PlaceOfExecutiveDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("placeOfExecutiveDocument");

                entity.Property(e => e.QuantityPerformSheets).HasColumnName("quantityPerformSheets");

                entity.Property(e => e.ReasonForTheReturnOfTheCourtOrder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonForTheReturnOfTheCourtOrder");

                entity.Property(e => e.ReasonReturn).HasColumnName("reasonReturn");

                entity.Property(e => e.ReasonsForReturning)
                    .HasMaxLength(756)
                    .IsUnicode(false)
                    .HasColumnName("reasonsForReturning");

                entity.Property(e => e.ResultComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("resultComment");

                entity.Property(e => e.ReviewResult).HasColumnName("reviewResult");

                entity.Property(e => e.ScanPath)
                    .IsUnicode(false)
                    .HasColumnName("scanPath");

                entity.Property(e => e.SerialDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_1");

                entity.Property(e => e.SerialDate2)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_2");

                entity.Property(e => e.SerialDate3)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_3");

                entity.Property(e => e.SerialDate4)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_4");

                entity.Property(e => e.SerialNumber1)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_1");

                entity.Property(e => e.SerialNumber2)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_2");

                entity.Property(e => e.SerialNumber3)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_3");

                entity.Property(e => e.SerialNumber4)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_4");

                entity.Property(e => e.Served).HasColumnName("served");

                entity.Property(e => e.SignReceipt)
                    .HasColumnName("signReceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SignSend)
                    .HasColumnName("signSend")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourcePayment).HasColumnName("sourcePayment");

                entity.Property(e => e.StructDivision)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("structDivision");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.WhoPaysGosposhlina)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("whoPaysGosposhlina");

                entity.HasOne(d => d.CauseNavigation)
                    .WithMany(p => p.DebtActionNoticeCauseNavigations)
                    .HasForeignKey(d => d.Cause)
                    .HasConstraintName("FK_DebtActionNotices_FasetItems3");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.DebtActionNotices)
                    .HasForeignKey(d => d.DebtActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActionNotices_DebtActionNotices");

                entity.HasOne(d => d.NoticeResult)
                    .WithMany(p => p.DebtActionNoticeNoticeResults)
                    .HasForeignKey(d => d.NoticeResultId)
                    .HasConstraintName("FK_DebtActionNotices_FasetItems2");

                entity.HasOne(d => d.ReasonReturnNavigation)
                    .WithMany(p => p.DebtActionNoticeReasonReturnNavigations)
                    .HasForeignKey(d => d.ReasonReturn)
                    .HasConstraintName("FK_DebtActionNotices_FasetItems5");

                entity.HasOne(d => d.SourcePaymentNavigation)
                    .WithMany(p => p.DebtActionNoticeSourcePaymentNavigations)
                    .HasForeignKey(d => d.SourcePayment)
                    .HasConstraintName("FK_DebtActionNotices_FasetItems4");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.DebtActionNoticeTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActionNotices_FasetItems");
            });

            modelBuilder.Entity<DebtActionNoticesExecProcIdDateHistory>(entity =>
            {
                entity.ToTable("DebtActionNoticesExecProcIdDateHistory", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebtActionNoticeId).HasColumnName("debtActionNoticeId");

                entity.Property(e => e.ExecProcIdDateHistory)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIdDateHistory");

                entity.HasOne(d => d.DebtActionNotice)
                    .WithMany(p => p.DebtActionNoticesExecProcIdDateHistories)
                    .HasForeignKey(d => d.DebtActionNoticeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtActionNoticesExecProcIdDateHistory_DebtActionNotices");
            });

            modelBuilder.Entity<DebtActionNoticesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtActionNoticesView", "sn");

                entity.Property(e => e.AccNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accNumber");

                entity.Property(e => e.ActualFilingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("actualFilingDate");

                entity.Property(e => e.AimedAtCollection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("aimedAtCollection");

                entity.Property(e => e.AmicableAgreement)
                    .HasMaxLength(2048)
                    .IsUnicode(false);

                entity.Property(e => e.AmountPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amountPaid");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.ApartmentOwnerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("apartmentOwnerName");

                entity.Property(e => e.AppealMeetingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("appealMeetingDate");

                entity.Property(e => e.CasePending).HasColumnName("casePending");

                entity.Property(e => e.Cause).HasColumnName("cause");

                entity.Property(e => e.CauseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("causeName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Court).HasColumnName("court");

                entity.Property(e => e.CourtName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("courtName");

                entity.Property(e => e.CourtNameDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("courtNameDistrict");

                entity.Property(e => e.CourtNumberAffair)
                    .HasMaxLength(50)
                    .HasColumnName("courtNumberAffair");

                entity.Property(e => e.CourtNumberDecisions)
                    .HasMaxLength(50)
                    .HasColumnName("courtNumberDecisions");

                entity.Property(e => e.Creared)
                    .HasColumnType("datetime")
                    .HasColumnName("creared");

                entity.Property(e => e.DateAbsentia)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAbsentia");

                entity.Property(e => e.DateAnomaly)
                    .HasColumnType("datetime")
                    .HasColumnName("dateAnomaly");

                entity.Property(e => e.DateApplicationPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateApplicationPerformSheet");

                entity.Property(e => e.DateCancelOfDecision)
                    .HasColumnType("datetime")
                    .HasColumnName("dateCancelOfDecision");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.DateDecision)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision");

                entity.Property(e => e.DateDecisionFi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_FI");

                entity.Property(e => e.DateDecisionSi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_SI");

                entity.Property(e => e.DateDecisionTi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDecision_TI");

                entity.Property(e => e.DateMeetingFi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateMeetingFI");

                entity.Property(e => e.DateMeetingPrPr)
                    .HasColumnType("datetime")
                    .HasColumnName("dateMeetingPrPr");

                entity.Property(e => e.DateOfActualReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfActualReceipt");

                entity.Property(e => e.DateOfApplicationOnReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfApplicationOnReceipt");

                entity.Property(e => e.DateOfCassationMeeting)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfCassationMeeting");

                entity.Property(e => e.DateOfExecutiveDocument)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfExecutiveDocument");

                entity.Property(e => e.DateOfIssueDefinition)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfIssueDefinition");

                entity.Property(e => e.DateOfPaymentOfStateDuty)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfPaymentOfStateDuty");

                entity.Property(e => e.DateOfReturnOfTheCourtOrder)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfReturnOfTheCourtOrder");

                entity.Property(e => e.DateOfSendingForCollection)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOfSendingForCollection");

                entity.Property(e => e.DatePayment)
                    .HasColumnType("datetime")
                    .HasColumnName("datePayment");

                entity.Property(e => e.DatePerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("datePerformSheet");

                entity.Property(e => e.DatePfexecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("datePFExecProc");

                entity.Property(e => e.DateProcessInstance).HasColumnType("datetime");

                entity.Property(e => e.DateProcessInstanceSi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateProcessInstance_SI");

                entity.Property(e => e.DateProcessInstanceTi)
                    .HasColumnType("datetime")
                    .HasColumnName("dateProcessInstance_TI");

                entity.Property(e => e.DateReceipt)
                    .HasColumnType("datetime")
                    .HasColumnName("dateReceipt");

                entity.Property(e => e.DateReceivingPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateReceivingPerformSheet");

                entity.Property(e => e.DateResubmissionApplication)
                    .HasColumnType("datetime")
                    .HasColumnName("dateResubmissionApplication");

                entity.Property(e => e.DateResultConsideration)
                    .HasColumnType("datetime")
                    .HasColumnName("dateResultConsideration");

                entity.Property(e => e.DateResultConsiderationSi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("dateResultConsideration_SI");

                entity.Property(e => e.DateResultConsiderationTi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("dateResultConsideration_TI");

                entity.Property(e => e.DateSend)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSend");

                entity.Property(e => e.DateStartExecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStartExecProc");

                entity.Property(e => e.DateTransferPerformSheet)
                    .HasColumnType("datetime")
                    .HasColumnName("dateTransferPerformSheet");

                entity.Property(e => e.DateUfsspexecProc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateUFSSPExecProc");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtListNoticeId).HasColumnName("debtListNoticeId");

                entity.Property(e => e.DebtListNoticeName)
                    .HasMaxLength(100)
                    .HasColumnName("debtListNoticeName");

                entity.Property(e => e.DocStopExecProc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("docStopExecProc");

                entity.Property(e => e.ExecProcBankName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("execProcBankName");

                entity.Property(e => e.ExecProcDateReturnPfr)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcDateReturnPFR");

                entity.Property(e => e.ExecProcDateStopOutRf)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcDateStopOutRF");

                entity.Property(e => e.ExecProcIdDateHistory)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIdDateHistory");

                entity.Property(e => e.ExecProcIdDateHistoryCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIdDateHistoryCreated");

                entity.Property(e => e.ExecProcIddate)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDate");

                entity.Property(e => e.ExecProcIddateReturn)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDateReturn");

                entity.Property(e => e.ExecProcIddateSsp)
                    .HasColumnType("datetime")
                    .HasColumnName("execProcIDDateSSP");

                entity.Property(e => e.ExecProcIdperiod)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("execProcIDPeriod");

                entity.Property(e => e.ExecProcInfo)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("execProcInfo");

                entity.Property(e => e.ExecProcNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("execProcNumber");

                entity.Property(e => e.ExecProcStatus).HasColumnName("execProcStatus");

                entity.Property(e => e.ExecProcStatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("execProcStatusName");

                entity.Property(e => e.ExecutionTime).HasColumnName("executionTime");

                entity.Property(e => e.ExplanationOfReasonForRejection).HasColumnName("explanationOfReasonForRejection");

                entity.Property(e => e.F10NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f10_nudSumIsk");

                entity.Property(e => e.F11NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f11_nudDebtSumm");

                entity.Property(e => e.F12NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f12_nudDebtPeni");

                entity.Property(e => e.F13NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f13_nudGosposhlina");

                entity.Property(e => e.F14NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f14_nudGosposhlina");

                entity.Property(e => e.F17NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f17_nudGosposhlina");

                entity.Property(e => e.F25DpDateDebtPeriodFd)
                    .HasColumnType("datetime")
                    .HasColumnName("f25_dpDateDebtPeriod_fd");

                entity.Property(e => e.F25DpDateDebtPeriodTd)
                    .HasColumnType("datetime")
                    .HasColumnName("f25_dpDateDebtPeriod_td");

                entity.Property(e => e.F26NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f26_nudSumIsk");

                entity.Property(e => e.F27NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f27_nudSumIsk");

                entity.Property(e => e.F28NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f28_nudDebtSumm");

                entity.Property(e => e.F29NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f29_nudDebtPeni");

                entity.Property(e => e.F30NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f30_nudGosposhlina");

                entity.Property(e => e.F33NudRecoveredAmountSummPrPr)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f33_nudRecoveredAmountSummPrPr");

                entity.Property(e => e.F41NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f41_nudSumIsk");

                entity.Property(e => e.F42NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f42_nudDebtSumm");

                entity.Property(e => e.F43NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f43_nudDebtPeni");

                entity.Property(e => e.F44NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f44_nudGosposhlina");

                entity.Property(e => e.F45NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f45_nudSumIsk");

                entity.Property(e => e.F46NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f46_nudDebtSumm");

                entity.Property(e => e.F47NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f47_nudDebtPeni");

                entity.Property(e => e.F48NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f48_nudGosposhlina");

                entity.Property(e => e.F60NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f60_nudSumIsk");

                entity.Property(e => e.F61NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f61_nudDebtSumm");

                entity.Property(e => e.F62NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f62_nudDebtPeni");

                entity.Property(e => e.F63NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f63_nudGosposhlina");

                entity.Property(e => e.F64NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f64_nudSumIsk");

                entity.Property(e => e.F65NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f65_nudDebtSumm");

                entity.Property(e => e.F66NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f66_nudDebtPeni");

                entity.Property(e => e.F67NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f67_nudGosposhlina");

                entity.Property(e => e.F75NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f75_nudSumIsk");

                entity.Property(e => e.F76NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f76_nudDebtSumm");

                entity.Property(e => e.F77NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f77_nudDebtPeni");

                entity.Property(e => e.F78NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f78_nudGosposhlina");

                entity.Property(e => e.F79NudSumIsk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f79_nudSumIsk");

                entity.Property(e => e.F80NudDebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f80_nudDebtSumm");

                entity.Property(e => e.F81NudDebtPeni)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f81_nudDebtPeni");

                entity.Property(e => e.F82NudGosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("f82_nudGosposhlina");

                entity.Property(e => e.F9DpDateDebtPeriodFd)
                    .HasColumnType("datetime")
                    .HasColumnName("f9_dpDateDebtPeriod_fd");

                entity.Property(e => e.F9DpDateDebtPeriodTd)
                    .HasColumnType("datetime")
                    .HasColumnName("f9_dpDateDebtPeriod_td");

                entity.Property(e => e.Fioworker)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIOWorker");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GosposhlinaReturn)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlinaReturn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InitiatorInstance)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InitiatorInstanceSi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("initiatorInstance_SI");

                entity.Property(e => e.InitiatorInstanceTi)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("initiatorInstance_TI");

                entity.Property(e => e.InstDateDecree)
                    .HasColumnType("datetime")
                    .HasColumnName("instDateDecree");

                entity.Property(e => e.InstResultConsideration)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("instResultConsideration");

                entity.Property(e => e.InstResultConsiderationFi).HasColumnName("instResultConsideration_FI");

                entity.Property(e => e.InstResultConsiderationSi).HasColumnName("instResultConsideration_SI");

                entity.Property(e => e.InstResultConsiderationTi).HasColumnName("instResultConsideration_TI");

                entity.Property(e => e.InternalTrainingPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("internalTrainingPeriod");

                entity.Property(e => e.NameDebtActionStatuses)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameDebtActionStatuses");

                entity.Property(e => e.NameNotice)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nameNotice");

                entity.Property(e => e.NameOfAuthority)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("nameOfAuthority");

                entity.Property(e => e.NameOfTheExecutiveDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameOfTheExecutiveDocument");

                entity.Property(e => e.NameStatusByNotice)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameStatusByNotice");

                entity.Property(e => e.NameUfsspexecProc)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("nameUFSSPExecProc");

                entity.Property(e => e.NormativeFilingPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("normativeFilingPeriod");

                entity.Property(e => e.NormativeTermForIssuing)
                    .HasColumnType("datetime")
                    .HasColumnName("normativeTermForIssuing");

                entity.Property(e => e.NotReportExecutionTime).HasColumnName("notReportExecutionTime");

                entity.Property(e => e.NoticeResultId).HasColumnName("noticeResultId");

                entity.Property(e => e.NoticeResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("noticeResultName");

                entity.Property(e => e.NumberPerformSheet)
                    .HasMaxLength(50)
                    .HasColumnName("numberPerformSheet");

                entity.Property(e => e.OutcomeOfTheTrial)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("outcomeOfTheTrial");

                entity.Property(e => e.PaymentBeforeFiling)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("paymentBeforeFiling");

                entity.Property(e => e.PaymentBeforeFilingAclaim)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentBeforeFilingAClaim");

                entity.Property(e => e.PaymentBeforeReceipt)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("paymentBeforeReceipt");

                entity.Property(e => e.PaymentBeforeReceiving)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentBeforeReceiving");

                entity.Property(e => e.PaymentNumber)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentNumber");

                entity.Property(e => e.PlaceOfExecutiveDocument)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("placeOfExecutiveDocument");

                entity.Property(e => e.QuantityPerformSheets).HasColumnName("quantityPerformSheets");

                entity.Property(e => e.ReasonForTheReturnOfTheCourtOrder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonForTheReturnOfTheCourtOrder");

                entity.Property(e => e.ReasonReturn).HasColumnName("reasonReturn");

                entity.Property(e => e.ReasonReturnName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonReturnName");

                entity.Property(e => e.ReasonsForReturning)
                    .HasMaxLength(756)
                    .IsUnicode(false)
                    .HasColumnName("reasonsForReturning");

                entity.Property(e => e.RecoveredAmountSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recoveredAmountSumm");

                entity.Property(e => e.ResultComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("resultComment");

                entity.Property(e => e.ReviewResult).HasColumnName("reviewResult");

                entity.Property(e => e.ScanPath)
                    .IsUnicode(false)
                    .HasColumnName("scanPath");

                entity.Property(e => e.SerialDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_1");

                entity.Property(e => e.SerialDate2)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_2");

                entity.Property(e => e.SerialDate3)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_3");

                entity.Property(e => e.SerialDate4)
                    .HasColumnType("datetime")
                    .HasColumnName("serialDate_4");

                entity.Property(e => e.SerialNumber1)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_1");

                entity.Property(e => e.SerialNumber2)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_2");

                entity.Property(e => e.SerialNumber3)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_3");

                entity.Property(e => e.SerialNumber4)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("serialNumber_4");

                entity.Property(e => e.Served).HasColumnName("served");

                entity.Property(e => e.SignReceipt).HasColumnName("signReceipt");

                entity.Property(e => e.SignSend).HasColumnName("signSend");

                entity.Property(e => e.SourcePayment).HasColumnName("sourcePayment");

                entity.Property(e => e.SourcePaymentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sourcePaymentName");

                entity.Property(e => e.StructDivision)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("structDivision");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeIdAnomaly).HasColumnName("typeIdAnomaly");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.TypeStatusByNotice).HasColumnName("typeStatusByNotice");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.WhoPaysGosposhlina)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("whoPaysGosposhlina");
            });

            modelBuilder.Entity<DebtActionStatus>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("DebtActionStatuses", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupPage).HasColumnName("groupPage");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<DebtActionStatusContent>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_DebtActionStatuseContents")
                    .IsClustered(false);

                entity.ToTable("DebtActionStatusContents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionStatusId).HasColumnName("debtActionStatusId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");
            });

            modelBuilder.Entity<DebtActionStatusCourtStage>(entity =>
            {
                entity.ToTable("DebtActionStatusCourtStages", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DebtActionCourtStageId).HasColumnName("debtActionCourtStageId");

                entity.Property(e => e.DebtActionStatusId).HasColumnName("debtActionStatusId");

                entity.HasOne(d => d.DebtActionCourtStage)
                    .WithMany(p => p.DebtActionStatusCourtStages)
                    .HasForeignKey(d => d.DebtActionCourtStageId)
                    .HasConstraintName("FK_DebtActionStatusCourtStages_DebtActionCourtStages");

                entity.HasOne(d => d.DebtActionStatus)
                    .WithMany(p => p.DebtActionStatusCourtStages)
                    .HasForeignKey(d => d.DebtActionStatusId)
                    .HasConstraintName("FK_DebtActionStatusCourtStages_DebtActionStatuses");
            });

            modelBuilder.Entity<DebtActionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtActionsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ChangedUserId).HasColumnName("changedUserId");

                entity.Property(e => e.ChangedUserName)
                    .HasMaxLength(122)
                    .IsUnicode(false)
                    .HasColumnName("changedUserName");

                entity.Property(e => e.CommentAccount)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("commentAccount");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedUserId).HasColumnName("createdUserId");

                entity.Property(e => e.CreatedUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("createdUserName");

                entity.Property(e => e.DdFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ddFromDate");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtActionNumber)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("debtActionNumber");

                entity.Property(e => e.DebtAffairId).HasColumnName("debtAffairId");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate");

                entity.Property(e => e.ExecProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("execProcessNumber");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromDateDebt)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDateDebt");

                entity.Property(e => e.Gosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlina");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastActionNoticesDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastActionNoticesDate");

                entity.Property(e => e.LastActionNoticesName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lastActionNoticesName");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.NachPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nachPenalty");

                entity.Property(e => e.NameAction)
                    .IsUnicode(false)
                    .HasColumnName("nameAction");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.StageId).HasColumnName("stageId");

                entity.Property(e => e.StageName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("stageName");

                entity.Property(e => e.StatusChangeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("statusChangeDate");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.StatusTypeId).HasColumnName("statusTypeId");

                entity.Property(e => e.StatusTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToDateDebt)
                    .HasColumnType("datetime")
                    .HasColumnName("toDateDebt");

                entity.Property(e => e.TypePirid).HasColumnName("typePIRId");

                entity.Property(e => e.TypePirname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typePIRName");

                entity.Property(e => e.TypeStageResult).HasColumnName("typeStageResult");

                entity.Property(e => e.TypeStageResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeStageResultName");
            });

            modelBuilder.Entity<DebtAffair>(entity =>
            {
                entity.ToTable("DebtAffairs", "sn");

                entity.HasIndex(e => e.AccountId, "IX_DebtAffairs_accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CategoryId).HasColumnName("categoryId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DebtAffairNumber)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("debtAffairNumber")
                    .HasComment("Уникальный номер дела из ИБ-источника");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ScanPath)
                    .IsUnicode(false)
                    .HasColumnName("scanPath");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DebtAffairs)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_DebtAffairs_Account");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.DebtAffairs)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_DebtAffairs_Category");
            });

            modelBuilder.Entity<DebtAffairOwner>(entity =>
            {
                entity.ToTable("DebtAffairOwners", "sn");

                entity.HasIndex(e => e.PersonResidentId, "IX_DebtAffairOwners_personResidentId");

                entity.HasIndex(e => new { e.OwnerId, e.DebtAffairId, e.PersonResidentId }, "UX_DebtAffairOwners__ownerId_debtAffairId_personResidentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairId).HasColumnName("debtAffairId");

                entity.Property(e => e.DebtAffairOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAffairOwnerName");

                entity.Property(e => e.IsJustResident).HasColumnName("isJustResident");

                entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PersonResidentId).HasColumnName("personResidentId");

                entity.Property(e => e.PlaceEmployment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("placeEmployment");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("telephoneNumber");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.DebtAffairOwners)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_DebtAffairOwners_DebtActions");

                entity.HasOne(d => d.DebtAffair)
                    .WithMany(p => p.DebtAffairOwners)
                    .HasForeignKey(d => d.DebtAffairId)
                    .HasConstraintName("FK_DebtAffairOwners_DebtAffairs");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.DebtAffairOwners)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK_DebtAffairOwners_Owners");

                entity.HasOne(d => d.PersonResident)
                    .WithMany(p => p.DebtAffairOwners)
                    .HasForeignKey(d => d.PersonResidentId)
                    .HasConstraintName("FK_DebtAffairOwners_Persons");
            });

            modelBuilder.Entity<DebtAffairOwnersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAffairOwnersView", "sn");

                entity.Property(e => e.AffairOwnerType)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("affairOwnerType");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairId).HasColumnName("debtAffairId");

                entity.Property(e => e.DebtAffairOwnerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("debtAffairOwnerName");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsJustResident).HasColumnName("isJustResident");

                entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.OwnerPersonId).HasColumnName("ownerPersonId");

                entity.Property(e => e.PersonResidentId).HasColumnName("personResidentId");

                entity.Property(e => e.PlaceEmployment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("placeEmployment");

                entity.Property(e => e.PrintCurrentStatus)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("printCurrentStatus");

                entity.Property(e => e.ResidentAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("telephoneNumber");
            });

            modelBuilder.Entity<DebtAffairsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtAffairsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.CategoryId).HasColumnName("categoryId");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("categoryName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CountActions).HasColumnName("countActions");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtAffairNumber)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("debtAffairNumber");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MonthCount).HasColumnName("monthCount");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ScanPath)
                    .IsUnicode(false)
                    .HasColumnName("scanPath");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<DebtDocument>(entity =>
            {
                entity.ToTable("DebtDocuments", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalculateGosposhlina).HasColumnName("calculateGosposhlina");

                entity.Property(e => e.CalculatePenalties).HasColumnName("calculatePenalties");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate");

                entity.Property(e => e.DebtMode).HasColumnName("debtMode");

                entity.Property(e => e.DebtSaveMode).HasColumnName("debtSaveMode");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.IsOnlyOpenAccountServices).HasColumnName("isOnlyOpenAccountServices");

                entity.Property(e => e.IsOnlyOpenAccounts).HasColumnName("isOnlyOpenAccounts");

                entity.Property(e => e.ManuallyCreated).HasColumnName("manuallyCreated");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.PaymentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentToDate");

                entity.Property(e => e.PenaltyToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyToDate");

                entity.Property(e => e.PenyMode).HasColumnName("penyMode");

                entity.Property(e => e.ShowInterface)
                    .IsRequired()
                    .HasColumnName("showInterface")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TaxSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("taxSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.WithApOwners).HasColumnName("withApOwners");

                entity.Property(e => e.WithExcludeProcesses).HasColumnName("withExcludeProcesses");

                entity.Property(e => e.WithoutNegativeDebt).HasColumnName("withoutNegativeDebt");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.DebtDocuments)
                    .HasForeignKey(d => d.HouseHolderId)
                    .HasConstraintName("FK_DebtDocuments_Organizations");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.DebtDocuments)
                    .HasForeignKey(d => d.OrgDocId)
                    .HasConstraintName("FK_DebtDocuments_OrgDocuments");
            });

            modelBuilder.Entity<DebtDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtDocumentsView", "sn");

                entity.Property(e => e.CalculateGosposhlina).HasColumnName("calculateGosposhlina");

                entity.Property(e => e.CalculatePenalties).HasColumnName("calculatePenalties");

                entity.Property(e => e.CountAccount).HasColumnName("countAccount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtFromDate");

                entity.Property(e => e.DebtMode).HasColumnName("debtMode");

                entity.Property(e => e.DebtSaveMode).HasColumnName("debtSaveMode");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.DebtToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("debtToDate");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsOnlyOpenAccountServices).HasColumnName("isOnlyOpenAccountServices");

                entity.Property(e => e.IsOnlyOpenAccounts).HasColumnName("isOnlyOpenAccounts");

                entity.Property(e => e.ManuallyCreated).HasColumnName("manuallyCreated");

                entity.Property(e => e.Number)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.PaymentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentToDate");

                entity.Property(e => e.PenaltyToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyToDate");

                entity.Property(e => e.PenyMode).HasColumnName("penyMode");

                entity.Property(e => e.ShowInterface).HasColumnName("showInterface");

                entity.Property(e => e.TaxSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("taxSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.WithApOwners).HasColumnName("withApOwners");

                entity.Property(e => e.WithExcludeProcesses).HasColumnName("withExcludeProcesses");

                entity.Property(e => e.WithoutNegativeDebt).HasColumnName("withoutNegativeDebt");
            });

            modelBuilder.Entity<DebtExecutoryProcessStage>(entity =>
            {
                entity.ToTable("DebtExecutoryProcessStages", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateExecProcess)
                    .HasColumnType("datetime")
                    .HasColumnName("dateExecProcess");

                entity.Property(e => e.DebtActionNoticeId).HasColumnName("debtActionNoticeId");

                entity.Property(e => e.ExecProcessNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("execProcessNumber");

                entity.Property(e => e.PerformSheetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("performSheetDate");

                entity.Property(e => e.PerformSheetNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("performSheetNumber");

                entity.HasOne(d => d.ApartmentOwner)
                    .WithMany(p => p.DebtExecutoryProcessStages)
                    .HasForeignKey(d => d.ApartmentOwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_debtExecutoryProcessStages_owners");

                entity.HasOne(d => d.DebtActionNotice)
                    .WithMany(p => p.DebtExecutoryProcessStages)
                    .HasForeignKey(d => d.DebtActionNoticeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_debtExecutoryProcessStages_debtActionNoticeId");
            });

            modelBuilder.Entity<DebtExecutoryProcessStagesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtExecutoryProcessStagesView", "sn");

                entity.Property(e => e.ApartmentOwnerId).HasColumnName("apartmentOwnerId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateExecProcess)
                    .HasColumnType("datetime")
                    .HasColumnName("dateExecProcess");

                entity.Property(e => e.DebtActionNoticeId).HasColumnName("debtActionNoticeId");

                entity.Property(e => e.ExecProcessNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("execProcessNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PerformSheetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("performSheetDate");

                entity.Property(e => e.PerformSheetNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("performSheetNumber");
            });

            modelBuilder.Entity<DebtListNotice>(entity =>
            {
                entity.ToTable("DebtListNotices", "sn");

                entity.HasIndex(e => e.IsActivity, "IX_DebtListNotices_IsActivity");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(250)
                    .HasColumnName("comment");

                entity.Property(e => e.FromDateToDate).HasColumnName("fromDateToDate");

                entity.Property(e => e.IsActivity).HasColumnName("isActivity");

                entity.Property(e => e.IsAddDebtActionHistory)
                    .HasColumnName("isAddDebtActionHistory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCodeTypePayment)
                    .HasColumnName("isCodeTypePayment")
                    .HasComment("Отображать поле Код типа платежа");

                entity.Property(e => e.IsColDayPerformance)
                    .HasColumnName("isColDayPerformance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDebitorsView)
                    .HasColumnName("isDebitorsView")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsJudgeOrg).HasColumnName("isJudgeOrg");

                entity.Property(e => e.IsMinCountDebt)
                    .HasColumnName("isMinCountDebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMonitor).HasColumnName("isMonitor");

                entity.Property(e => e.IsPartOneIndex).HasColumnName("isPartOneIndex");

                entity.Property(e => e.IsPayNotices)
                    .HasColumnName("isPayNotices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPaymentToDate).HasColumnName("isPaymentToDate");

                entity.Property(e => e.IsPdf)
                    .HasColumnName("isPDF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsService).HasColumnName("isService");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.IsServiceType).HasColumnName("isServiceType");

                entity.Property(e => e.IsWord).HasColumnName("isWord");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProcedureName).HasMaxLength(100);

                entity.Property(e => e.SynonymName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("synonymName");

                entity.Property(e => e.Template).HasColumnType("text");

                entity.Property(e => e.WithColdDebt).HasColumnName("withColdDebt");
            });

            modelBuilder.Entity<DebtListNoticesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtListNoticesView", "sn");

                entity.Property(e => e.Comment).HasMaxLength(250);

                entity.Property(e => e.FromDateToDate).HasColumnName("fromDateToDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActivity).HasColumnName("isActivity");

                entity.Property(e => e.IsAddDebtActionHistory).HasColumnName("isAddDebtActionHistory");

                entity.Property(e => e.IsCodeTypePayment).HasColumnName("isCodeTypePayment");

                entity.Property(e => e.IsColDayPerformance).HasColumnName("isColDayPerformance");

                entity.Property(e => e.IsDebitorsView).HasColumnName("isDebitorsView");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsJudgeOrg).HasColumnName("isJudgeOrg");

                entity.Property(e => e.IsMinCountDebt).HasColumnName("isMinCountDebt");

                entity.Property(e => e.IsMonitor).HasColumnName("isMonitor");

                entity.Property(e => e.IsPartOneIndex).HasColumnName("isPartOneIndex");

                entity.Property(e => e.IsPayNotices).HasColumnName("isPayNotices");

                entity.Property(e => e.IsPaymentToDate).HasColumnName("isPaymentToDate");

                entity.Property(e => e.IsPdf).HasColumnName("isPDF");

                entity.Property(e => e.IsService).HasColumnName("isService");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.IsServiceType).HasColumnName("isServiceType");

                entity.Property(e => e.IsWord).HasColumnName("isWord");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.ProcedureName).HasMaxLength(100);

                entity.Property(e => e.SynonymName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("synonymName");

                entity.Property(e => e.Template).HasColumnType("text");

                entity.Property(e => e.TypeNoticeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeNoticeName");

                entity.Property(e => e.WithColdDebt).HasColumnName("withColdDebt");
            });

            modelBuilder.Entity<DebtNotificationsRendered>(entity =>
            {
                entity.ToTable("DebtNotificationsRendered", "sn");

                entity.HasIndex(e => e.AccountId, "IX_DebtNotificationsRendered_accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DebtNotificationsRendereds)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtNotificationsRendered_Accounts");
            });

            modelBuilder.Entity<DebtNotificationsRenderedView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtNotificationsRenderedView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<DebtPircontent>(entity =>
            {
                entity.ToTable("DebtPIRContents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.TypePir).HasColumnName("typePIR");

                entity.Property(e => e.TypePirperiod).HasColumnName("typePIRPeriod");
            });

            modelBuilder.Entity<DebtPircontentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtPIRContentsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TypePir).HasColumnName("typePIR");

                entity.Property(e => e.TypePirname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typePIRName");

                entity.Property(e => e.TypePirperiod).HasColumnName("typePIRPeriod");

                entity.Property(e => e.TypePirperiodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typePIRPeriodName");
            });

            modelBuilder.Entity<DebtRecoveredAmount>(entity =>
            {
                entity.ToTable("DebtRecoveredAmounts", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DebtAccountId).HasColumnName("debtAccountId");

                entity.Property(e => e.DebtActionNoticeId).HasColumnName("debtActionNoticeId");

                entity.Property(e => e.Gosposhlina)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("gosposhlina");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.DebtAccount)
                    .WithMany(p => p.DebtRecoveredAmounts)
                    .HasForeignKey(d => d.DebtAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtRecoveredAmounts_DebtAccounts");

                entity.HasOne(d => d.DebtActionNotice)
                    .WithMany(p => p.DebtRecoveredAmounts)
                    .HasForeignKey(d => d.DebtActionNoticeId)
                    .HasConstraintName("FK_DebtRecoveredAmounts_DebtActionNotices");
            });

            modelBuilder.Entity<DebtStateAction>(entity =>
            {
                entity.ToTable("DebtStateActions", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtListNoticeId).HasColumnName("debtListNoticeId");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.TypePeriodMonitorId).HasColumnName("typePeriodMonitorId");

                entity.Property(e => e.TypePir).HasColumnName("typePIR");
            });

            modelBuilder.Entity<DebtStateActionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebtStateActionsView", "sn");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("actionName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtListNoticeId).HasColumnName("debtListNoticeId");

                entity.Property(e => e.DebtListNoticeName)
                    .HasMaxLength(100)
                    .HasColumnName("debtListNoticeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.TypePeriodMonitorId).HasColumnName("typePeriodMonitorId");

                entity.Property(e => e.TypePeriodMonitorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typePeriodMonitorName");

                entity.Property(e => e.TypePir).HasColumnName("typePIR");

                entity.Property(e => e.TypePirname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typePIRName");
            });

            modelBuilder.Entity<DebtorCard>(entity =>
            {
                entity.ToTable("DebtorCards", "sn");

                entity.HasIndex(e => e.AccountId, "IX_DebtorCards_accountId");

                entity.HasIndex(e => e.DocsVisionCardGuid, "IX_DebtorCards_docsVisionCardGuid")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ClosedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("closedAt");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("createdAt");

                entity.Property(e => e.DocsVisionCardGuid).HasColumnName("docsVisionCardGuid");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DebtorCards)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorCards_Accounts");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.DebtorCards)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DebtorCards_Organizations");
            });

            modelBuilder.Entity<DebugSnapshot>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DebugSnapshots", "db");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Script)
                    .IsUnicode(false)
                    .HasColumnName("script");

                entity.Property(e => e.ScriptLocalVariables)
                    .IsUnicode(false)
                    .HasColumnName("scriptLocalVariables");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<DebugSnapshotsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DebugSnapshotsView", "db");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Script)
                    .IsUnicode(false)
                    .HasColumnName("script");

                entity.Property(e => e.ScriptClick)
                    .HasColumnType("xml")
                    .HasColumnName("scriptClick");

                entity.Property(e => e.ScriptLocalVariables)
                    .IsUnicode(false)
                    .HasColumnName("scriptLocalVariables");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<DistributionOfOrganizationsPrioritiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DistributionOfOrganizationsPrioritiesView", "pay");

                entity.Property(e => e.AccountHouseHolderCode).HasColumnName("accountHouseHolderCode");

                entity.Property(e => e.AccountHouseHolderId).HasColumnName("accountHouseHolderId");

                entity.Property(e => e.AccountHouseHolderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountHouseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsHouseHolder).HasColumnName("isHouseHolder");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ServiceOrganizationCode).HasColumnName("serviceOrganizationCode");

                entity.Property(e => e.ServiceOrganizationId).HasColumnName("serviceOrganizationId");

                entity.Property(e => e.ServiceOrganizationName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceOrganizationName");
            });

            modelBuilder.Entity<DistributionOfOrganizationsPriority>(entity =>
            {
                entity.ToTable("DistributionOfOrganizationsPriorities", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHouseHolderId).HasColumnName("accountHouseHolderId");

                entity.Property(e => e.IsHouseHolder).HasColumnName("isHouseHolder");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ServiceOrganizationId).HasColumnName("serviceOrganizationId");

                entity.HasOne(d => d.AccountHouseHolder)
                    .WithMany(p => p.DistributionOfOrganizationsPriorityAccountHouseHolders)
                    .HasForeignKey(d => d.AccountHouseHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DistrOrgPr_Organizations1");

                entity.HasOne(d => d.ServiceOrganization)
                    .WithMany(p => p.DistributionOfOrganizationsPriorityServiceOrganizations)
                    .HasForeignKey(d => d.ServiceOrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DistrOrgPr_Organizations2");
            });

            modelBuilder.Entity<DocumentService>(entity =>
            {
                entity.ToTable("DocumentServices", "sp");

                entity.HasIndex(e => new { e.TypeId, e.ServiceId, e.AgentId, e.FromDate }, "UIX_SpDocumentServices__typeId_serviceId_agentId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.MaxSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("maxSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.DocumentServices)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentServices_snOrganizations");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.DocumentServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentServices_spServices");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.DocumentServices)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentServices_FasetItems");
            });

            modelBuilder.Entity<DocumentServiceOrg>(entity =>
            {
                entity.ToTable("DocumentServiceOrgs", "sp");

                entity.HasIndex(e => new { e.DocumentServiceId, e.OrgId }, "UIX_SpDocumentOrgs_documentServiceId_orgId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DocumentServiceId).HasColumnName("documentServiceId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.DocumentService)
                    .WithMany(p => p.DocumentServiceOrgs)
                    .HasForeignKey(d => d.DocumentServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentServiceOrgs_DocumentServices");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.DocumentServiceOrgs)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentServiceOrgs_snOrganizations");
            });

            modelBuilder.Entity<DocumentServiceOrgsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DocumentServiceOrgsView", "sp");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("agentName");

                entity.Property(e => e.DocFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("docFromDate");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.DocTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docTypeName");

                entity.Property(e => e.DocumentServiceId).HasColumnName("documentServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<DocumentServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DocumentServicesView", "sp");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("agentName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaxSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("maxSumm");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.HasKey(e => e.DocType)
                    .HasName("PK_documentTypes");

                entity.ToTable("DocumentTypes", "egrn");

                entity.Property(e => e.DocType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("docType");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Element>(entity =>
            {
                entity.ToTable("Elements", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdGroup).HasColumnName("idGroup");

                entity.Property(e => e.IdObject).HasColumnName("idObject");

                entity.HasOne(d => d.IdGroupNavigation)
                    .WithMany(p => p.Elements)
                    .HasForeignKey(d => d.IdGroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Elements_idGroups");
            });

            modelBuilder.Entity<EnergyResource>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EnergyResource", "ascupe");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<EntranceApartment>(entity =>
            {
                entity.ToTable("EntranceApartments", "sn");

                entity.HasIndex(e => e.ApartmentId, "IX_EntranceApartments_apartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.HouseEntranceId).HasColumnName("houseEntranceId");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.EntranceApartments)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntranceApartments_Apartments");

                entity.HasOne(d => d.HouseEntrance)
                    .WithMany(p => p.EntranceApartments)
                    .HasForeignKey(d => d.HouseEntranceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntranceApartments_HouseEntrance");
            });

            modelBuilder.Entity<EntranceApartmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EntranceApartmentsView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.EntranceFloors).HasColumnName("entranceFloors");

                entity.Property(e => e.HouseAddrId).HasColumnName("houseAddrId");

                entity.Property(e => e.HouseAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseAddrName");

                entity.Property(e => e.HouseEntrance)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("houseEntrance");

                entity.Property(e => e.HouseEntranceId).HasColumnName("houseEntranceId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<EqualAccountNumb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EqualAccountNumb", "epd");

                entity.Property(e => e.BillOrg)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("billOrg");

                entity.Property(e => e.Billid).HasColumnName("billid");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("provNumber");

                entity.Property(e => e.SubDiv)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SubdivId).HasColumnName("subdivId");
            });

            modelBuilder.Entity<Error>(entity =>
            {
                entity.HasKey(e => new { e.Code, e.Number })
                    .HasName("PK__testErrors");

                entity.ToTable("Errors", "test");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.Recommendation)
                    .IsUnicode(false)
                    .HasColumnName("recommendation");

                entity.Property(e => e.TechnicalData)
                    .IsUnicode(false)
                    .HasColumnName("technicalData");
            });

            modelBuilder.Entity<ErrorsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ErrorsView", "test");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CodeNumber)
                    .IsUnicode(false)
                    .HasColumnName("codeNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.Recommendation)
                    .IsUnicode(false)
                    .HasColumnName("recommendation");

                entity.Property(e => e.TechnicalData)
                    .IsUnicode(false)
                    .HasColumnName("technicalData");
            });

            modelBuilder.Entity<EtlLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EtlLog", "etl");

                entity.Property(e => e.Err)
                    .IsUnicode(false)
                    .HasColumnName("err");

                entity.Property(e => e.Inserts).HasColumnName("inserts");

                entity.Property(e => e.SchemaName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("schema_name");

                entity.Property(e => e.TableName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("table_name");

                entity.Property(e => e.Tstamp)
                    .HasColumnType("datetime")
                    .HasColumnName("tstamp");

                entity.Property(e => e.Updates).HasColumnName("updates");
            });

            modelBuilder.Entity<EventRegistration>(entity =>
            {
                entity.ToTable("EventRegistrations", "event");

                entity.HasIndex(e => e.ObjectId, "IX_EventRegistrations__objectId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.IsProcessed).HasColumnName("isProcessed");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.UsageTypeId).HasColumnName("usageTypeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.EventRegistrations)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventRegistrations_EventTypes");

                entity.HasOne(d => d.UsageType)
                    .WithMany(p => p.EventRegistrations)
                    .HasForeignKey(d => d.UsageTypeId)
                    .HasConstraintName("FK_EventRegistrations_FasetItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.EventRegistrations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventRegistrations_Users");
            });

            modelBuilder.Entity<EventRegistrationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EventRegistrationsView", "event");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.EventTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("eventTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsProcessed).HasColumnName("isProcessed");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tableName");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<EventType>(entity =>
            {
                entity.ToTable("EventTypes", "event");

                entity.HasIndex(e => new { e.TableName, e.Name }, "UX_EventTypes__tableName_name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tableName");
            });

            modelBuilder.Entity<EventType1>(entity =>
            {
                entity.ToTable("EventTypes", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event");

                entity.Property(e => e.IsEnable)
                    .HasColumnName("isEnable")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPriority).HasColumnName("isPriority");

                entity.Property(e => e.MessageTemplate)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("messageTemplate");

                entity.Property(e => e.TimeToSend).HasColumnName("timeToSend");
            });

            modelBuilder.Entity<EventTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EventTypesView", "sms");

                entity.Property(e => e.Activity)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("activity");

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.IsPriority).HasColumnName("isPriority");

                entity.Property(e => e.MessageTemplate)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("messageTemplate");

                entity.Property(e => e.TimeToSend).HasColumnName("timeToSend");
            });

            modelBuilder.Entity<EventsForSendSm>(entity =>
            {
                entity.ToTable("EventsForSendSms", "sms");

                entity.HasIndex(e => new { e.EventTypeId, e.Status, e.Guid }, "EventsForSendSms_eventTypeId_status_guid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<EventsForSendSmsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EventsForSendSmsView", "sms");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<ExchangeRequest>(entity =>
            {
                entity.ToTable("ExchangeRequests", "sn");

                entity.HasIndex(e => e.DateIn, "IX_ExcangeRequests_dateIn");

                entity.HasIndex(e => e.Status, "IX_ExchangeRequests__status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("accountId");

                entity.Property(e => e.AddressId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("addressId");

                entity.Property(e => e.ConnectPsId).HasColumnName("connectPsId");

                entity.Property(e => e.DateIn)
                    .HasColumnType("datetime")
                    .HasColumnName("dateIn");

                entity.Property(e => e.DateOut)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOut");

                entity.Property(e => e.Dvnumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("DVNumber");

                entity.Property(e => e.Guid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.OperationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("operationDate");

                entity.Property(e => e.OutId).HasColumnName("outId");

                entity.Property(e => e.QueryId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("queryId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.XmlIn)
                    .IsRequired()
                    .HasColumnType("xml")
                    .HasColumnName("xmlIn");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("xmlOut");

                entity.HasOne(d => d.ConnectPs)
                    .WithMany(p => p.ExchangeRequests)
                    .HasForeignKey(d => d.ConnectPsId)
                    .HasConstraintName("FK_ExchangeRequests_Settings");
            });

            modelBuilder.Entity<ExchangeRequestGroup>(entity =>
            {
                entity.ToTable("ExchangeRequestGroups", "sn");

                entity.HasIndex(e => new { e.GroupId, e.ConnectPsId }, "IX_ExchangeRequestGroups")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConnectPsId).HasColumnName("connectPsId");

                entity.HasOne(d => d.ConnectPs)
                    .WithMany(p => p.ExchangeRequestGroups)
                    .HasForeignKey(d => d.ConnectPsId)
                    .HasConstraintName("FK_ExchangeRequestGroups_Settings");
            });

            modelBuilder.Entity<ExchangeRequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExchangeRequestsView", "sn");

                entity.Property(e => e.AccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("accountId");

                entity.Property(e => e.AddressId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("addressId");

                entity.Property(e => e.DateIn)
                    .HasColumnType("datetime")
                    .HasColumnName("dateIn");

                entity.Property(e => e.DateOut)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOut");

                entity.Property(e => e.Dvnumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("DVNumber");

                entity.Property(e => e.Guid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.OperationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("operationDate");

                entity.Property(e => e.OutId).HasColumnName("outId");

                entity.Property(e => e.QueryId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("queryId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.XmlIn)
                    .IsUnicode(false)
                    .HasColumnName("xmlIn");

                entity.Property(e => e.XmlOut)
                    .IsUnicode(false)
                    .HasColumnName("xmlOut");
            });

            modelBuilder.Entity<ExchangeRequestsWithoutXmlView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExchangeRequestsWithoutXmlView", "sn");

                entity.Property(e => e.AccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("accountId");

                entity.Property(e => e.AddressId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("addressId");

                entity.Property(e => e.ConnectPsId).HasColumnName("connectPsId");

                entity.Property(e => e.DateIn)
                    .HasColumnType("datetime")
                    .HasColumnName("dateIn");

                entity.Property(e => e.DateOut)
                    .HasColumnType("datetime")
                    .HasColumnName("dateOut");

                entity.Property(e => e.Dvnumber)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("DVNumber");

                entity.Property(e => e.Guid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.OperationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("operationDate");

                entity.Property(e => e.OutId).HasColumnName("outId");

                entity.Property(e => e.QueryId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("queryId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.XmlIn)
                    .IsUnicode(false)
                    .HasColumnName("xmlIn");

                entity.Property(e => e.XmlOut)
                    .IsUnicode(false)
                    .HasColumnName("xmlOut");
            });

            modelBuilder.Entity<ExportDocument>(entity =>
            {
                entity.ToTable("ExportDocuments", "notice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.ExportOperationId).HasColumnName("exportOperationId");

                entity.Property(e => e.IsExported).HasColumnName("isExported");

                entity.Property(e => e.IsPrepared).HasColumnName("isPrepared");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.ExportDocuments)
                    .HasForeignKey(d => d.AreaId);

                entity.HasOne(d => d.ExportOperation)
                    .WithMany(p => p.ExportDocuments)
                    .HasForeignKey(d => d.ExportOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ExportInfo>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.NumberFile })
                    .HasName("PK_noticeExportInfoes");

                entity.ToTable("ExportInfoes", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeExportInfoes_ID")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.NumberFile)
                    .HasColumnName("numberFile")
                    .HasComment("Номер файла по порядку");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("fileName")
                    .HasComment("Имя файла с расширением без пути");

                entity.Property(e => e.FolderName)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("folderName")
                    .HasComment("Относительное имя подпапки, если используется");

                entity.Property(e => e.FromNumberInAction)
                    .HasColumnName("fromNumberInAction")
                    .HasComment("sn.AreaAccounts.number для первого лицевого в файле");

                entity.Property(e => e.GeneralParams)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("generalParams")
                    .HasComment("Совокупонсть всех параметров на момент сохранения PDF (StiReportPdfExporterCorrectorMulti.ExportPdfDocumentAndGetRenameFileName)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndexPart)
                    .HasColumnName("indexPart")
                    .HasComment("sn.AreaAccounts.indexPart для первого лицевого в файле");

                entity.Property(e => e.ToNumberInAction)
                    .HasColumnName("toNumberInAction")
                    .HasComment("sn.AreaAccounts.number для последнего лицевого в файле включительно");
            });

            modelBuilder.Entity<ExportOperation>(entity =>
            {
                entity.ToTable("ExportOperations", "notice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExportDirectory)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("exportDirectory");

                entity.Property(e => e.IsCompleted).HasColumnName("isCompleted");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.ExportOperations)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ExportOperations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ExportToHmWebAccount>(entity =>
            {
                entity.HasKey(e => e.RemoteAccountId);

                entity.ToTable("ExportToHmWeb_Account", "ext");

                entity.Property(e => e.RemoteAccountId)
                    .ValueGeneratedNever()
                    .HasComment("Идентификатор ЛС в СН.");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Номер лицевого счета/Иной идентификатор плательщика.");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(100)
                    .HasComment("Номер помещения.");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(10)
                    .HasComment("Тип помещения.");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("date")
                    .HasComment("Дата рождения.");

                entity.Property(e => e.CloseDate)
                    .HasColumnType("date")
                    .HasColumnName("Close_Date")
                    .HasComment("Дата закрытия ЛС.");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasComment("Дата начала действия ЛС.");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(200)
                    .HasComment("Имя.");

                entity.Property(e => e.HeatedArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Отапливаемая площадь.");

                entity.Property(e => e.IsPayerIndividual).HasComment("Является ли плательщик ЮЛ(false) / Физ. лицом (true)");

                entity.Property(e => e.LastName)
                    .HasMaxLength(200)
                    .HasComment("Фамилия.");

                entity.Property(e => e.LivingPerson).HasComment("Количество проживающих.");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(200)
                    .HasComment("Отчество.");

                entity.Property(e => e.OrgShortName)
                    .HasMaxLength(200)
                    .HasComment("Название организации-владельца ЛС.");

                entity.Property(e => e.RemoteApartmentId).HasComment("Идентификатор помещения в СН.");

                entity.Property(e => e.RemoteHouseAddrId).HasComment("Идентификатор адреса дома в СН.");

                entity.Property(e => e.RemoteOrganizationId).HasComment("Идентификатор организации-владельца ЛС.");

                entity.Property(e => e.RemotePayerOrganizationId).HasComment("Идентификатор организации-плательщика в СН.");

                entity.Property(e => e.ResidentialArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Жилая площадь.");

                entity.Property(e => e.SharePercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasComment("Доля внесения платы, размер доли в %.");

                entity.Property(e => e.TotalArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Общая площадь ЛС.");

                entity.Property(e => e.Updated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExportToHmWebAccountAddress>(entity =>
            {
                entity.HasKey(e => e.TransportAccountAddressId);

                entity.ToTable("ExportToHmWeb_AccountAddress", "ext");

                entity.Property(e => e.TransportAccountAddressId).HasComment("Транспортный идентификатор");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.EntranceNumber)
                    .HasMaxLength(255)
                    .HasComment("Номер подъезда для помещения. Для дома не заполняется, для помещения не обязательный");

                entity.Property(e => e.IsDeleted).HasComment("Флаг \"Ошибочная запись удалена\"");

                entity.Property(e => e.LivingArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Жилая площадь. Не должна быть больше общей");

                entity.Property(e => e.Number)
                    .HasMaxLength(510)
                    .HasComment("Номер помещения/дома");

                entity.Property(e => e.RemoteHouseAddrId).HasComment("Ссылка на ExportToHmWeb_Address.HouseAddrId");

                entity.Property(e => e.TotalArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Общая площадь");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasComment("Тип помещения/дома (первый символ может быть I (ИЖД), B (ЖД блокированной застройки), A (МКД), X (нет данных); второй (null если дом), A (квартира), C (коммуналка), D (общежитие), U (нежилое), X (жилое без конкретизации его типа)");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasComment("Дата обновления записи в транспортной таблице. При создании записи в транспортной таблице задаётся SYSDATETIMEOFFSET()");
            });

            modelBuilder.Entity<ExportToHmWebAccountDebt>(entity =>
            {
                entity.HasKey(e => e.TransportDebtId);

                entity.ToTable("ExportToHmWeb_AccountDebt", "ext");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.DebtEnd).HasColumnType("date");

                entity.Property(e => e.DebtStart).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PassportSeries)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Snils)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SNILS");

                entity.Property(e => e.Updated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExportToHmWebAccountProvider>(entity =>
            {
                entity.HasKey(e => e.TransportAccountProviderId);

                entity.ToTable("ExportToHmWeb_AccountProviders", "ext");

                entity.Property(e => e.AccountNumber).HasMaxLength(100);

                entity.Property(e => e.AccountNumberGis)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Date");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.IsHh).HasColumnName("isHH");

                entity.Property(e => e.IsKr).HasColumnName("isKR");

                entity.Property(e => e.IsProvider).HasColumnName("isProvider");

                entity.Property(e => e.IsRecovery).HasColumnName("isRecovery");

                entity.Property(e => e.IsRkc).HasColumnName("isRKC");

                entity.Property(e => e.OrgShortName).HasMaxLength(200);

                entity.Property(e => e.Updated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExportToHmWebAccountProvidersTest280122>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExportToHmWeb_AccountProvidersTest280122", "ext");

                entity.Property(e => e.AccountNumber).HasMaxLength(100);

                entity.Property(e => e.AccountNumberGis)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CloseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Close_Date");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.IsHh).HasColumnName("isHH");

                entity.Property(e => e.IsKr).HasColumnName("isKR");

                entity.Property(e => e.IsProvider).HasColumnName("isProvider");

                entity.Property(e => e.IsRecovery).HasColumnName("isRecovery");

                entity.Property(e => e.IsRkc).HasColumnName("isRKC");

                entity.Property(e => e.OrgShortName).HasMaxLength(200);

                entity.Property(e => e.TransportAccountProviderId).ValueGeneratedOnAdd();

                entity.Property(e => e.Updated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExportToHmWebAcknowledgement>(entity =>
            {
                entity.HasKey(e => e.TransportAcknowledgementId);

                entity.ToTable("ExportToHmWeb_Acknowledgement", "ext");

                entity.HasComment("Обмен с РИАС ЖКХ. Квитирование платежей.");

                entity.Property(e => e.TransportAcknowledgementId).HasComment("Транспортный идентификатор записи");

                entity.Property(e => e.Amount).HasComment("Сумма квитирования (количество распределённых денег) в копейках");

                entity.Property(e => e.Created).HasComment("Дата и время создания записи");

                entity.Property(e => e.IsDeleted).HasComment("Флаг \"Запись удалена\"");

                entity.Property(e => e.OrderNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Номер платежа, присвоенный ГИС ЖКХ. Обычно содержит 32 символа");

                entity.Property(e => e.RemoteOrderOrganizationId).HasComment("Идентификатор организации, которая приняла платёж и зарегистрировала его в ГИС ЖКХ");

                entity.Property(e => e.RemotePaymentDocumentIncomeId).HasComment("Идетификатор начисления платёжного документа (из таблицы ExportToHmWeb_PaymentDocumentIncome)");

                entity.Property(e => e.Updated).HasComment("Дата и время обновления записи");
            });

            modelBuilder.Entity<ExportToHmWebAddress>(entity =>
            {
                entity.HasKey(e => e.HouseAdrId);

                entity.ToTable("ExportToHmWeb_Address", "ext");

                entity.Property(e => e.HouseAdrId).ValueGeneratedNever();

                entity.Property(e => e.CityName).HasMaxLength(150);

                entity.Property(e => e.Created).HasPrecision(2);

                entity.Property(e => e.FiasGuid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FiasHouseGuid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.HouseName).HasMaxLength(150);

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.NormWaterHeating).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.RegionName).HasMaxLength(150);

                entity.Property(e => e.StreetName).HasMaxLength(150);

                entity.Property(e => e.SumApartmentAreaLiving).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumApartmentAreaMunicipal).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumApartmentAreaNotLiving).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumHouseArea).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Type).HasMaxLength(1);

                entity.Property(e => e.Updated).HasPrecision(2);
            });

            modelBuilder.Entity<ExportToHmWebApartment>(entity =>
            {
                entity.HasKey(e => e.ApartmentId);

                entity.ToTable("ExportToHmWeb_Apartment", "ext");

                entity.Property(e => e.ApartmentId).ValueGeneratedNever();

                entity.Property(e => e.ApartmentName).HasMaxLength(100);

                entity.Property(e => e.ApartmentType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.HeatedArea).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LivingArea).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TotalArea).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ExportToHmWebArchivedAccount>(entity =>
            {
                entity.ToTable("ExportToHmWeb_ArchivedAccount", "ext");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.DateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dateStart");

                entity.Property(e => e.QueueType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("queueType")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ExportToHmWebClosedAccount>(entity =>
            {
                entity.HasKey(e => e.RemoteAccountId)
                    .HasName("PK__extExportToHmWeb_ClosedAccount");

                entity.ToTable("ExportToHmWeb_ClosedAccount", "ext");

                entity.Property(e => e.RemoteAccountId).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber).HasMaxLength(100);

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.QueueType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ExportToHmWebHistory>(entity =>
            {
                entity.ToTable("ExportToHmWeb_History", "ext");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.TotalArea).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ExportToHmWebJn>(entity =>
            {
                entity.ToTable("ExportToHmWeb_Jn", "ext");

                entity.HasIndex(e => e.ProviderId, "IX_pId");

                entity.Property(e => e.Charged).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Month).HasColumnType("datetime");

                entity.Property(e => e.Penalty).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Raised).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Recalculation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SaldoCorrection).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ExportToHmWebJnRep>(entity =>
            {
                entity.ToTable("ExportToHmWeb_JnRep", "ext");

                entity.Property(e => e.ChargePeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargePeny");

                entity.Property(e => e.Charged).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Created).HasColumnType("datetime");

                entity.Property(e => e.Month).HasColumnType("datetime");

                entity.Property(e => e.PaymentPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentPeny");

                entity.Property(e => e.Raised).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Recalculation).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SaldoBeg).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SaldoEnd).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ExportToHmWebMeter>(entity =>
            {
                entity.HasKey(e => new { e.RemoteId, e.RemoteOrganizationId, e.IsCollectiveCounter })
                    .HasName("PK_GISMeter");

                entity.ToTable("ExportToHmWeb_Meter", "ext");

                entity.HasComment("Приборы учёта для ГИС ЖКХ");

                entity.HasIndex(e => e.TransportMeterId, "IX_extExportToHmWeb_Meter_TransportMeterId")
                    .IsUnique();

                entity.Property(e => e.RemoteOrganizationId).HasComment("Организация, которой принадлежит прибор.");

                entity.Property(e => e.IsCollectiveCounter)
                    .HasColumnName("isCollectiveCounter")
                    .HasComment("Признак коллективного прибора учёта.");

                entity.Property(e => e.BaseValue)
                    .HasColumnType("decimal(22, 7)")
                    .HasComment("Базовые показания по КР1. Если КР1 - \"электричество\", то базовое показание по тарифу Т1.");

                entity.Property(e => e.BaseValue2).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.BaseValue3).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Created)
                    .HasPrecision(2)
                    .HasComment("Дата и время создания записи.");

                entity.Property(e => e.DateFactorySealed)
                    .HasColumnType("date")
                    .HasComment("Дата опломбирования ПУ (поле обязательно для импорта в ГИС ЖКХ).");

                entity.Property(e => e.DateInstalled)
                    .HasColumnType("date")
                    .HasComment("Дата установки.");

                entity.Property(e => e.DateStart)
                    .HasColumnType("date")
                    .HasComment("Дата ввода в эксплуатацию. Обязательное поле по форматам ГИС ЖКХ.");

                entity.Property(e => e.DeviceManufacturer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Марка ПУ (поле обязательно для импорта в ГИС ЖКХ).");

                entity.Property(e => e.DeviceModel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Модель ПУ (поле обязательно для импорта в ГИС ЖКХ).");

                entity.Property(e => e.DeviceSerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Серийный номер ПУ. Обязательное поле по форматам ГИС ЖКХ.");

                entity.Property(e => e.DispatchingInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Указание наименования установленной системы для дистанционного снятия показаний (обязательно, если HasDispatching=1).");

                entity.Property(e => e.ElectricalTransformationRatio)
                    .HasColumnType("decimal(17, 2)")
                    .HasComment("Коэффициент трансформации (указывается для электрической энергии).");

                entity.Property(e => e.HasDispatching).HasComment("Возможность дистанционного снятия показаний. Обязательное поле по форматам ГИС ЖКХ.");

                entity.Property(e => e.HasPressureSensor).HasComment("Наличие датчиков давления. Обязательное поле по форматам ГИС ЖКХ.");

                entity.Property(e => e.HasTemperatureSensor).HasComment("Наличие датчика температуры. Обязательное поле по форматам ГИС ЖКХ.");

                entity.Property(e => e.IsDeleted).HasComment("Запись удалена.");

                entity.Property(e => e.PressureSensorInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Местоположение датчиков давления на узле учета (обязательно, если HasPressureSensor = 1).");

                entity.Property(e => e.RemoteHouseAddrId).HasComment("Объект, где установлен прибор.");

                entity.Property(e => e.ResourceId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("Коммунальный ресурс 1. Если ПУ измеряет несколько ресурсов (Тепло, ХВС и/или ГВС), то первым обязательно должно идти тепло (ТЭ). Возможные значения: {ХВ,ГВ,ЭлЭ,Газ,ТЭ,СБВ}.");

                entity.Property(e => e.RoomNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Номер помещения (для ПУ, кроме общедомовых).");

                entity.Property(e => e.RoomTypeIsLiving).HasComment("Флаг, является ли помещение жилым (для ПУ, кроме общедомовых).");

                entity.Property(e => e.TemperatureSensorInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Местоположение датчиков температуры на узле учета (обязательно, если HasTemperatureSensor =1).");

                entity.Property(e => e.TransportMeterId).ValueGeneratedOnAdd();

                entity.Property(e => e.TypeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Тип прибора учёта. Возможные значения: collective (Общедомовой), individual (Индивидуальный), house (На жилой дом), livingRoom (Комнатный), collectiveRoom (Общеквартирный).");

                entity.Property(e => e.Updated)
                    .HasPrecision(2)
                    .HasComment("Дата и время обновления/создания записи.");

                entity.Property(e => e.VerificationFirstDate)
                    .HasColumnType("date")
                    .HasComment("Дата последней поверки (видимо, перед установкой или проведением поверки на месте установки).");

                entity.Property(e => e.VerificationInterval).HasComment("Межповерочный интервал, лет.");
            });

            modelBuilder.Entity<ExportToHmWebMeterAccount>(entity =>
            {
                entity.HasKey(e => new { e.RemoteMeterId, e.IsCollectiveCounter, e.AccountNumber });

                entity.ToTable("ExportToHmWeb_MeterAccount", "ext");

                entity.HasComment("Связь ПУ с ЛС. Необходима для всех ПУ, кроме общедомовых.");

                entity.HasIndex(e => e.TransportMeterId, "IX_extExportToHmWeb_MeterAccount_TransportMeterId");

                entity.Property(e => e.RemoteMeterId).HasComment("Идентификатор прибора учёта во внешней системе.");

                entity.Property(e => e.IsCollectiveCounter)
                    .HasColumnName("isCollectiveCounter")
                    .HasComment("Признак коллективного прибора учёта.");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .HasComment("Номер лицевого счёта.");

                entity.Property(e => e.Created)
                    .HasPrecision(2)
                    .HasComment("Дата и время создания записи.");

                entity.Property(e => e.IsDeleted).HasComment("Запись удалена.");

                entity.Property(e => e.Updated)
                    .HasPrecision(2)
                    .HasComment("Дата и время обновления/создания записи.");
            });

            modelBuilder.Entity<ExportToHmWebMeterApartment>(entity =>
            {
                entity.HasKey(e => new { e.RemoteMeterId, e.IsCollectiveCounter, e.RemoteApartmentId });

                entity.ToTable("ExportToHmWeb_MeterApartment", "ext");

                entity.HasComment("Связь ПУ с комнатами, если тип ПУ \"Комнатный\".");

                entity.Property(e => e.RemoteMeterId).HasComment("Идентификатор прибора учёта во внешней системе.");

                entity.Property(e => e.IsCollectiveCounter)
                    .HasColumnName("isCollectiveCounter")
                    .HasComment("Признак коллективного прибора учёта.");

                entity.Property(e => e.RemoteApartmentId).HasComment("Идентификатор комнаты.");

                entity.Property(e => e.Created)
                    .HasPrecision(2)
                    .HasComment("Дата и время создания записи.");

                entity.Property(e => e.IsDeleted).HasComment("Запись удалена.");

                entity.Property(e => e.Updated)
                    .HasPrecision(2)
                    .HasComment("Дата и время обновления/создания записи.");
            });

            modelBuilder.Entity<ExportToHmWebMeterValue>(entity =>
            {
                entity.HasKey(e => new { e.RemoteMeterId, e.IsCollectiveCounter, e.DateValue, e.IsControl });

                entity.ToTable("ExportToHmWeb_MeterValue", "ext");

                entity.HasComment("Показания ПУ.");

                entity.HasIndex(e => e.TransportMeterId, "IX_extExportToHmWeb_MeterValue_TransportMeterId");

                entity.Property(e => e.RemoteMeterId).HasComment("Идентификатор прибора учёта во внешней системе.");

                entity.Property(e => e.IsCollectiveCounter)
                    .HasColumnName("isCollectiveCounter")
                    .HasComment("Признак коллективного прибора учёта.");

                entity.Property(e => e.DateValue)
                    .HasColumnType("date")
                    .HasComment("Дата снятия показания.");

                entity.Property(e => e.IsControl).HasComment("Тип показания прибора учета, контрольное");

                entity.Property(e => e.Created)
                    .HasPrecision(2)
                    .HasComment("Дата и время создания записи.");

                entity.Property(e => e.IsDeleted).HasComment("Запись удалена.");

                entity.Property(e => e.Updated)
                    .HasPrecision(2)
                    .HasComment("Дата и время обновления/создания записи.");

                entity.Property(e => e.ValueT)
                    .HasColumnType("decimal(22, 7)")
                    .HasComment("Показание 1. Если ресурс Электричество, то показание по тарифу Т1, иначе показание по Коммунальному ресурсу 1.");

                entity.Property(e => e.ValueT2).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ValueT3).HasColumnType("decimal(22, 7)");
            });

            modelBuilder.Entity<ExportToHmWebMeterVerification>(entity =>
            {
                entity.HasKey(e => e.RemoteVerificationId);

                entity.ToTable("ExportToHmWeb_MeterVerification", "ext");

                entity.Property(e => e.RemoteVerificationId).ValueGeneratedNever();

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.EndValueT1).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.EndValueT2).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.EndValueT3).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ReasonCode).HasMaxLength(3);

                entity.Property(e => e.SealDate).HasColumnType("date");

                entity.Property(e => e.StartValueT1).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.StartValueT2).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.StartValueT3).HasColumnType("decimal(22, 7)");
            });

            modelBuilder.Entity<ExportToHmWebPaymentDocument>(entity =>
            {
                entity.HasKey(e => e.RemotePaymentDocumentId);

                entity.ToTable("ExportToHmWeb_PaymentDocument", "ext");

                entity.Property(e => e.RemotePaymentDocumentId).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .HasComment("Номер ЛС (NOT NULL)");

                entity.Property(e => e.AdvanceBillingPeriod)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Аванс на начало расчетного периода, руб. (NULL)");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(100)
                    .HasComment("Номер помещения (NOT NULL)");

                entity.Property(e => e.BankBik)
                    .HasMaxLength(100)
                    .HasColumnName("BankBIK")
                    .HasComment("БИК банка получателя (NOT NULL)");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .HasComment("Наименование банка получателя платежа (NOT NULL)");

                entity.Property(e => e.CorrespondentAccountNumber)
                    .HasMaxLength(100)
                    .HasComment("Корреспондентский счет банка получателя (NOT NULL)");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtPreviousPeriods)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Задолженность за предыдущие периоды, руб. (NULL)");

                entity.Property(e => e.HeatedArea)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Отапливаемая площадь (NULL)");

                entity.Property(e => e.IsDebt)
                    .HasColumnName("isDebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastPaymentDate).HasColumnType("datetime");

                entity.Property(e => e.LivingPersonsNumber).HasComment("Количество проживающих (NULL)");

                entity.Property(e => e.OperatingAccountNumber)
                    .HasMaxLength(100)
                    .HasComment("Номер расчетного счета (NOT NULL)");

                entity.Property(e => e.PaymentDocumentNumber)
                    .HasMaxLength(100)
                    .HasComment("Номер платежного документа, по которому внесена плата, присвоенный такому документу исполнителем в целях осуществления расчетов по внесению платы (NULL)");

                entity.Property(e => e.Period)
                    .HasPrecision(2)
                    .HasComment("Расчетный период (NOT NULL)");

                entity.Property(e => e.PeriodOriginal)
                    .HasPrecision(2)
                    .HasColumnName("periodOriginal");

                entity.Property(e => e.RemoteAccountId).HasComment("ID лс в СН (NOT NULL)");

                entity.Property(e => e.RemoteAccountOwnerOrganizationId).HasComment("Организация, за которой закреплен ЛС (NOT NULL)");

                entity.Property(e => e.RemoteHouseAddrId).HasComment("ID адреса дома в СН (NOT NULL)");

                entity.Property(e => e.ResidentialSquare)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Жилая площадь (NULL)");

                entity.Property(e => e.RicInn)
                    .HasMaxLength(100)
                    .HasComment("ИНН получателя платежа (NOT NULL)");

                entity.Property(e => e.RicKpp)
                    .HasMaxLength(100)
                    .HasComment("КПП получателя платежа (NULL)");

                entity.Property(e => e.RicName)
                    .HasMaxLength(100)
                    .HasComment("Наименование получателя (NOT NULL)");

                entity.Property(e => e.TotalPayable).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPayableByIncome).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPayableNoDebt).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalPiecemealSum)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Сумма к оплате с учетом рассрочки платежа и процентов за рассрочку, руб. (NULL)");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(25, 4)")
                    .HasComment("Общая площадь для ЛС (NOT NULL)");
            });

            modelBuilder.Entity<ExportToHmWebPaymentDocumentIncome>(entity =>
            {
                entity.ToTable("ExportToHmWeb_PaymentDocumentIncome", "ext");

                entity.HasIndex(e => e.RemotePaymentDocumentId, "IX_remotePaymentDocumentId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AccountingPeriodHouse).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.AccountingPeriodIndividual).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.AccountingPeriodTotal)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Всего начислено за расчетный период (без перерасчетов и льгот), руб. (NOT NULL)");

                entity.Property(e => e.BankBik)
                    .HasMaxLength(100)
                    .HasColumnName("BankBIK");

                entity.Property(e => e.BankName).HasMaxLength(100);

                entity.Property(e => e.CalcExplanation)
                    .HasMaxLength(500)
                    .HasComment("Порядок расчетов (NOT NULL)");

                entity.Property(e => e.CorrespondentAccountNumber).HasMaxLength(100);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtStart)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Долг/аванс на начало расчётного периода (NULL)");

                entity.Property(e => e.HouseOverallNeedsCurrentValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("Норматив потребления коммунальной энергии: Текущие показания приборов учета коммунальных услуг - общедомовые нужды (NULL, если не указаны IndividualConsumptionCurrentValue, HouseTotalIndividualConsumption, HouseTotalHouseOverallNeeds)");

                entity.Property(e => e.HouseOverallNeedsNorm)
                    .HasColumnType("decimal(10, 4)")
                    .HasComment("Норматив потребления коммунальной энергии: Норматив потребления коммунальных услуг - общедомовые нужды (NULL)");

                entity.Property(e => e.HouseTotalHouseOverallNeeds)
                    .HasColumnType("decimal(10, 4)")
                    .HasComment("Норматив потребления коммунальной энергии: Суммарный объем коммунальных услуг в доме - общедомоые нужды (NULL, если не указаны IndividualConsumptionCurrentValue, HouseOverallNeedsCurrentValue, HouseTotalIndividualConsumption)");

                entity.Property(e => e.HouseTotalIndividualConsumption)
                    .HasColumnType("decimal(10, 4)")
                    .HasComment("Норматив потребления коммунальной энергии: Суммарный объем коммунальных услуг в доме - индивидуальное потребление (NULL, если не указаны IndividualConsumptionCurrentValue, HouseOverallNeedsCurrentValue, HouseTotalHouseOverallNeeds)");

                entity.Property(e => e.IndividualConsumptionCurrentValue)
                    .HasColumnType("decimal(10, 4)")
                    .HasComment("Норматив потребления коммунальной энергии: Текущие показания приборов учета коммунальных услуг - индивидуальное потребление (NULL, если не указаны HouseOverallNeedsCurrentValue, HouseTotalIndividualConsumption, HouseTotalHouseOverallNeeds)");

                entity.Property(e => e.IndividualConsumptionNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("Норматив потребления коммунальных услуг - индивидуальное потребление (NULL)");

                entity.Property(e => e.MoneyDiscount)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Перерасчеты и субсидии: Льготы, субсидии, скидки (руб.) (NULL)");

                entity.Property(e => e.MoneyRecalculation)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Перерасчеты и субсидии: Перерасчеты, корректировки (руб.)  (NULL)");

                entity.Property(e => e.MultiplyingFactorExcessFees).HasColumnType("decimal(13, 2)");

                entity.Property(e => e.MultiplyingFactorRatio).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.MunicipalServiceCommunalConsumptionPayable)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("К оплате за общедомовое потребление коммунальной услуги, руб. (для коммунальных услуг NOT NULL, для остальных NULL)");

                entity.Property(e => e.MunicipalServiceIndividualConsumptionPayable)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("К оплате за индивидуальное потребление коммунальной услуги, руб. (для коммунальных услуг NOT NULL, для остальных NULL)");

                entity.Property(e => e.OperatingAccountNumber).HasMaxLength(100);

                entity.Property(e => e.PastPaymentPeriodPiecemealPaymentSum)
                    .HasColumnType("decimal(12, 2)")
                    .HasComment("Рассрочка: Сумма платы с учетом рассрочки платежа - от платы за предыдущие расчетные периоды (NULL)");

                entity.Property(e => e.PaymentPeriodPiecemealPaymentSum)
                    .HasColumnType("decimal(12, 2)")
                    .HasComment("Рассрочка: Сумма платы с учетом рассрочки платежа - от платы за расчетный период, руб. (NULL)");

                entity.Property(e => e.PenaltiesSum).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PiecemealPaymentPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasComment("Рассрочка: Проценты за рассрочку, % (NULL, если не указаны поля PiecemealPaymentPercentRub, PiecemealPaymentSum)");

                entity.Property(e => e.PiecemealPaymentPercentRub)
                    .HasColumnType("decimal(12, 2)")
                    .HasComment("Рассрочка: Проценты за рассрочку, руб. (NULL, если не указаны поля PiecemealPaymentPercent, PiecemealPaymentPercent)");

                entity.Property(e => e.PiecemealPaymentSum)
                    .HasColumnType("decimal(12, 2)")
                    .HasComment("Рассрочка: Сумма к оплате с учетом рассрочки платежа и процентов за рассрочку (NULL, если не указаны PiecemealPaymentPercentRub, PiecemealPaymentPercent)");

                entity.Property(e => e.Raised)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Оплачено в расчётном периоде (NULL)");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(14, 6)")
                    .HasComment("Тариф (NOT NULL)");

                entity.Property(e => e.RecalculationReason)
                    .HasMaxLength(1500)
                    .HasComment("Перерасчеты: Основания перерасчетов (NULL, если не указано RecalculationSum)");

                entity.Property(e => e.RecalculationSum)
                    .HasColumnType("decimal(12, 2)")
                    .HasComment("Перерасчеты: Сумма (NULL, если не указано RecalculationReason)");

                entity.Property(e => e.RemotePaymentDocumentId).HasComment("Id ПД в СН (NOT NULL)");

                entity.Property(e => e.ServiceGroupCode).HasComment("Код группы услуг в СН (NOT NULL, таблица PaymentDocumentServiceGroup)");

                entity.Property(e => e.TotalPayable)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("Итого к оплате за расчетный период, руб. (NOT NULL)");

                entity.Property(e => e.TotalPayableWithDebt).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.VolumeHouse)
                    .HasColumnType("decimal(14, 6)")
                    .HasComment("Объем услуг: Общедомовые нужды (NULL)");

                entity.Property(e => e.VolumeHouseDeterminingMethod).HasComment("Способ определения объемов КУ (общедомовые нужды): иное (null), прибор (1), норматив (0)");

                entity.Property(e => e.VolumeIndividual)
                    .HasColumnType("decimal(14, 6)")
                    .HasComment("Объем услуг: Индивидуальное потребление (NULL)");

                entity.Property(e => e.VolumeIndividualDeterminingMethod).HasComment("Способ определения объемов КУ (индивидуальное потребление): иное (null), прибор (1), норматив (0)");
            });

            modelBuilder.Entity<ExportToHmWebPaymentDocumentServiceGroup>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("ExportToHmWeb_PaymentDocumentServiceGroup", "ext");

                entity.HasComment("Справочник групп услуг в платёжных документах");

                entity.Property(e => e.Code)
                    .ValueGeneratedNever()
                    .HasComment("Код группы услуг");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(800)
                    .HasComment("Имя группы услуг");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<ExportToHmWebRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExportToHmWeb_Rate", "ext");

                entity.Property(e => e.CityName).HasMaxLength(150);

                entity.Property(e => e.HouseHolderName).HasMaxLength(300);

                entity.Property(e => e.HouseName).HasMaxLength(150);

                entity.Property(e => e.NormRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NormUnitName).HasMaxLength(100);

                entity.Property(e => e.NormValue).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ProviderName).HasMaxLength(300);

                entity.Property(e => e.RegionName).HasMaxLength(150);

                entity.Property(e => e.ServiceName).HasMaxLength(300);

                entity.Property(e => e.StreetName).HasMaxLength(150);

                entity.Property(e => e.TypeName).HasMaxLength(300);

                entity.Property(e => e.TypeParentName).HasMaxLength(300);

                entity.Property(e => e.TypeUnitName).HasMaxLength(100);
            });

            modelBuilder.Entity<ExportToHmWebService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExportToHmWeb_Service", "ext");

                entity.Property(e => e.Name).HasMaxLength(300);

                entity.Property(e => e.ParentName).HasMaxLength(300);

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .HasColumnName("typeName");

                entity.Property(e => e.UnitName).HasMaxLength(100);
            });

            modelBuilder.Entity<ExportToTplusReceipt>(entity =>
            {
                entity.ToTable("ExportToTPlus_Receipts", "ext");

                entity.HasIndex(e => new { e.Operation, e.GroupOperId, e.AccountId }, "IX__ExportToTPlus_Receipts_operation_groupOperId_accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.LsNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ls_number");

                entity.Property(e => e.Operation).HasColumnName("operation");

                entity.Property(e => e.PaymentSum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSum");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymentType");

                entity.Property(e => e.Processed)
                    .HasColumnName("processed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp");

                entity.Property(e => e.VatSum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("vatSum");
            });

            modelBuilder.Entity<ExportToTplusReceiptItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExportToTPlus_ReceiptItems", "ext");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("payment_method");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.ReceiptId).HasColumnName("receiptId");

                entity.Property(e => e.Sum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sum");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unit");

                entity.Property(e => e.VatSum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("vatSum");
            });

            modelBuilder.Entity<ExternalHouseParameter>(entity =>
            {
                entity.ToTable("ExternalHouseParameters", "sn");

                entity.HasIndex(e => e.HouseId, "IX_ExternalHouseParameters_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FirstParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("firstParam");

                entity.Property(e => e.FiveParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiveParam");

                entity.Property(e => e.FourParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fourParam");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.SecondParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("secondParam");

                entity.Property(e => e.ThirdParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("thirdParam");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ExternalHouseParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExternalHouseParametersView", "sn");

                entity.Property(e => e.FirstParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("firstParam");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgLongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgLongName");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.SecondParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("secondParam");

                entity.Property(e => e.ThirdParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("thirdParam");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ExternalProcessing>(entity =>
            {
                entity.ToTable("ExternalProcessings", "ext");

                entity.HasIndex(e => new { e.Created, e.UserId, e.ProcessingTemplateId }, "IX_ext_ExternalProcessings_created_userId_processingTemplateId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата обработки");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.ProcessingTemplateId)
                    .HasColumnName("processingTemplateId")
                    .HasComment("По какой схеме обрабатывается. Ссылка на уникальный идентификатор ID таблицы ext.ExternalProcessingTemplates");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус обработки");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasComment("Ссылка на уникальный идентификатор пользователя");

                entity.HasOne(d => d.ProcessingTemplate)
                    .WithMany(p => p.ExternalProcessings)
                    .HasForeignKey(d => d.ProcessingTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExternalProcessings_ExternalProcessingTemplateId");
            });

            modelBuilder.Entity<ExternalProcessingFileRecord>(entity =>
            {
                entity.ToTable("ExternalProcessingFileRecords", "ext");

                entity.HasIndex(e => e.ProcessingId, "IX_ExternalProcessingFileRecords_processingId");

                entity.HasIndex(e => new { e.ProcessingId, e.AccountId }, "IX_ExternalProcessingFileRecords_processingId_accountId");

                entity.HasIndex(e => new { e.ProcessingId, e.StatusId }, "IX_ExternalProcessingFileRecords_processingId_statusId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Account)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Время обработки");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error")
                    .HasComment("Ошибки");

                entity.Property(e => e.Field)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("field")
                    .HasComment("Документо-строка из загружаемого файла. Разделитель полей \";\" (точка с запятой)");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.House)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsApartmentNew).HasColumnName("isApartmentNew");

                entity.Property(e => e.LastUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastUpdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ProcessingId)
                    .HasColumnName("processingId")
                    .HasComment("Ссылка на уникальный идентификатор процесса");

                entity.Property(e => e.StatusId)
                    .HasColumnName("statusId")
                    .HasComment("Статус процесса");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.SubFileId)
                    .HasColumnName("subFileId")
                    .HasComment("Имя файла внутри архива. Ссылка на идентификатор таблицы ExternalProcessingParameters");

                entity.HasOne(d => d.Processing)
                    .WithMany(p => p.ExternalProcessingFileRecords)
                    .HasForeignKey(d => d.ProcessingId)
                    .HasConstraintName("FK_ExternalProcessingFileRecords_processId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ExternalProcessingFileRecords)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_ExternalProcessingFileRecords_statusId");
            });

            modelBuilder.Entity<ExternalProcessingFileRecordsParseFieldView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExternalProcessingFileRecords_ParseFieldView", "ext");

                entity.Property(e => e.Аренда).IsUnicode(false);

                entity.Property(e => e.Владелиц).IsUnicode(false);

                entity.Property(e => e.ВладелицОрганизации)
                    .IsUnicode(false)
                    .HasColumnName("Владелиц организации");

                entity.Property(e => e.Дом).IsUnicode(false);

                entity.Property(e => e.ДопОплата)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Доп. оплата");

                entity.Property(e => e.Жилой).IsUnicode(false);

                entity.Property(e => e.Квартира).IsUnicode(false);

                entity.Property(e => e.Комунальный).IsUnicode(false);

                entity.Property(e => e.КонечноеСальдо)
                    .IsUnicode(false)
                    .HasColumnName("Конечное сальдо");

                entity.Property(e => e.КонечноеСальдоДата)
                    .IsUnicode(false)
                    .HasColumnName("Конечное сальдо (Дата)");

                entity.Property(e => e.ЛицевойСчет)
                    .IsUnicode(false)
                    .HasColumnName("Лицевой счет");

                entity.Property(e => e.Муниципальная).IsUnicode(false);

                entity.Property(e => e.НаселенныйПункт)
                    .IsUnicode(false)
                    .HasColumnName("Населенный пункт");

                entity.Property(e => e.Начисления).IsUnicode(false);

                entity.Property(e => e.НачисленияДата)
                    .IsUnicode(false)
                    .HasColumnName("Начисления (Дата)");

                entity.Property(e => e.НомерПроцесса).HasColumnName("Номер процесса");

                entity.Property(e => e.НомерРеестра)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Номер реестра");

                entity.Property(e => e.Оплата).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОплатаДата)
                    .IsUnicode(false)
                    .HasColumnName("Оплата (Дата)");

                entity.Property(e => e.Организация).IsUnicode(false);

                entity.Property(e => e.ПениПоДомам)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Пени по домам");

                entity.Property(e => e.ПениПоЛицевым)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Пени по лицевым");

                entity.Property(e => e.Перерасчет).IsUnicode(false);

                entity.Property(e => e.ПерерасчетДата)
                    .IsUnicode(false)
                    .HasColumnName("Перерасчет (Дата)");

                entity.Property(e => e.Период).IsUnicode(false);

                entity.Property(e => e.Привотизированная).IsUnicode(false);

                entity.Property(e => e.Прощадь).IsUnicode(false);

                entity.Property(e => e.Район).IsUnicode(false);

                entity.Property(e => e.Сальдо).IsUnicode(false);

                entity.Property(e => e.СльдоДата)
                    .IsUnicode(false)
                    .HasColumnName("Сльдо (Дата)");

                entity.Property(e => e.Тариф).IsUnicode(false);

                entity.Property(e => e.ТарифДата)
                    .IsUnicode(false)
                    .HasColumnName("Тариф (Дата)");

                entity.Property(e => e.Улица).IsUnicode(false);
            });

            modelBuilder.Entity<ExternalProcessingFileRecordsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExternalProcessingFileRecordsView", "ext");

                entity.Property(e => e.Account)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Field)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("field");

                entity.Property(e => e.Flat)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.House)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsApartmentNew).HasColumnName("isApartmentNew");

                entity.Property(e => e.LastUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastUpdate");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.ProcessingTemplateName)
                    .HasMaxLength(287)
                    .IsUnicode(false)
                    .HasColumnName("processingTemplateName");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");
            });

            modelBuilder.Entity<ExternalProcessingGroup>(entity =>
            {
                entity.ToTable("ExternalProcessingGroups", "ext");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ExternalProcessingParameter>(entity =>
            {
                entity.ToTable("ExternalProcessingParameters", "ext");

                entity.HasIndex(e => new { e.ProcessingId, e.Name }, "IX_ext_ExternalProcessingParameters_processingId_name");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название параметра. (FileName)");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName")
                    .HasComment("Название параметра для печати");

                entity.Property(e => e.PrintValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("printValue")
                    .HasComment("Значение параметра для печати");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("value")
                    .HasComment("Значение параметра. Фактически путь и имя обрабатываемого файла");

                entity.HasOne(d => d.Processing)
                    .WithMany(p => p.ExternalProcessingParameters)
                    .HasForeignKey(d => d.ProcessingId)
                    .HasConstraintName("FK_ExternalProcessingParameters_ExternalProcessingId");
            });

            modelBuilder.Entity<ExternalProcessingTemplate>(entity =>
            {
                entity.ToTable("ExternalProcessingTemplates", "ext");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ColumnsList)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("columnsList");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.EncodingOutputFile)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encodingOutputFile");

                entity.Property(e => e.Format)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("format")
                    .HasComment("Указание собственно формата файла");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.HasAddressComparison).HasColumnName("hasAddressComparison");

                entity.Property(e => e.HasInputFile)
                    .IsRequired()
                    .HasColumnName("hasInputFile")
                    .HasDefaultValueSql("((1))")
                    .HasComment("Наличие входного файла подлежащего обработке");

                entity.Property(e => e.HasOutputFile)
                    .HasColumnName("hasOutputFile")
                    .HasComment("Наличие выходного файла, например, с ошибками");

                entity.Property(e => e.IsArchive).HasColumnName("isArchive");

                entity.Property(e => e.IsChangeTabDelimiter).HasColumnName("isChangeTabDelimiter");

                entity.Property(e => e.IsPreview).HasColumnName("isPreview");

                entity.Property(e => e.LoadAsDbf).HasColumnName("loadAsDBF");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название операции. Фактически определяет формат данных и способ обработки");

                entity.Property(e => e.PostProcessingProcedure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("postProcessingProcedure")
                    .HasComment("Название процедуры \"пост\" обработки");

                entity.Property(e => e.Separator)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("separator")
                    .HasDefaultValueSql("(';')");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql")
                    .HasComment("Название хранимой процедуры вызываемой для обработки файла данного формата");

                entity.Property(e => e.UseDbffast)
                    .IsRequired()
                    .HasColumnName("useDBFFast")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ViewProcedure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("viewProcedure")
                    .HasComment("Название процедуры просмотра");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ExternalProcessingTemplates)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExternalProcessingTemplates_ExternalProcessingGroups");
            });

            modelBuilder.Entity<ExternalProcessingTemplateParameter>(entity =>
            {
                entity.ToTable("ExternalProcessingTemplateParameters", "ext");

                entity.HasIndex(e => e.ProcessingTemplateId, "IX_ExternalProcessingTemplateParameters_processingTemplateId");

                entity.Property(e => e.DefaultValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("defaultValue");

                entity.Property(e => e.IsUserVisible)
                    .IsRequired()
                    .HasColumnName("isUserVisible")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingTemplateId).HasColumnName("processingTemplateId");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ProcessingTemplate)
                    .WithMany(p => p.ExternalProcessingTemplateParameters)
                    .HasForeignKey(d => d.ProcessingTemplateId)
                    .HasConstraintName("FK_ExternalProcessingTemplateParameters_processTemplateId");
            });

            modelBuilder.Entity<ExternalProcessingTemplateParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExternalProcessingTemplateParametersView", "ext");

                entity.Property(e => e.DefaultValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("defaultValue");

                entity.Property(e => e.IsUserVisible).HasColumnName("isUserVisible");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessingTemplateId).HasColumnName("processingTemplateId");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.TemplateName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("templateName");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExternalProcessingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExternalProcessingsView", "ext");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.ExecutionTime).HasColumnName("executionTime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InputFileName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("inputFileName");

                entity.Property(e => e.ProcessingTemplateId).HasColumnName("processingTemplateId");

                entity.Property(e => e.ProcessingTemplateIsChangeTabDelimiter).HasColumnName("processingTemplateIsChangeTabDelimiter");

                entity.Property(e => e.ProcessingTemplateName)
                    .HasMaxLength(286)
                    .IsUnicode(false)
                    .HasColumnName("processingTemplateName");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<Faset>(entity =>
            {
                entity.ToTable("Fasets", "sn");

                entity.HasIndex(e => e.Name, "IX_Fasets_name");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.IsSystem).HasColumnName("isSystem");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название общих оснований, видов, типов, причин");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<FasetItem>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("FasetItems", "sn");

                entity.HasIndex(e => new { e.FasetId, e.Name }, "IUX_FasetItems__fasetId_name")
                    .IsUnique();

                entity.HasIndex(e => e.FasetId, "IXC_FasetItems_fasetId")
                    .IsClustered();

                entity.HasIndex(e => e.Id, "IX_FasetItems_id")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Code)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.FasetId)
                    .HasColumnName("fasetId")
                    .HasComment("Ссылка на уникальный идентификатор записи ID таблицы Faset");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Конкретизация определения, типа, вида, причины указанного в таблице Faset");

                entity.HasOne(d => d.Faset)
                    .WithMany(p => p.FasetItems)
                    .HasForeignKey(d => d.FasetId)
                    .HasConstraintName("FK_FasetItems_Fasets");
            });

            modelBuilder.Entity<FasetItemsHierarchy>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("FasetItemsHierarchy", "sn");

                entity.HasIndex(e => e.Level, "IX_FasetItemsHierarchy_level_id");

                entity.HasIndex(e => new { e.ParentFasetItemId, e.ChildFasetItemId }, "IX_FasetItemsHierarchy_parentFasetItemId_childFasetItemId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChildFasetItemId).HasColumnName("childFasetItemId");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.ParentFasetItemId).HasColumnName("parentFasetItemId");

                entity.HasOne(d => d.ChildFasetItem)
                    .WithMany(p => p.FasetItemsHierarchyChildFasetItems)
                    .HasForeignKey(d => d.ChildFasetItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FasetItemsHierarchy_ChildFasetItems");

                entity.HasOne(d => d.ParentFasetItem)
                    .WithMany(p => p.FasetItemsHierarchyParentFasetItems)
                    .HasForeignKey(d => d.ParentFasetItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FasetItemsHierarchy_ParentFasetItems");
            });

            modelBuilder.Entity<FasetItemsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FasetItemsView", "sn");

                entity.Property(e => e.Code)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<FavoriteReportTemplate>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ReportTemplateId });

                entity.ToTable("FavoriteReportTemplates", "sn");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.ReportTemplate)
                    .WithMany(p => p.FavoriteReportTemplates)
                    .HasForeignKey(d => d.ReportTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FavoriteReportTemplates_ReportTemplates");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FavoriteReportTemplates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FavoriteReportTemplates_Users");
            });

            modelBuilder.Entity<FavoriteReportTemplatesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FavoriteReportTemplatesView", "sn");

                entity.Property(e => e.AccountProperty).HasColumnName("accountProperty");

                entity.Property(e => e.Addresses).HasColumnName("addresses");

                entity.Property(e => e.AdministrationDistrict).HasColumnName("administrationDistrict");

                entity.Property(e => e.ApartmentTypes).HasColumnName("apartmentTypes");

                entity.Property(e => e.BankAccounts).HasColumnName("bankAccounts");

                entity.Property(e => e.Benefits).HasColumnName("benefits");

                entity.Property(e => e.CalcOperationGroups).HasColumnName("calcOperationGroups");

                entity.Property(e => e.CanonicalServices).HasColumnName("canonicalServices");

                entity.Property(e => e.CityBorough).HasColumnName("cityBorough");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConvenienceTypes).HasColumnName("convenienceTypes");

                entity.Property(e => e.DatePeriod).HasColumnName("datePeriod");

                entity.Property(e => e.Debt).HasColumnName("debt");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.ExistsBenefitDiff).HasColumnName("existsBenefitDiff");

                entity.Property(e => e.FasetFilterId).HasColumnName("fasetFilterId");

                entity.Property(e => e.FasetFilterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetFilterName");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.HouseTypes).HasColumnName("houseTypes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsAppending).HasColumnName("isAppending");

                entity.Property(e => e.IsAvailableInProvider).HasColumnName("isAvailableInProvider");

                entity.Property(e => e.IsCustomReport).HasColumnName("isCustomReport");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsGroupOperation).HasColumnName("isGroupOperation");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.Location)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.MinSumm).HasColumnName("minSumm");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NetworkFilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("networkFilePath");

                entity.Property(e => e.Number)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocument).HasColumnName("orgDocument");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationAccountOwner).HasColumnName("organizationAccountOwner");

                entity.Property(e => e.OrgsApartmentArea).HasColumnName("orgsApartmentArea");

                entity.Property(e => e.OrgsBank).HasColumnName("orgsBank");

                entity.Property(e => e.OrgsCashlessTransferrers).HasColumnName("orgsCashlessTransferrers");

                entity.Property(e => e.OrgsFinancialCenters).HasColumnName("orgsFinancialCenters");

                entity.Property(e => e.OrgsHouseHolders).HasColumnName("orgsHouseHolders");

                entity.Property(e => e.OrgsPaymentAgents).HasColumnName("orgsPaymentAgents");

                entity.Property(e => e.OrgsResourceProviders).HasColumnName("orgsResourceProviders");

                entity.Property(e => e.OrgsServiceHouseHolders).HasColumnName("orgsServiceHouseHolders");

                entity.Property(e => e.OrgsServiceProviders).HasColumnName("orgsServiceProviders");

                entity.Property(e => e.PaymentAgentTypes).HasColumnName("paymentAgentTypes");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.ReesterTypes).HasColumnName("reesterTypes");

                entity.Property(e => e.ReportGroupId).HasColumnName("reportGroupId");

                entity.Property(e => e.RunInTransaction).HasColumnName("runInTransaction");

                entity.Property(e => e.ServiceApartmentTypeFasetItemId).HasColumnName("serviceApartmentTypeFasetItemId");

                entity.Property(e => e.ServiceTypes).HasColumnName("serviceTypes");

                entity.Property(e => e.Services).HasColumnName("services");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.Template)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("template");

                entity.Property(e => e.Terminals).HasColumnName("terminals");

                entity.Property(e => e.TextParameter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("textParameter");

                entity.Property(e => e.TypeRecalcReasons).HasColumnName("typeRecalcReasons");

                entity.Property(e => e.Users).HasColumnName("users");

                entity.Property(e => e.WithRenderParameters).HasColumnName("withRenderParameters");

                entity.Property(e => e.WithSave).HasColumnName("withSave");

                entity.Property(e => e.WithoutBankrupt).HasColumnName("withoutBankrupt");

                entity.Property(e => e.WithoutClosesApartments).HasColumnName("withoutClosesApartments");
            });

            modelBuilder.Entity<FiasAccountInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FiasAccountInfo", "lk");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.LocalAddresses).HasColumnName("localAddresses");

                entity.Property(e => e.Room)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("room");
            });

            modelBuilder.Entity<FilterAccountPeriod>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountId })
                    .HasName("PK_notice_FilterAccountPeriods");

                entity.ToTable("FilterAccountPeriods", "notice");

                entity.HasIndex(e => e.Id, "IX_notice_FilterAccountPeriods_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<GetPenaltyRemissionWithDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GetPenaltyRemissionWithDoc", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docInfo");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.ToTable("Groups", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdLevel).HasColumnName("idLevel");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.IdLevelNavigation)
                    .WithMany(p => p.Groups)
                    .HasForeignKey(d => d.IdLevel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Elements_idLevel");
            });

            modelBuilder.Entity<GroupOperCalcCounterParam>(entity =>
            {
                entity.HasKey(e => new { e.GroupOperId, e.AccountServiceId, e.Period, e.CounterId, e.RangeStart });

                entity.ToTable("GroupOperCalcCounterParams", "cp");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.Created, e.CounterId }, "IX_GroupOperCalcCounterParams_accountServiceId_counterId_period_created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionDelta");

                entity.Property(e => e.ConsumptionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionFactor");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod")
                    .HasComputedColumnSql("([util].[GetPeriodFromDatetime]([created]))", false);

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.GroupOperCalcCounterParams)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcCounterParams_AccountServices");

                entity.HasOne(d => d.CalcAlgs)
                    .WithMany(p => p.GroupOperCalcCounterParams)
                    .HasForeignKey(d => d.CalcAlgsId)
                    .HasConstraintName("FK_GroupOperCalcCounterParams_CalcAlgs");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.GroupOperCalcCounterParams)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcCounterParams_GroupOperations");
            });

            modelBuilder.Entity<GroupOperCalcCounterParam1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperCalcCounterParams", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionDelta");

                entity.Property(e => e.ConsumptionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<GroupOperCalcCounterParamsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperCalcCounterParamsView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionDelta");

                entity.Property(e => e.ConsumptionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<GroupOperCalcHouseCounterParam>(entity =>
            {
                entity.ToTable("GroupOperCalcHouseCounterParams", "cp");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.Created }, "IX_GroupOperCalcHouseCounterParams_accountServiceId_period_created");

                entity.HasIndex(e => new { e.GroupOperId, e.AccountServiceId, e.Period }, "IX_JnCalcHouseCounterParams_groupOperId_accountServiceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod")
                    .HasComputedColumnSql("([util].[GetPeriodFromDatetime]([created]))", false);

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.GroupOperCalcHouseCounterParams)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_AccountServices");

                entity.HasOne(d => d.CalcAlgs)
                    .WithMany(p => p.GroupOperCalcHouseCounterParams)
                    .HasForeignKey(d => d.CalcAlgsId)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_CalcAlgs");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.GroupOperCalcHouseCounterParams)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_GroupOperations");
            });

            modelBuilder.Entity<GroupOperCalcHouseCounterParam1>(entity =>
            {
                entity.ToTable("GroupOperCalcHouseCounterParams", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.Created }, "IX_GroupOperCalcHouseCounterParams_accountServiceId_period_created");

                entity.HasIndex(e => new { e.GroupOperId, e.AccountServiceId, e.Period }, "IX_JnCalcHouseCounterParams_groupOperId_accountServiceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod")
                    .HasComputedColumnSql("([util].[GetPeriodFromDatetime]([created]))", false);

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.GroupOperCalcHouseCounterParam1s)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_AccountServices");

                entity.HasOne(d => d.CalcAlgs)
                    .WithMany(p => p.GroupOperCalcHouseCounterParam1s)
                    .HasForeignKey(d => d.CalcAlgsId)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_CalcAlgs");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.GroupOperCalcHouseCounterParam1s)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcHouseCounterParams_GroupOperations");
            });

            modelBuilder.Entity<GroupOperCalcHouseCounterParamsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperCalcHouseCounterParamsView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseCounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("houseCounterName");

                entity.Property(e => e.HouseCounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("houseCounterNumber");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");
            });

            modelBuilder.Entity<GroupOperCalcParam>(entity =>
            {
                entity.HasKey(e => new { e.GroupOperId, e.AccountServiceId, e.Period, e.RangeStart })
                    .HasName("PK_auditGroupOperCalcParams");

                entity.ToTable("GroupOperCalcParams", "audit");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("coefficientDays")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("date")
                    .HasColumnName("createdPeriod");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentVacationsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorCounter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(9, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<GroupOperCalcParam1>(entity =>
            {
                entity.HasKey(e => new { e.GroupOperId, e.AccountServiceId, e.Period, e.RangeStart });

                entity.ToTable("GroupOperCalcParams", "cp");

                entity.HasIndex(e => e.Created, "IX_GroupOperCalcCounterParams_created");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period, e.Created }, "IX_GroupOperCalcParams_accountServiceId_period_createdPeriod");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("date")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefGeneral)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("coefGeneral");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("coefficientDays")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod")
                    .HasComputedColumnSql("(dateadd(day,( -datepart(day,CONVERT([datetime],floor(CONVERT([float],[created],(0))),(0))))+(1),CONVERT([datetime],floor(CONVERT([float],[created],(0))),(0))))", false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentVacationsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorCounter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(9, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.GroupOperCalcParam1s)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcParams_AccountServices");

                entity.HasOne(d => d.CalcAlgs)
                    .WithMany(p => p.GroupOperCalcParam1s)
                    .HasForeignKey(d => d.CalcAlgsId)
                    .HasConstraintName("FK_GroupOperCalcParams_CalcAlgs");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.GroupOperCalcParam1s)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperCalcParams_GroupOperations");
            });

            modelBuilder.Entity<GroupOperCalcParam2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperCalcParams", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.ResidentVacationsCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceAltGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneralDelta");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneralDelta");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<GroupOperCalcParamUiFormula>(entity =>
            {
                entity.HasKey(e => new { e.GroupOperId, e.AccountServiceId, e.Period, e.RangeStart });

                entity.ToTable("GroupOperCalcParamUiFormulas", "cp");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");
            });

            modelBuilder.Entity<GroupOperCalcParamsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperCalcParamsView", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.CalcAlgsId).HasColumnName("calcAlgsId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefGeneral)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("coefGeneral");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("createdPeriod");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("date")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.ResidentVacationsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(9, 8)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(9, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");
            });

            modelBuilder.Entity<GroupOperation>(entity =>
            {
                entity.ToTable("GroupOperations", "sn");

                entity.HasIndex(e => e.AccountId, "IX_GroupOperations__accountId");

                entity.HasIndex(e => e.CalcId, "IX_GroupOperations__calcId");

                entity.HasIndex(e => new { e.Created, e.TypeId }, "IX_GroupOperations__created_typeId");

                entity.HasIndex(e => e.IsUseRecalc, "IX_GroupOperations__isUseRecalc_id");

                entity.HasIndex(e => e.PaymentOrderId, "IX_GroupOperations__paymentOrderId");

                entity.HasIndex(e => new { e.ReesterNumber, e.IncomingTransferDate }, "IX_GroupOperations__reesterNumber_incomingTransferDate_inc_ID");

                entity.HasIndex(e => new { e.TransactionDate, e.TypeId }, "IX_GroupOperations__transactionDate_typeId");

                entity.HasIndex(e => e.TransactionNumber, "IX_GroupOperations__transactionNumber");

                entity.HasIndex(e => e.DebtActionId, "IX_GroupOperations_debtActionId");

                entity.HasIndex(e => e.PaymentAgentId, "IX_GroupOperations_paymentAgentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreditOrgId).HasColumnName("creditOrgId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairOwnerId).HasColumnName("debtAffairOwnerId");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.NoticeRecalcUseByPeriod).HasColumnName("noticeRecalcUseByPeriod");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordPaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordPaymentDate");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_GroupOperations_DebtActions");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_GroupOperations_OrgDocuments");

                entity.HasOne(d => d.PaymentAgent)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.PaymentAgentId)
                    .HasConstraintName("FK_GroupOperations_Organizations");

                entity.HasOne(d => d.PaymentOrder)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.PaymentOrderId)
                    .HasConstraintName("FK_groupOperations_paymentOrder");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .HasConstraintName("FK_GroupOperations_PaymentSystems");

                entity.HasOne(d => d.SubType)
                    .WithMany(p => p.GroupOperationSubTypes)
                    .HasForeignKey(d => d.SubTypeId)
                    .HasConstraintName("FK_GroupOperations_FasetItems__subTypeId");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.GroupOperationTypes)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperations_FasetItems__typeId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GroupOperations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperations_Users__userId");
            });

            modelBuilder.Entity<GroupOperationSequence>(entity =>
            {
                entity.HasKey(e => new { e.ParentId, e.ChildId })
                    .HasName("PK_GroupOperationsSequence");

                entity.ToTable("GroupOperationSequences", "sn");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.GroupOperationSequenceChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperationSequences_GroupOperations1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.GroupOperationSequenceParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperationSequences_GroupOperations");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.GroupOperationSequences)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupOperationSequences_FasetItems");
            });

            modelBuilder.Entity<GroupOperationSequencesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperationSequencesView", "sn");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<GroupOperationsRunning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GroupOperationsRunning", "sn");

                entity.HasIndex(e => new { e.SessionId, e.StartTime }, "IX_GroupOperationsRunning")
                    .IsClustered();

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("startTime");
            });

            modelBuilder.Entity<GroupOperationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperationsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountsCount).HasColumnName("accountsCount");

                entity.Property(e => e.ArrivalBankAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("arrivalBankAccount");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("docDate");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("docName");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsProcessedByHand).HasColumnName("isProcessedByHand");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("login_name");

                entity.Property(e => e.OldId).HasColumnName("oldId");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentAgentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgentName");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(13, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordDate");

                entity.Property(e => e.ReesterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterTypeName");

                entity.Property(e => e.RequestServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("requestServiceCode");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subServiceName");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.SubTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<GroupOperationsViewNoOriginalSumm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupOperationsView_noOriginalSumm", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountsCount).HasColumnName("accountsCount");

                entity.Property(e => e.ArrivalBankAccount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("arrivalBankAccount");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CourtProcessNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("courtProcessNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DocDate)
                    .HasColumnType("datetime")
                    .HasColumnName("docDate");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("docName");

                entity.Property(e => e.DocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsProcessedByHand).HasColumnName("isProcessedByHand");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("login_name");

                entity.Property(e => e.OldId).HasColumnName("oldId");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentAgentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgentName");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordDate");

                entity.Property(e => e.ReesterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterTypeName");

                entity.Property(e => e.RequestServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("requestServiceCode");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subServiceName");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.SubTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<GroupsAndOption>(entity =>
            {
                entity.ToTable("GroupsAndOptions", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IdGroup).HasColumnName("idGroup");

                entity.Property(e => e.IdOption).HasColumnName("idOption");

                entity.Property(e => e.IsActiv).HasColumnName("isActiv");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.ShowMessageOutOfPeriod).HasColumnName("showMessageOutOfPeriod");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.IdGroupNavigation)
                    .WithMany(p => p.GroupsAndOptions)
                    .HasForeignKey(d => d.IdGroup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupsAndOptions_idGroups");

                entity.HasOne(d => d.IdOptionNavigation)
                    .WithMany(p => p.GroupsAndOptions)
                    .HasForeignKey(d => d.IdOption)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GroupsAndOptions_idOptions");
            });

            modelBuilder.Entity<GroupsAndOptionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GroupsAndOptionsView", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdGroup).HasColumnName("idGroup");

                entity.Property(e => e.IdLevel).HasColumnName("idLevel");

                entity.Property(e => e.IdObject).HasColumnName("idObject");

                entity.Property(e => e.IdOption).HasColumnName("idOption");

                entity.Property(e => e.IsActiv).HasColumnName("isActiv");

                entity.Property(e => e.NameGroup)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nameGroup");

                entity.Property(e => e.NameLevel)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nameLevel");

                entity.Property(e => e.NameOption)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nameOption");
            });

            modelBuilder.Entity<HeatPointsTplu>(entity =>
            {
                entity.ToTable("HeatPointsTPlus", "sn_ul");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BuildingGuid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("buildingGUID");

                entity.Property(e => e.Fiascode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FIASCode");

                entity.Property(e => e.HeatpointGuid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("heatpointGUID");
            });

            modelBuilder.Entity<HeavyReport>(entity =>
            {
                entity.ToTable("HeavyReports", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.ToTable("Holidays", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateHoliday)
                    .HasColumnType("datetime")
                    .HasColumnName("dateHoliday");

                entity.Property(e => e.NameHoliday)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("nameHoliday");
            });

            modelBuilder.Entity<HolidayAndWeekend>(entity =>
            {
                entity.HasKey(e => e.DateHoliday)
                    .HasName("PK__HolidayAndWeekends");

                entity.ToTable("HolidayAndWeekends", "sn");

                entity.HasIndex(e => e.Id, "IX__HolidayAndWeekends__Id");

                entity.Property(e => e.DateHoliday)
                    .HasColumnType("datetime")
                    .HasColumnName("dateHoliday");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NameHoliday)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nameHoliday");

                entity.Property(e => e.OffsetToWorkingDay).HasColumnName("offsetToWorkingDay");
            });

            modelBuilder.Entity<House>(entity =>
            {
                entity.ToTable("Houses", "sn");

                entity.HasIndex(e => e.AdrId, "IUX_Houses__adrId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AdrId)
                    .HasColumnName("adrId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы LocalAddresses");

                entity.Property(e => e.AnotherSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("anotherSquare")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.BoroughId)
                    .HasColumnName("boroughId")
                    .HasComment("Район населенного пункта");

                entity.Property(e => e.CanonicalTypeId)
                    .HasColumnName("canonicalTypeId")
                    .HasComment("Вид благоустройства");

                entity.Property(e => e.CargoLift).HasComment("Из них грузовых");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomKom).HasComment("Считать вознаграждение домкомам");

                entity.Property(e => e.DomKomTarif).HasComment("Тариф домкома");

                entity.Property(e => e.Entrance).HasComment("Количество подъездов");

                entity.Property(e => e.FireAlarmType).HasComment("Тип Пожарная сигнализация");

                entity.Property(e => e.FiredArea)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.FiveRoom).HasComment("Кол-во пятикомнатных");

                entity.Property(e => e.Flat).HasComment("Количество квартир");

                entity.Property(e => e.FlatWithGarbageChute)
                    .HasColumnName("flatWithGarbageChute")
                    .HasComment("Квартир с мусоропроводом");

                entity.Property(e => e.Floor).HasComment("Количество этажей");

                entity.Property(e => e.FloorArea)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.FormControl).HasComment("Форма правления. Ссылка на таблицу sn.FasetItem");

                entity.Property(e => e.FoundationType).HasComment("Тип фундамента");

                entity.Property(e => e.FourRoom).HasComment("Кол-во четырехкомнатных");

                entity.Property(e => e.GvsType).HasComment("Тип горячего водоснабжения");

                entity.Property(e => e.GvssystemType)
                    .HasColumnName("GVSSystemType")
                    .HasComment("Вид системы горячего водоснабжения");

                entity.Property(e => e.HeatingType).HasComment("Тип Отопления");

                entity.Property(e => e.HouseChief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseChief")
                    .HasComment("Старший по дому");

                entity.Property(e => e.HouseCodeFkr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseCodeFKR");

                entity.Property(e => e.HvsType).HasComment("Тип холодного водоснабжения");

                entity.Property(e => e.IdQuantity)
                    .HasColumnName("idQuantity")
                    .HasComment("Уникальный ID для выгрузки в АБР");

                entity.Property(e => e.ImprovementHeat).HasColumnName("improvementHeat");

                entity.Property(e => e.ImprovementWater).HasColumnName("improvementWater");

                entity.Property(e => e.IsDistributePaymentInCurrentHouseHolder).HasColumnName("isDistributePaymentInCurrentHouseHolder");

                entity.Property(e => e.KapRemMkdbankAccountOwnerOrgId).HasColumnName("kapRemMKDBankAccountOwnerOrgId");

                entity.Property(e => e.KapRemontYear).HasComment("Год проведения последнего кап ремонта");

                entity.Property(e => e.KitchensSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("kitchensSquare")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.KodCl)
                    .HasColumnName("kod_cl")
                    .HasDefaultValueSql("((-1))")
                    .HasComment("Не используется");

                entity.Property(e => e.KodObj)
                    .HasColumnName("kod_obj")
                    .HasDefaultValueSql("((-1))")
                    .HasComment("Не используется");

                entity.Property(e => e.KogKey).HasColumnName("kog_key");

                entity.Property(e => e.KzKey).HasColumnName("kz_key");

                entity.Property(e => e.Lift).HasComment("Количество лифтов в подъезде");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("livingSquare")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.LocalBroadcastingType).HasComment("Тип Местное радиовещание");

                entity.Property(e => e.MusorCount).HasComment("Количество мусоропроводов");

                entity.Property(e => e.Note)
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .HasColumnName("note")
                    .HasComment("Комментарий");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.OnDate)
                    .HasColumnType("datetime")
                    .HasComment("НА дату");

                entity.Property(e => e.OneRoom).HasComment("Кол-во однокомнатных");

                entity.Property(e => e.OverflowType).HasComment("Тип водоотведения");

                entity.Property(e => e.OverlapType).HasComment("Тип перекрытия");

                entity.Property(e => e.OwnershipType).HasComment("Вид собственности");

                entity.Property(e => e.PassLift).HasComment("Из них пассажирских");

                entity.Property(e => e.PassportNum).HasComment("Номер паспортного стола");

                entity.Property(e => e.PercentWear).HasComment("Процент износа");

                entity.Property(e => e.PrintServices)
                    .HasColumnName("printServices")
                    .HasComment("Параметры печати извещений");

                entity.Property(e => e.RoofType).HasComment("Тип Кровли");

                entity.Property(e => e.Series).HasComment("Номер серии");

                entity.Property(e => e.SewerType).HasComment("Тип канализации");

                entity.Property(e => e.StoveType).HasComment("Тип плиты");

                entity.Property(e => e.SubProvider)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subProvider")
                    .HasComment("Организация подрядчик");

                entity.Property(e => e.SudUc)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SudUchatokOrgId).HasColumnName("sudUchatokOrgId");

                entity.Property(e => e.TerritorialBailiffDepartmentId)
                    .HasColumnName("territorialBailiffDepartmentId")
                    .HasComment("Территориальный отдел судебных приставов");

                entity.Property(e => e.TerritorialManagement).HasComment("Территориальное общественное самоуправление");

                entity.Property(e => e.ThreeRoom).HasComment("Кол-во трехкомнатных");

                entity.Property(e => e.ToiletsSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("toiletsSquare")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.TotalArea)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Не используется. Перенесено в таблицу sn.HouseAreas");

                entity.Property(e => e.TotalStructuralVolume).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TvenquipmentType)
                    .HasColumnName("TVEnquipmentType")
                    .HasComment("Тип Телевизиционное оборудование");

                entity.Property(e => e.TwoRoom).HasComment("Кол-во двухкомнатных");

                entity.Property(e => e.Type).HasComment("Тип жилого дома");

                entity.Property(e => e.UtilizationType).HasComment("Тип Утилизация ТБО");

                entity.Property(e => e.WallType).HasComment("Материал стен");

                entity.Property(e => e.YearBegin).HasComment("Год ввода в эксплуатацию");

                entity.Property(e => e.YearPassport).HasComment("Тех. Паспорт. Год получения");

                entity.HasOne(d => d.Adr)
                    .WithOne(p => p.House)
                    .HasForeignKey<House>(d => d.AdrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Houses_LocalAddresses");

                entity.HasOne(d => d.Borough)
                    .WithMany(p => p.HouseBoroughs)
                    .HasForeignKey(d => d.BoroughId);

                entity.HasOne(d => d.CanonicalType)
                    .WithMany(p => p.HouseCanonicalTypes)
                    .HasForeignKey(d => d.CanonicalTypeId)
                    .HasConstraintName("FK_Houses_FasetItems_CanonicalTypeId");

                entity.HasOne(d => d.FireAlarmTypeNavigation)
                    .WithMany(p => p.HouseFireAlarmTypeNavigations)
                    .HasForeignKey(d => d.FireAlarmType);

                entity.HasOne(d => d.FormControlNavigation)
                    .WithMany(p => p.HouseFormControlNavigations)
                    .HasForeignKey(d => d.FormControl);

                entity.HasOne(d => d.FoundationTypeNavigation)
                    .WithMany(p => p.HouseFoundationTypeNavigations)
                    .HasForeignKey(d => d.FoundationType);

                entity.HasOne(d => d.GvsTypeNavigation)
                    .WithMany(p => p.HouseGvsTypeNavigations)
                    .HasForeignKey(d => d.GvsType);

                entity.HasOne(d => d.GvssystemTypeNavigation)
                    .WithMany(p => p.HouseGvssystemTypeNavigations)
                    .HasForeignKey(d => d.GvssystemType);

                entity.HasOne(d => d.HeatingTypeNavigation)
                    .WithMany(p => p.HouseHeatingTypeNavigations)
                    .HasForeignKey(d => d.HeatingType);

                entity.HasOne(d => d.HvsTypeNavigation)
                    .WithMany(p => p.HouseHvsTypeNavigations)
                    .HasForeignKey(d => d.HvsType);

                entity.HasOne(d => d.KapRemMkdbankAccountOwnerOrg)
                    .WithMany(p => p.HouseKapRemMkdbankAccountOwnerOrgs)
                    .HasForeignKey(d => d.KapRemMkdbankAccountOwnerOrgId)
                    .HasConstraintName("FK_Houses_kapRemMKDBankAccountOwnerOrgId");

                entity.HasOne(d => d.LocalBroadcastingTypeNavigation)
                    .WithMany(p => p.HouseLocalBroadcastingTypeNavigations)
                    .HasForeignKey(d => d.LocalBroadcastingType);

                entity.HasOne(d => d.OverflowTypeNavigation)
                    .WithMany(p => p.HouseOverflowTypeNavigations)
                    .HasForeignKey(d => d.OverflowType);

                entity.HasOne(d => d.OverlapTypeNavigation)
                    .WithMany(p => p.HouseOverlapTypeNavigations)
                    .HasForeignKey(d => d.OverlapType);

                entity.HasOne(d => d.OwnershipTypeNavigation)
                    .WithMany(p => p.HouseOwnershipTypeNavigations)
                    .HasForeignKey(d => d.OwnershipType);

                entity.HasOne(d => d.RoofTypeNavigation)
                    .WithMany(p => p.HouseRoofTypeNavigations)
                    .HasForeignKey(d => d.RoofType);

                entity.HasOne(d => d.SewerTypeNavigation)
                    .WithMany(p => p.HouseSewerTypeNavigations)
                    .HasForeignKey(d => d.SewerType);

                entity.HasOne(d => d.StoveTypeNavigation)
                    .WithMany(p => p.HouseStoveTypeNavigations)
                    .HasForeignKey(d => d.StoveType);

                entity.HasOne(d => d.SudNavigation)
                    .WithMany(p => p.HouseSudNavigations)
                    .HasForeignKey(d => d.Sud);

                entity.HasOne(d => d.TerritorialBailiffDepartment)
                    .WithMany(p => p.HouseTerritorialBailiffDepartments)
                    .HasForeignKey(d => d.TerritorialBailiffDepartmentId)
                    .HasConstraintName("FK_Houses_Organizations_TerritorialBailiffDepartment");

                entity.HasOne(d => d.TvenquipmentTypeNavigation)
                    .WithMany(p => p.HouseTvenquipmentTypeNavigations)
                    .HasForeignKey(d => d.TvenquipmentType);

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.HouseTypeNavigations)
                    .HasForeignKey(d => d.Type);

                entity.HasOne(d => d.UtilizationTypeNavigation)
                    .WithMany(p => p.HouseUtilizationTypeNavigations)
                    .HasForeignKey(d => d.UtilizationType);

                entity.HasOne(d => d.WallTypeNavigation)
                    .WithMany(p => p.HouseWallTypeNavigations)
                    .HasForeignKey(d => d.WallType);
            });

            modelBuilder.Entity<HouseApartmentCounter>(entity =>
            {
                entity.ToTable("HouseApartmentCounters", "sn");

                entity.HasIndex(e => e.ApartmentCounterId, "IX_HouseApartmentCounters_apartmentCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseApartmentCountersAllLinkageView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseApartmentCountersAllLinkageView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.ApartmentCounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCounterFromDate");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentCounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCounterToDate");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseApartmentCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseApartmentCountersView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.ApartmentCounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCounterFromDate");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.ApartmentCounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentCounterToDate");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaddleTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maddleTypeName");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseArea>(entity =>
            {
                entity.ToTable("HouseAreas", "sn");

                entity.HasIndex(e => new { e.HouseId, e.ServiceId, e.FromDate }, "IX__HouseAreas_houseId_serviceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Floor)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("floor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("heating");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("living");

                entity.Property(e => e.LivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("livingMKD");

                entity.Property(e => e.NotLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notLivingMKD");

                entity.Property(e => e.NotSubscribe)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notSubscribe");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("total");

                entity.Property(e => e.TotalMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("totalMKD");

                entity.Property(e => e.TotalOi)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("totalOI");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseAreas)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HouseAreas_houseId");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseAreas)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK__HouseAreas_serviceId");
            });

            modelBuilder.Entity<HouseAreasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseAreasView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .IsRequired()
                    .HasMaxLength(454)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Floor)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("floor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("heating");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("living");

                entity.Property(e => e.LivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("livingMKD");

                entity.Property(e => e.NotLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notLivingMKD");

                entity.Property(e => e.NotSubscribe)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notSubscribe");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("total");

                entity.Property(e => e.TotalMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("totalMKD");

                entity.Property(e => e.TotalOi)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("totalOI");
            });

            modelBuilder.Entity<HouseBankAccount>(entity =>
            {
                entity.HasKey(e => new { e.HouseId, e.BankAccountId, e.FromDate });

                entity.ToTable("HouseBankAccounts", "sn");

                entity.HasIndex(e => new { e.BankAccountId, e.HouseId }, "IX_HouseBankAccounts_bankAccountId_houseId");

                entity.HasIndex(e => e.Id, "IX_HouseBankAccounts_id")
                    .IsUnique();

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.HouseBankAccounts)
                    .HasForeignKey(d => d.BankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseBankAccounts_bankAccountId");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseBankAccounts)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseBankAccounts_houseId");
            });

            modelBuilder.Entity<HouseBankAccountServiceType>(entity =>
            {
                entity.HasKey(e => new { e.HouseBankAccountId, e.ServiceId });

                entity.ToTable("HouseBankAccountServiceTypes", "sn");

                entity.HasIndex(e => e.Id, "IX_HouseBankAccountST_id")
                    .IsUnique();

                entity.Property(e => e.HouseBankAccountId).HasColumnName("houseBankAccountId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.HouseBankAccount)
                    .WithMany(p => p.HouseBankAccountServiceTypes)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.HouseBankAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseBankAccountST_houseBankAccountId");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseBankAccountServiceTypes)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseBankAccountST_serviceId");
            });

            modelBuilder.Entity<HouseBankAccountServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseBankAccountServiceTypesView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseBankAccountId).HasColumnName("houseBankAccountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceLongName");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");
            });

            modelBuilder.Entity<HouseBankAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseBankAccountsView", "sn");

                entity.Property(e => e.BankAccountBik)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountBIK")
                    .IsFixedLength(true);

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.BankAccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.BankAccountOwnerId).HasColumnName("bankAccountOwnerId");

                entity.Property(e => e.BankAccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountOwnerName");

                entity.Property(e => e.BankAccountPropertyId).HasColumnName("bankAccountPropertyId");

                entity.Property(e => e.BankAccountPropertyIname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankAccountPropertyIName");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseBoiler>(entity =>
            {
                entity.ToTable("HouseBoilers", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseBoilers_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BoilerId).HasColumnName("boilerId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.HasOne(d => d.Boiler)
                    .WithMany(p => p.HouseBoilers)
                    .HasForeignKey(d => d.BoilerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HouseBoiler__boiler");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseBoilers)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HouseBoiler__house");
            });

            modelBuilder.Entity<HouseBoilersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseBoilersView", "sn");

                entity.Property(e => e.BoilerId).HasColumnName("boilerId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<HouseCanonicalType>(entity =>
            {
                entity.ToTable("HouseCanonicalTypes", "sn");

                entity.HasIndex(e => e.FromDate, "IX_HouseCanonicalTypes_fromDate");

                entity.HasIndex(e => e.ToDate, "IX_HouseCanonicalTypes_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseCanonicalTypes)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_houseCanonicalTypes_houseId");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.HouseCanonicalTypesNavigation)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_houseCanonicalTypes_FasetItems");
            });

            modelBuilder.Entity<HouseCounter>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.HouseCounterId })
                    .HasName("PK_cp_HouseCounters");

                entity.ToTable("HouseCounters", "cp");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.AdditionallyVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("additionallyVolume");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.CountersVolumeF03)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("countersVolumeF03");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseNormRateOdn)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseNormRateOdn");

                entity.Property(e => e.HouseRecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseRecalcVolume");

                entity.Property(e => e.HouseShare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseShare");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.HouseSquareOi)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareOI");

                entity.Property(e => e.HouseTotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseTotalSquareApartments");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Indication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indication");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IndicationDatePrev)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDatePrev");

                entity.Property(e => e.IndicationPrev)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indicationPrev");

                entity.Property(e => e.IsNotInternal)
                    .IsRequired()
                    .HasColumnName("isNotInternal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.ResourcesVolumeF03)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourcesVolumeF03");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalResidentsCount");

                entity.HasOne(d => d.HouseCounterNavigation)
                    .WithMany(p => p.HouseCounters)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cp_HouseCounters__houseCounterId");
            });

            modelBuilder.Entity<HouseCounter1>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.HouseCounterId })
                    .HasName("PK__noticeHouseCounters");

                entity.ToTable("HouseCounters", "notice");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.AdditionallyVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("additionallyVolume");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseNormRateOdn)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseNormRateOdn");

                entity.Property(e => e.HouseRecalcVolume)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseRecalcVolume");

                entity.Property(e => e.HouseShare)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseShare");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.HouseSquareLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareLiving");

                entity.Property(e => e.HouseSquareNotLiving)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareNotLiving");

                entity.Property(e => e.HouseSquareOi)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("houseSquareOI");

                entity.Property(e => e.HouseTotalSquareApartments)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("houseTotalSquareApartments");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Indication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indication");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IndicationDatePrev)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDatePrev");

                entity.Property(e => e.IndicationPrev)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("indicationPrev");

                entity.Property(e => e.IsNotInternal)
                    .IsRequired()
                    .HasColumnName("isNotInternal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.Property(e => e.TotalResidentsCount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalResidentsCount");
            });

            modelBuilder.Entity<HouseCounter2>(entity =>
            {
                entity.ToTable("HouseCounters", "sn");

                entity.HasIndex(e => new { e.HouseId, e.FromDate, e.ToDate }, "IX_HouseCounters_houseId_fromDate_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("factor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsAvailableAvgConsumption).HasColumnName("isAvailableAvgConsumption");

                entity.Property(e => e.IsInternal)
                    .HasColumnName("isInternal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsNotUnloadGis).HasColumnName("isNotUnloadGis");

                entity.Property(e => e.IsOwnedRso).HasColumnName("isOwnedRSO");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MeasureUnitsId).HasColumnName("measureUnitsId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.Note)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterId).HasColumnName("typeCounterId");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseCounter2s)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounters_Houses");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.HouseCounter2s)
                    .HasForeignKey(d => d.ModelId)
                    .HasConstraintName("FK_HouseCounters_CounterModels_Id");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseCounter2s)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_HouseCounters_ServiceTypes");

                entity.HasOne(d => d.StatusAskupeNavigation)
                    .WithMany(p => p.HouseCounter2StatusAskupeNavigations)
                    .HasForeignKey(d => d.StatusAskupe)
                    .HasConstraintName("FK_HouseCounters_FasetItems_Id");

                entity.HasOne(d => d.TypeCounter)
                    .WithMany(p => p.HouseCounter2TypeCounters)
                    .HasForeignKey(d => d.TypeCounterId)
                    .HasConstraintName("FK_HouseCounters_FasetItems");
            });

            modelBuilder.Entity<HouseCounterAccount>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountId, e.HouseCounterId })
                    .HasName("PK_noticeHouseCounterAccounts");

                entity.ToTable("HouseCounterAccounts", "notice");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormativVolume)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("normativVolume");
            });

            modelBuilder.Entity<HouseCounterAccountService>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_cp_HouseCounterAccountServices")
                    .IsClustered(false);

                entity.ToTable("HouseCounterAccountServices", "cp");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId, e.HouseCounterId }, "IX__cpHouseCounterAccountServices__period_accountServiceId_houseCounterId")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BigDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigDeltaForDay");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.DeltaFromLastPeriod)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("deltaFromLastPeriod");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseHeatCounterSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterSquare");

                entity.Property(e => e.HouseHeatCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterVolume");

                entity.Property(e => e.HouseHeatSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatSquare");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.Infoprintdelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoprintdelta");

                entity.Property(e => e.IsHouseValInfo).HasColumnName("isHouseValInfo");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSocial)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSocial");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.TotalApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalApartmentVolume");
            });

            modelBuilder.Entity<HouseCounterAccountService1>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__HouseCounterAccountServices")
                    .IsClustered(false);

                entity.ToTable("HouseCounterAccountServices", "notice");

                entity.HasIndex(e => new { e.Period, e.AccountServiceId, e.HouseCounterId }, "IX__HouseCounterAccountServices__period_accountServiceId_houseCounterId")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BidDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bidDeltaForDay");

                entity.Property(e => e.BigDeltaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigDeltaForDay");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersGvsM3Volume");

                entity.Property(e => e.CountersHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersHeatVolume");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.DeltaFromLastPeriod)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("deltaFromLastPeriod");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseHeatCounterSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterSquare");

                entity.Property(e => e.HouseHeatCounterVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatCounterVolume");

                entity.Property(e => e.HouseHeatSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseHeatSquare");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoHouseConsumptionGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionGiga");

                entity.Property(e => e.InfoHouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseConsumptionVolume");

                entity.Property(e => e.InfoHouseRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoHouseRateGiga");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.Infoprintdelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoprintdelta");

                entity.Property(e => e.IsHouseValInfo).HasColumnName("isHouseValInfo");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormSocial)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normSocial");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourceGvsM3volume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGvsM3Volume");

                entity.Property(e => e.ResourceHeatVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceHeatVolume");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.Square)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("square");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.TotalApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalApartmentVolume");
            });

            modelBuilder.Entity<HouseCounterAccountServicesViewWithMaxCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterAccountServicesViewWithMaxCharge", "notice");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("squareForDay");
            });

            modelBuilder.Entity<HouseCounterApartment>(entity =>
            {
                entity.ToTable("HouseCounterApartments", "sn");

                entity.HasIndex(e => new { e.HouseCounterId, e.FromDate, e.ToDate }, "IX_HouseCounterApartments__HouseCounterFromdateTodate");

                entity.HasIndex(e => e.ApartmentId, "IX_HouseCounterApartments__apartmentId");

                entity.HasIndex(e => e.HouseCounterId, "IX_HouseCounterApartments__houseCounterId");

                entity.HasIndex(e => new { e.HouseCounterId, e.ApartmentId, e.FromDate }, "UX_HouseCounterApartments__houseCounterId_apartmentId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Apartment)
                    .WithMany(p => p.HouseCounterApartments)
                    .HasForeignKey(d => d.ApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterApartments_Apartments");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterApartments)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterApartments_HouseCounters");
            });

            modelBuilder.Entity<HouseCounterApartmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterApartmentsView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.ApartmentFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentFromDate");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("apartmentToDate");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");
            });

            modelBuilder.Entity<HouseCounterArea>(entity =>
            {
                entity.ToTable("HouseCounterAreas", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Floor)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("floor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("heating");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("living");

                entity.Property(e => e.LivingMkd)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("livingMKD");

                entity.Property(e => e.NotLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notLivingMKD");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("total");

                entity.Property(e => e.TotalMkd)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("totalMKD");

                entity.Property(e => e.TotalOi)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("totalOI");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterAreas)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HCA__HouseCounters");
            });

            modelBuilder.Entity<HouseCounterAreasView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterAreasView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Floor)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("floor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Heating)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("heating");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Living)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("living");

                entity.Property(e => e.LivingMkd)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("livingMKD");

                entity.Property(e => e.NotLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("notLivingMKD");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("total");

                entity.Property(e => e.TotalMkd)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("totalMKD");

                entity.Property(e => e.TotalOi)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("totalOI");
            });

            modelBuilder.Entity<HouseCounterBetweenCheckInterval>(entity =>
            {
                entity.ToTable("HouseCounterBetweenCheckIntervals", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.NextCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextCheckDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PrevCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevCheckDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.HouseCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterBetweenCheckIntervals_HouseCounters");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.HouseCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_HouseCounterBetweenCheckIntervals_Organizations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.HouseCounterBetweenCheckIntervals)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterBetweenCheckIntervals_Users");
            });

            modelBuilder.Entity<HouseCounterBetweenCheckIntervalsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterBetweenCheckIntervalsView", "sn");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NextCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("nextCheckDate");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrganizationShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PrevCheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("prevCheckDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HouseCounterDeltaView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterDeltaView", "sn");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsNeedRecalc).HasColumnName("isNeedRecalc");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeShortName");
            });

            modelBuilder.Entity<HouseCounterDeltum>(entity =>
            {
                entity.ToTable("HouseCounterDelta", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_HouseCounterDelta_groupOperId");

                entity.HasIndex(e => new { e.HouseCounterId, e.ServiceTypeId, e.Period }, "IX_HouseCounterDelta_houseCounterId_serviceTypeId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.IsNeedRecalc).HasColumnName("isNeedRecalc");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.HouseCounterDelta)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterDelta_GroupOperations");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterDelta)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterDelta_HouseCounters");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseCounterDelta)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_HouseCounterDelta_ServiceTypes");
            });

            modelBuilder.Entity<HouseCounterHierarchy>(entity =>
            {
                entity.ToTable("HouseCounterHierarchy", "sn");

                entity.HasIndex(e => new { e.HouseCounterId, e.ParentHouseCounterId, e.FromDate }, "UX_HouseCounterHierarchy__houseCounterId_parentHouseCounterID_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.ParentHouseCounterId).HasColumnName("parentHouseCounterId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterHierarchyHouseCounters)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterHierarchy_HouseCounters");

                entity.HasOne(d => d.ParentHouseCounter)
                    .WithMany(p => p.HouseCounterHierarchyParentHouseCounters)
                    .HasForeignKey(d => d.ParentHouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterHierarchy_HouseCounters_Parent");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.HouseCounterHierarchies)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_HouseCounterHierarchy_Type");
            });

            modelBuilder.Entity<HouseCounterHierarchyView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterHierarchyView", "sn");

                entity.Property(e => e.AdressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adressName");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ParentCounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("parentCounterFromDate");

                entity.Property(e => e.ParentCounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("parentCounterToDate");

                entity.Property(e => e.ParentHouseCounterId).HasColumnName("parentHouseCounterId");

                entity.Property(e => e.ParentTypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("parentTypeCounterName");

                entity.Property(e => e.ParentcounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parentcounterName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<HouseCounterIndication>(entity =>
            {
                entity.ToTable("HouseCounterIndications", "sn");

                entity.HasIndex(e => new { e.CounterId, e.ValDate, e.ValType }, "IX_HouseCounterIndications_CounterId_valDate_valType");

                entity.HasIndex(e => e.GroupOperId, "IX_HouseCounterIndications_GroupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.ApatrmentCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apatrmentCountersVolume");

                entity.Property(e => e.ApatrmentNormativesVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apatrmentNormativesVolume");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseConsumptionVolume");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.IsUseNegativeValue)
                    .HasColumnName("isUseNegativeValue")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LimitFactor)
                    .HasColumnType("decimal(6, 4)")
                    .HasColumnName("limitFactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Note)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.TariffSquare)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("tariffSquare");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValDop)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valDop");

                entity.Property(e => e.ValInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valInfo");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.HouseCounterIndications)
                    .HasForeignKey(d => d.CounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterIndications_Counter");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.HouseCounterIndications)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_HouseCounterIndications_GroupOperations");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.HouseCounterIndications)
                    .HasForeignKey(d => d.OrgDocId)
                    .HasConstraintName("FK_HouseCounterIndications_OrgDocuments");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.HouseCounterIndicationTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_HouseCounterIndications_typeId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.HouseCounterIndications)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_houseCounterIndications_users");

                entity.HasOne(d => d.ValTypeNavigation)
                    .WithMany(p => p.HouseCounterIndicationValTypeNavigations)
                    .HasForeignKey(d => d.ValType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterIndications_valType");
            });

            modelBuilder.Entity<HouseCounterIndicationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterIndicationsView", "sn");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.ApatrmentCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apatrmentCountersVolume");

                entity.Property(e => e.ApatrmentNormativesVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apatrmentNormativesVolume");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseConsumptionVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseConsumptionVolume");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsUseNegativeValue).HasColumnName("isUseNegativeValue");

                entity.Property(e => e.LimitFactor)
                    .HasColumnType("decimal(6, 4)")
                    .HasColumnName("limitFactor");

                entity.Property(e => e.Note)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.TariffSquare)
                    .HasColumnType("decimal(12, 6)")
                    .HasColumnName("tariffSquare");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValDop)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valDop");

                entity.Property(e => e.ValInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valInfo");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<HouseCounterNonresidentialApartmentConsumption>(entity =>
            {
                entity.ToTable("HouseCounterNonresidentialApartmentConsumptions", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coment)
                    .IsUnicode(false)
                    .HasColumnName("coment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrencyConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currencyConsumption");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.NaturalConsuption)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("naturalConsuption");

                entity.Property(e => e.NonresidentialApartmentId).HasColumnName("nonresidentialApartmentId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterNonresidentialApartmentConsumptions)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentHouseCounterConsumptions_HouseCounters");

                entity.HasOne(d => d.NonresidentialApartment)
                    .WithMany(p => p.HouseCounterNonresidentialApartmentConsumptions)
                    .HasForeignKey(d => d.NonresidentialApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentHouseCounterConsumptions_NonresidentialApartments");
            });

            modelBuilder.Entity<HouseCounterService>(entity =>
            {
                entity.ToTable("HouseCounterServices", "sn");

                entity.HasIndex(e => new { e.HouseCounterId, e.ServiceId, e.FromDate }, "UX_HouseCounterServices__houseCounterId_serviceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.IsNorm)
                    .IsRequired()
                    .HasColumnName("isNorm")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterServices)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServices_HouseCounters");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseCounterServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServices_Services");
            });

            modelBuilder.Entity<HouseCounterServiceCounter>(entity =>
            {
                entity.ToTable("HouseCounterServiceCounters", "sn");

                entity.HasIndex(e => new { e.HouseCounterId, e.FromDate, e.ToDate, e.ServiceId }, "IX_HouseCounterServiceCounters_houseCounterId_fromDate_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterServiceCounters)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServiceCounters_HouseCounters");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseCounterServiceCounters)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServiceCounters_Services");
            });

            modelBuilder.Entity<HouseCounterServiceCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterServiceCountersView", "sn");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");
            });

            modelBuilder.Entity<HouseCounterServiceNorm>(entity =>
            {
                entity.ToTable("HouseCounterServiceNorm", "sn");

                entity.HasIndex(e => new { e.HouseCounterId, e.FromDate, e.ToDate, e.ServiceId }, "IX_HouseCounterServiceNorm_houseCounterId_fromDate_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.HouseCounterServiceNorms)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServiceNorm_HouseCounters");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseCounterServiceNorms)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseCounterServiceNorm_Services");
            });

            modelBuilder.Entity<HouseCounterServiceNormView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterServiceNormView", "sn");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");
            });

            modelBuilder.Entity<HouseCounterServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterServicesView", "sn");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsNorm).HasColumnName("isNorm");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");
            });

            modelBuilder.Entity<HouseCounterSuspension>(entity =>
            {
                entity.ToTable("HouseCounterSuspensions", "sn");

                entity.HasIndex(e => e.HouseCounterId, "IX_HouseCounterSuspensions_houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("additionalVolume");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.IsCalculateAverage).HasColumnName("isCalculateAverage");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeSuspensionId).HasColumnName("typeSuspensionId");
            });

            modelBuilder.Entity<HouseCounterSuspensionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCounterSuspensionsView", "sn");

                entity.Property(e => e.AdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("additionalVolume");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsCalculateAverage).HasColumnName("isCalculateAverage");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");

                entity.Property(e => e.TypeSuspensionId).HasColumnName("typeSuspensionId");

                entity.Property(e => e.TypeSuspensionName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeSuspensionName");
            });

            modelBuilder.Entity<HouseCountersIndicationsInputView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCountersIndicationsInputView", "sn");

                entity.Property(e => e.ApartmentCounterAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentCounterAdditionalVolume");

                entity.Property(e => e.ApartmentNormativeAdditionalVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNormativeAdditionalVolume");

                entity.Property(e => e.City)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsSaveDuplicateIndication).HasColumnName("isSaveDuplicateIndication");

                entity.Property(e => e.NewValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("newValDate");

                entity.Property(e => e.NewValType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("newValType");

                entity.Property(e => e.NewValTypeId).HasColumnName("newValTypeId");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.ServiceTypeAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeAlias");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Street)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserLogin)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValDop)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("valDop");

                entity.Property(e => e.ValType).HasColumnName("valType");

                entity.Property(e => e.ValTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("valTypeName");
            });

            modelBuilder.Entity<HouseCountersMop>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountServiceId, e.HouseCounterId })
                    .HasName("PK__HouseCountersMOP");

                entity.ToTable("HouseCountersMOP", "notice");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.Coefficient)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("coefficient");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("delta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");
            });

            modelBuilder.Entity<HouseCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseCountersView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(769)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.AdrParentId).HasColumnName("adrParentId");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsAvailableAvgConsumption).HasColumnName("isAvailableAvgConsumption");

                entity.Property(e => e.IsInternal).HasColumnName("isInternal");

                entity.Property(e => e.IsNotUnloadGis).HasColumnName("isNotUnloadGis");

                entity.Property(e => e.IsOwnedRso).HasColumnName("isOwnedRSO");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.LastCheckIntervalFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalFromDate");

                entity.Property(e => e.LastCheckIntervalToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastCheckIntervalToDate");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.MarkName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("markName");

                entity.Property(e => e.MeasureUnitsId).HasColumnName("measureUnitsId");

                entity.Property(e => e.MeasureUnitsName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("measureUnitsName");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.Note)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.StatusAskupename)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusASKUPEName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");
            });

            modelBuilder.Entity<HouseEntrance>(entity =>
            {
                entity.ToTable("HouseEntrances", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseEntrances_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Entrance)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("entrance");

                entity.Property(e => e.Floors).HasColumnName("floors");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseEntrances)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseEntrances_Houses");
            });

            modelBuilder.Entity<HouseEntrancesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseEntrancesView", "sn");

                entity.Property(e => e.Entrance)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("entrance");

                entity.Property(e => e.Floors).HasColumnName("floors");

                entity.Property(e => e.HouseAddrId).HasColumnName("houseAddrId");

                entity.Property(e => e.HouseAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseAddrName");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseType).HasColumnName("houseType");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<HouseExternalKpinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HouseExternalKPInfo", "ext");

                entity.Property(e => e.ComposedFullName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CostPerUnit)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ElementAmount)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ElementName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectId)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Percent)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Raised)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RepairCost)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.SnhouseAdrid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SNHouseAdrid");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HouseFormControl>(entity =>
            {
                entity.ToTable("HouseFormControls", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseFormControls_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FormControlId).HasColumnName("formControlId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.FormControl)
                    .WithMany(p => p.HouseFormControls)
                    .HasForeignKey(d => d.FormControlId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseFormControls_FasetItems");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseFormControls)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseFormControls_Houses");
            });

            modelBuilder.Entity<HouseFormControlsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseFormControlsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FormControlId).HasColumnName("formControlId");

                entity.Property(e => e.FormControlName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("formControlName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseGeneralContractor>(entity =>
            {
                entity.ToTable("HouseGeneralContractors", "sn");

                entity.HasIndex(e => e.GeneralContractorId, "IX_HouseGeneralContractors_GeneralContractorId");

                entity.HasIndex(e => new { e.HouseId, e.FromDate }, "IX_HouseGeneralContractors_houseId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.GeneralContractor)
                    .WithMany(p => p.HouseGeneralContractors)
                    .HasForeignKey(d => d.GeneralContractorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseGeneralContractors_Organizations");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseGeneralContractors)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseGeneralContractors_Houses");
            });

            modelBuilder.Entity<HouseGeneralContractorsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseGeneralContractorsView", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseHolder4PaymentSystemService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("HouseHolder4PaymentSystemServices", "pay");

                entity.Property(e => e.HouseHolderCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderCode");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PaymentAgent)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgent");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemServiceCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemServiceCode");

                entity.Property(e => e.ProviderCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("providerCode");

                entity.Property(e => e.ServiceHouseHolderCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("serviceHouseHolderCode");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<HouseHouseHolder>(entity =>
            {
                entity.ToTable("HouseHouseHolders", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseHouseHolders_houseId");

                entity.HasIndex(e => e.HouseHolderId, "IX_HouseHouseHoolders_houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsNotViewPersonalDate).HasColumnName("isNotViewPersonalDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.HouseHouseHolders)
                    .HasForeignKey(d => d.HouseHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseHouseHolders_Organizations");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseHouseHolders)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseHouseHolders_Houses");
            });

            modelBuilder.Entity<HouseHouseHoldersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseHouseHoldersView", "CRM");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.IsHouseHolder).HasColumnName("isHouseHolder");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseHouseHoldersView1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseHouseHoldersView", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsNotViewPersonalDate).HasColumnName("isNotViewPersonalDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseIndicationsFile>(entity =>
            {
                entity.ToTable("HouseIndicationsFiles", "acm");

                entity.HasIndex(e => e.CounterIndicationId, "IX_CounterIndicationsFiles__counterIndicationId_inc_streamFilesId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterIndicationId).HasColumnName("counterIndicationId");

                entity.Property(e => e.StreamFilesId).HasColumnName("streamFilesId");

                entity.HasOne(d => d.CounterIndication)
                    .WithMany(p => p.HouseIndicationsFiles)
                    .HasForeignKey(d => d.CounterIndicationId)
                    .HasConstraintName("FK_HouseIndicationsFiles_counterIndicationId");

                entity.HasOne(d => d.StreamFiles)
                    .WithMany(p => p.HouseIndicationsFiles)
                    .HasForeignKey(d => d.StreamFilesId)
                    .HasConstraintName("FK_HouseIndicationsFiles_streamFilesId");
            });

            modelBuilder.Entity<HouseOuterInformation>(entity =>
            {
                entity.HasKey(e => new { e.HouseId, e.OrganizationId, e.FromDate });

                entity.ToTable("HouseOuterInformations", "sn");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.2000',(104)))")
                    .HasComment("Дата начала действия договора");

                entity.Property(e => e.Field)
                    .IsUnicode(false)
                    .HasColumnName("field");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseOuterInformations)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseOuterInformations_Houses__houseId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.HouseOuterInformations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseOuterInformations_Organizations__organizationId");
            });

            modelBuilder.Entity<HousePasportNote>(entity =>
            {
                entity.ToTable("HousePasportNotes", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HousePasportNotes_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Caption)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("caption");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Note)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<HousePowerServiceEconomy>(entity =>
            {
                entity.ToTable("HousePowerServiceEconomies", "sn");

                entity.HasIndex(e => new { e.HouseId, e.Period }, "iux_HousePowerServiceEconomies_houseId_period")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EconomyResource)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("economyResource");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.PayResource)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("payResource");

                entity.Property(e => e.PaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paySumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<HousePropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HousePropertiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseAdrId).HasColumnName("houseAdrId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyValue");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<HouseProperty>(entity =>
            {
                entity.ToTable("HouseProperties", "sn");

                entity.HasIndex(e => new { e.HouseId, e.PropertyId, e.FromDate }, "IX_HouseProperties_houseId_propertyId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.HouseProperties)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_HouseProperties_OrgDocuments");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseProperties)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseProperties_Houses");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.HouseProperties)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseProperties_FasetItems");
            });

            modelBuilder.Entity<HouseRequest>(entity =>
            {
                entity.ToTable("HouseRequests", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseRequests_houseId");

                entity.HasIndex(e => e.ReqDate, "IX_HouseRequests_regDate");

                entity.HasIndex(e => e.ResidentId, "IX_HouseRequests_residentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AnswerDate)
                    .HasColumnType("datetime")
                    .HasColumnName("answerDate");

                entity.Property(e => e.AnswerNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("answerNumber");

                entity.Property(e => e.AnswerUserId).HasColumnName("answerUserId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonName");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reqDate");

                entity.Property(e => e.ResidentId).HasColumnName("residentId");

                entity.Property(e => e.ResidentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentName");

                entity.Property(e => e.ResidentTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentTel");

                entity.Property(e => e.ResultId).HasColumnName("resultId");

                entity.Property(e => e.ResultKind).HasColumnName("resultKind");

                entity.Property(e => e.ResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resultName");

                entity.Property(e => e.TimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("timeBegin");

                entity.Property(e => e.TimeDuration).HasColumnName("timeDuration");

                entity.Property(e => e.TimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("timeEnd");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.AnswerUser)
                    .WithMany(p => p.HouseRequests)
                    .HasForeignKey(d => d.AnswerUserId)
                    .HasConstraintName("FK_HouseRequests_AnswerUsers");
            });

            modelBuilder.Entity<HouseRequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseRequestsView", "sn");

                entity.Property(e => e.AnswerDate)
                    .HasColumnType("datetime")
                    .HasColumnName("answerDate");

                entity.Property(e => e.AnswerNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("answerNumber");

                entity.Property(e => e.AnswerUserId).HasColumnName("answerUserId");

                entity.Property(e => e.AnswerUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("answerUserName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.ReasonId).HasColumnName("reasonId");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonName");

                entity.Property(e => e.ReqDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reqDate");

                entity.Property(e => e.Resident)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("resident");

                entity.Property(e => e.ResidentId).HasColumnName("residentId");

                entity.Property(e => e.ResidentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentName");

                entity.Property(e => e.ResidentTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentTel");

                entity.Property(e => e.Result)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.ResultId).HasColumnName("resultId");

                entity.Property(e => e.ResultKind).HasColumnName("resultKind");

                entity.Property(e => e.ResultKindName)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("resultKindName");

                entity.Property(e => e.ResultName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resultName");

                entity.Property(e => e.TimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("timeBegin");

                entity.Property(e => e.TimeDuration).HasColumnName("timeDuration");

                entity.Property(e => e.TimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("timeEnd");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<HouseResourceProvider>(entity =>
            {
                entity.ToTable("HouseResourceProviders", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseResourceProviders_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseResourceProviders)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseResourceProviders_Houses");

                entity.HasOne(d => d.ResourceProvider)
                    .WithMany(p => p.HouseResourceProviders)
                    .HasForeignKey(d => d.ResourceProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseResourceProviders_Organizations");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseResourceProviders)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseResourceProviders_ServiceTypes");
            });

            modelBuilder.Entity<HouseResourceProvidersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseResourceProvidersView", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ResourceProviderCode).HasColumnName("resourceProviderCode");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderName");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseServiceNorm>(entity =>
            {
                entity.ToTable("HouseServiceNorms", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.Dateb, e.HouseId }, "IX_HouseServiceNorms_houseId_serviceId_fromDate");

                entity.HasIndex(e => new { e.HouseId, e.ServiceId }, "IX_HouseServiceNorms_houseId_serviceId_serviceTypeId_rate_dateb");

                entity.HasIndex(e => new { e.ServiceTypeId, e.Dateb, e.HouseId }, "IX_HouseServiceNorms_houseId_serviceTypeId_fromDate");

                entity.HasIndex(e => new { e.ServiceTypeId, e.ServiceId, e.Dateb, e.HouseId }, "IX_HouseServiceNorms_houseId_serviceTypeId_serviceId_fromDate");

                entity.HasIndex(e => e.ServiceId, "IX_HouseServiceNorms_serviceId_houseId_serviceTypeId_rate_dateb");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppartmentType)
                    .HasColumnName("appartmentType")
                    .HasDefaultValueSql("([sn].[FasetItem_GetId]('Тип квартирности дома','Многоквартирный жилой дом'))");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fromValue");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toValue");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.HasOne(d => d.AppartmentTypeNavigation)
                    .WithMany(p => p.HouseServiceNormAppartmentTypeNavigations)
                    .HasForeignKey(d => d.AppartmentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNorms_ApartmentTypes");

                entity.HasOne(d => d.ByUnit)
                    .WithMany(p => p.HouseServiceNormByUnits)
                    .HasForeignKey(d => d.ByUnitId)
                    .HasConstraintName("FK_HouseServiceNorms_ByUnits");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.HouseServiceNorms)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_HouseServiceNorms_Docs");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceNorms)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNorms_Houses");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseServiceNorms)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_HouseServiceNorms_Services");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseServiceNorms)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNorms_ServiceTypes");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.HouseServiceNormUnits)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNorms_Units");
            });

            modelBuilder.Entity<HouseServiceNormBenefit>(entity =>
            {
                entity.ToTable("HouseServiceNormBenefits", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseServiceNormBenefits_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.HouseServiceNormBenefits)
                    .HasForeignKey(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNormBenefits_Benefits");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceNormBenefits)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNormBenefits_Houses");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseServiceNormBenefits)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_HouseServiceNormBenefits_Services");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseServiceNormBenefits)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNormBenefits_ServiceTypes");
            });

            modelBuilder.Entity<HouseServiceNormType>(entity =>
            {
                entity.ToTable("HouseServiceNormTypes", "sn");

                entity.HasIndex(e => new { e.HouseServiceNormId, e.ApartmentPropertyId }, "IX__HouseServiceNormTypes_houseServiceNormId_apartmentPropertyId_inc_rate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.HouseServiceNormId).HasColumnName("houseServiceNormId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.HasOne(d => d.ApartmentProperty)
                    .WithMany(p => p.HouseServiceNormTypes)
                    .HasForeignKey(d => d.ApartmentPropertyId)
                    .HasConstraintName("FK_HouseServiceNormTypes_FasetItems");

                entity.HasOne(d => d.HouseServiceNorm)
                    .WithMany(p => p.HouseServiceNormTypes)
                    .HasForeignKey(d => d.HouseServiceNormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceNormTypes_HouseServiceNorm");
            });

            modelBuilder.Entity<HouseServiceNormTypesWithNormView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceNormTypesWithNormView", "sn");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseServiceNormId).HasColumnName("houseServiceNormId");

                entity.Property(e => e.HouseServiceNormTypeId).HasColumnName("houseServiceNormTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormTypeId).HasColumnName("normTypeId");

                entity.Property(e => e.NormTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normTypeName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<HouseServiceNormsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceNormsView", "sn");

                entity.Property(e => e.AppartmentType).HasColumnName("appartmentType");

                entity.Property(e => e.AppartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("appartmentTypeName");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.ByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("byUnitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fromValue");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentTypeName");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toValue");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<HouseServiceNormtypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("houseServiceNormtypesView", "sn");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.HouseServiceNormId).HasColumnName("houseServiceNormId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normTypeName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");
            });

            modelBuilder.Entity<HouseServiceProvider>(entity =>
            {
                entity.ToTable("HouseServiceProviders", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseServiceProviders_houseId");

                entity.HasIndex(e => e.ServiceProviderId, "IX_HouseServiceProviders_servceProviderId");

                entity.HasIndex(e => e.ServiceProviderId, "IX_HouseServiceProviders_servceProviderId_HouseidServicetypeid");

                entity.HasIndex(e => e.ServiceHouseHolderId, "IX_HouseServiceProviders_serviceHouseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ServiceHouseHolderId).HasColumnName("serviceHouseHolderId");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceProviders)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceProviders_Houses");

                entity.HasOne(d => d.ServiceHouseHolder)
                    .WithMany(p => p.HouseServiceProviderServiceHouseHolders)
                    .HasForeignKey(d => d.ServiceHouseHolderId)
                    .HasConstraintName("FK_HouseServiceProviders_Organizations_HouseHolder");

                entity.HasOne(d => d.ServiceProvider)
                    .WithMany(p => p.HouseServiceProviderServiceProviders)
                    .HasForeignKey(d => d.ServiceProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceProviders_Organizations");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseServiceProviders)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceProviders_ServiceTypes");
            });

            modelBuilder.Entity<HouseServiceProvidersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceProvidersView", "sn");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceHouseHolderCode).HasColumnName("serviceHouseHolderCode");

                entity.Property(e => e.ServiceHouseHolderId).HasColumnName("serviceHouseHolderId");

                entity.Property(e => e.ServiceHouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceHouseHolderName");

                entity.Property(e => e.ServiceProviderCode).HasColumnName("serviceProviderCode");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderName");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseServiceRestrictionsOnUnloading>(entity =>
            {
                entity.ToTable("HouseServiceRestrictionsOnUnloading", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceRestrictionsOnUnloadings)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceRestrictionsOnUnloading_Houses");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.HouseServiceRestrictionsOnUnloadings)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .HasConstraintName("FK_HouseServiceRestrictionsOnUnloading_OrgDocuments");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.HouseServiceRestrictionsOnUnloadings)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_HouseServiceRestrictionsOnUnloading_Organizations");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseServiceRestrictionsOnUnloadings)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_HouseServiceRestrictionsOnUnloading_Services");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseServiceRestrictionsOnUnloadings)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_HouseServiceRestrictionsOnUnloading_ServiceTypes");
            });

            modelBuilder.Entity<HouseServiceRestrictionsOnUnloadingView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceRestrictionsOnUnloadingView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseServiceSeason>(entity =>
            {
                entity.ToTable("HouseServiceSeasons", "sn");

                entity.HasIndex(e => new { e.HouseId, e.ServiceId, e.FromDate }, "IX_HouseServiceSeasons_houseId_serviceId_fromDate");

                entity.HasIndex(e => new { e.HouseId, e.ServiceId, e.ToDate }, "IX_HouseServiceSeasons_houseId_serviceId_toDate");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate }, "IX_HouseServiceSeasons_serviceId_fromDate");

                entity.HasIndex(e => new { e.ServiceId, e.ToDate }, "IX_HouseServiceSeasons_serviceId_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceSeasons)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceSeasons_HouseId");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseServiceSeasons)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceSeasons_ServiceId");
            });

            modelBuilder.Entity<HouseServiceSeasonsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceSeasonsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(288)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseServiceTariff>(entity =>
            {
                entity.ToTable("HouseServiceTariffs", "sn");

                entity.HasIndex(e => new { e.HouseId, e.ServiceId, e.FromDate }, "IX_HouseServiceTariffs_houseId_serviceId_fromDate");

                entity.HasIndex(e => new { e.HouseId, e.ServiceTypeId, e.FromDate }, "IX_HouseServiceTariffs_houseId_serviceTypeId_fromDate");

                entity.HasIndex(e => new { e.HouseId, e.ServiceTypeId, e.ServiceId, e.FromDate }, "IX_HouseServiceTariffs_houseId_serviceTypeId_serviceId_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.HouseServiceTariffs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_HouseServiceTariffs_OrgDocuments");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseServiceTariffs)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceTariffs_Houses");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseServiceTariffs)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_HouseServiceTariffs_Services");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseServiceTariffs)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceTariffs_ServiceTypes");
            });

            modelBuilder.Entity<HouseServiceTariffType>(entity =>
            {
                entity.ToTable("HouseServiceTariffTypes", "sn");

                entity.HasIndex(e => new { e.HouseServiceTariffId, e.TariffTypeId }, "IX_HouseServiceTariffTypes_houseServiceTariffId_tariffTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HouseServiceTariffId).HasColumnName("houseServiceTariffId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.HasOne(d => d.HouseServiceTariff)
                    .WithMany(p => p.HouseServiceTariffTypes)
                    .HasForeignKey(d => d.HouseServiceTariffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceTariffTypes_ServiceTariff");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.HouseServiceTariffTypes)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseServiceTariffTypes_FasetItems");
            });

            modelBuilder.Entity<HouseServiceTariffTypeWithTariffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceTariffTypeWithTariffsView", "sn");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseServiceTariffId).HasColumnName("houseServiceTariffId");

                entity.Property(e => e.HouseServiceTariffTypeId).HasColumnName("houseServiceTariffTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffTypeName");
            });

            modelBuilder.Entity<HouseServiceTariffTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceTariffTypesView", "sn");

                entity.Property(e => e.HouseServiceTariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("houseServiceTariffFromDate");

                entity.Property(e => e.HouseServiceTariffId).HasColumnName("houseServiceTariffId");

                entity.Property(e => e.HouseServiceTariffRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("houseServiceTariffRate");

                entity.Property(e => e.HouseServiceTariffToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("houseServiceTariffToDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffTypeName");
            });

            modelBuilder.Entity<HouseServiceTariffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseServiceTariffsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgDocumentIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("orgDocumentIssueDate");

                entity.Property(e => e.OrgDocumentNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentNumber");

                entity.Property(e => e.OrgDocumentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentTypeName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<HouseTreatyCommitment>(entity =>
            {
                entity.ToTable("HouseTreatyCommitments", "sn");

                entity.HasIndex(e => e.HouseId, "IX_HouseTreatyCommitments_houseId");

                entity.HasIndex(e => new { e.Period, e.HouseId }, "IX__HouseTreatyCommitments_period_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.ChargeAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("chargeAccounts");

                entity.Property(e => e.ChargeAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ChargeNotLiving)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("chargeNotLiving");

                entity.Property(e => e.CostsExecutor)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("costsExecutor");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.PaymentAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("paymentAccounts");

                entity.Property(e => e.PaymentAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RecalcAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcAccounts");

                entity.Property(e => e.RecalcAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.HouseTreatyCommitments)
                    .HasForeignKey(d => d.HouseHolderId)
                    .HasConstraintName("FC_HouseTreatyCommitments__houseHolderId");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.HouseTreatyCommitments)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HouseTreatyCommitments_Houses");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.HouseTreatyCommitments)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_HouseTreatyCommitments_Services");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.HouseTreatyCommitments)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FC_HouseTreatyCommitments__serviceTypeId");
            });

            modelBuilder.Entity<HouseTreatyCommitmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseTreatyCommitmentsView", "sn");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.ChargeAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("chargeAccounts");

                entity.Property(e => e.ChargeAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ChargeNotLiving)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("chargeNotLiving");

                entity.Property(e => e.CostsExecutor)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("costsExecutor");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("delta");

                entity.Property(e => e.HouseAdrId).HasColumnName("houseAdrId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseTotalArea)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("houseTotalArea");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PamentPersentNotLiving)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("pamentPersentNotLiving");

                entity.Property(e => e.PaymentAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("paymentAccounts");

                entity.Property(e => e.PaymentAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PaymentPersent)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("paymentPersent");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnType("datetime")
                    .HasColumnName("periodMonth");

                entity.Property(e => e.RecalcAccounts)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcAccounts");

                entity.Property(e => e.RecalcAccountsNotLiving).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<HouseTreatyCommitmentsWithPeriodsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseTreatyCommitmentsWithPeriodsView", "sn");

                entity.Property(e => e.CostsExecutor)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("costsExecutor");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseAdrId).HasColumnName("houseAdrId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseTotalArea)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("houseTotalArea");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PeriodMonth)
                    .HasColumnType("datetime")
                    .HasColumnName("periodMonth");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<HouseWithServiceTariffsServicesNewView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseWithServiceTariffsServicesNewView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.CanonicalTypeId).HasColumnName("canonicalTypeId");

                entity.Property(e => e.CanonicalTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalTypeName");

                entity.Property(e => e.FloorCount).HasColumnName("floorCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormApartmentTypeId).HasColumnName("normApartmentTypeId");

                entity.Property(e => e.NormApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normApartmentTypeName");

                entity.Property(e => e.NormByUnitId).HasColumnName("normByUnitId");

                entity.Property(e => e.NormByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normByUnitName");

                entity.Property(e => e.NormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("normFromDate");

                entity.Property(e => e.NormFromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normFromValue");

                entity.Property(e => e.NormId).HasColumnName("normId");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normToValue");

                entity.Property(e => e.NormUnitId).HasColumnName("normUnitId");

                entity.Property(e => e.NormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normUnitName");

                entity.Property(e => e.TariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffFromDate");

                entity.Property(e => e.TariffId).HasColumnName("tariffId");

                entity.Property(e => e.TariffRate)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("tariffRate");

                entity.Property(e => e.TariffServiceCode).HasColumnName("tariffServiceCode");

                entity.Property(e => e.TariffServiceId).HasColumnName("tariffServiceId");

                entity.Property(e => e.TariffServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceName");

                entity.Property(e => e.TariffServiceTypeId).HasColumnName("tariffServiceTypeId");

                entity.Property(e => e.TariffServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceTypeName");

                entity.Property(e => e.TariffToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffToDate");

                entity.Property(e => e.YearBuilt).HasColumnName("yearBuilt");
            });

            modelBuilder.Entity<HouseWithServiceTariffsServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseWithServiceTariffsServicesView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.CanonicalTypeId).HasColumnName("canonicalTypeId");

                entity.Property(e => e.CanonicalTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalTypeName");

                entity.Property(e => e.FloorCount).HasColumnName("floorCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormApartmentTypeId).HasColumnName("normApartmentTypeId");

                entity.Property(e => e.NormApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normApartmentTypeName");

                entity.Property(e => e.NormByUnitId).HasColumnName("normByUnitId");

                entity.Property(e => e.NormByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normByUnitName");

                entity.Property(e => e.NormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("normFromDate");

                entity.Property(e => e.NormFromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normFromValue");

                entity.Property(e => e.NormId).HasColumnName("normId");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normToValue");

                entity.Property(e => e.NormUnitId).HasColumnName("normUnitId");

                entity.Property(e => e.NormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normUnitName");

                entity.Property(e => e.TariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffFromDate");

                entity.Property(e => e.TariffId).HasColumnName("tariffId");

                entity.Property(e => e.TariffRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tariffRate");

                entity.Property(e => e.TariffServiceCode).HasColumnName("tariffServiceCode");

                entity.Property(e => e.TariffServiceId).HasColumnName("tariffServiceId");

                entity.Property(e => e.TariffServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceName");

                entity.Property(e => e.TariffServiceTypeId).HasColumnName("tariffServiceTypeId");

                entity.Property(e => e.TariffServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceTypeName");

                entity.Property(e => e.TariffToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffToDate");

                entity.Property(e => e.YearBuilt).HasColumnName("yearBuilt");
            });

            modelBuilder.Entity<HouseWithServiceTariffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HouseWithServiceTariffsView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.CanonicalTypeId).HasColumnName("canonicalTypeId");

                entity.Property(e => e.CanonicalTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalTypeName");

                entity.Property(e => e.FloorCount).HasColumnName("floorCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormApartmentTypeId).HasColumnName("normApartmentTypeId");

                entity.Property(e => e.NormApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normApartmentTypeName");

                entity.Property(e => e.NormByUnitId).HasColumnName("normByUnitId");

                entity.Property(e => e.NormByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normByUnitName");

                entity.Property(e => e.NormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("normFromDate");

                entity.Property(e => e.NormFromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normFromValue");

                entity.Property(e => e.NormId).HasColumnName("normId");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("normToValue");

                entity.Property(e => e.NormUnitId).HasColumnName("normUnitId");

                entity.Property(e => e.NormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("normUnitName");

                entity.Property(e => e.TariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffFromDate");

                entity.Property(e => e.TariffId).HasColumnName("tariffId");

                entity.Property(e => e.TariffRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("tariffRate");

                entity.Property(e => e.TariffServiceCode).HasColumnName("tariffServiceCode");

                entity.Property(e => e.TariffServiceId).HasColumnName("tariffServiceId");

                entity.Property(e => e.TariffServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceName");

                entity.Property(e => e.TariffServiceTypeId).HasColumnName("tariffServiceTypeId");

                entity.Property(e => e.TariffServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffServiceTypeName");

                entity.Property(e => e.TariffToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("tariffToDate");

                entity.Property(e => e.YearBuilt).HasColumnName("yearBuilt");
            });

            modelBuilder.Entity<HousesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HousesView", "sn");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.AnotherSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("anotherSquare");

                entity.Property(e => e.BoroughId).HasColumnName("boroughId");

                entity.Property(e => e.BoroughName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("boroughName");

                entity.Property(e => e.CanonicalTypeId).HasColumnName("canonicalTypeId");

                entity.Property(e => e.CanonicalTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalTypeName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FireAlarmTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fireAlarmTypeName");

                entity.Property(e => e.FiredArea).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FlatWithGarbageChute).HasColumnName("flatWithGarbageChute");

                entity.Property(e => e.FloorArea).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.FormControlTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("formControlTypeName");

                entity.Property(e => e.FoundationTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GasTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gasTypeName");

                entity.Property(e => e.GvsTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gvsTypeName");

                entity.Property(e => e.GvssystemType).HasColumnName("GVSSystemType");

                entity.Property(e => e.GvssystemTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GVSSystemTypeName");

                entity.Property(e => e.HeatingTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("heatingTypeName");

                entity.Property(e => e.HouseChief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseChief");

                entity.Property(e => e.HouseCodeFkr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseCodeFKR");

                entity.Property(e => e.HvsTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("hvsTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImprovementHeat).HasColumnName("improvementHeat");

                entity.Property(e => e.ImprovementHeatName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ImprovementWater).HasColumnName("improvementWater");

                entity.Property(e => e.ImprovementWaterName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsDistributePaymentInCurrentHouseHolder).HasColumnName("isDistributePaymentInCurrentHouseHolder");

                entity.Property(e => e.KapRemMkdbankAccountOwnerOrgId).HasColumnName("kapRemMKDBankAccountOwnerOrgId");

                entity.Property(e => e.KitchensSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("kitchensSquare");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.LocalBroadcastingTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("localBroadcastingTypeName");

                entity.Property(e => e.Note)
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.ObjectId).HasColumnName("objectId");

                entity.Property(e => e.OnDate).HasColumnType("datetime");

                entity.Property(e => e.OverFlowTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("overFlowTypeName");

                entity.Property(e => e.OverlapTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerShipTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerShipTypeName");

                entity.Property(e => e.PrintServices).HasColumnName("printServices");

                entity.Property(e => e.RaionSud)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RoofTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("roofTypeName");

                entity.Property(e => e.SewerTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sewerTypeName");

                entity.Property(e => e.StoveTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("stoveTypeName");

                entity.Property(e => e.SubProvider)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subProvider");

                entity.Property(e => e.SudUc)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SudUchatokOrgId).HasColumnName("sudUchatokOrgId");

                entity.Property(e => e.TerritorialBailiffDepartmentId).HasColumnName("territorialBailiffDepartmentId");

                entity.Property(e => e.TerritorialBailiffDepartmentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("territorialBailiffDepartmentName");

                entity.Property(e => e.TerritorialManagementName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToiletsSquare)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("toiletsSquare");

                entity.Property(e => e.TotalArea).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.TotalStructuralVolume).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TvenquipmentType).HasColumnName("TVEnquipmentType");

                entity.Property(e => e.TvenquipmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TVEnquipmentTypeName");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UtilizationTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("utilizationTypeName");

                entity.Property(e => e.WallTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("wallTypeName");
            });

            modelBuilder.Entity<IgnoreTest>(entity =>
            {
                entity.ToTable("IgnoreTests", "test");

                entity.HasIndex(e => e.Code, "IX_test_IgnoreTests_code");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reason");
            });

            modelBuilder.Entity<ImportFile>(entity =>
            {
                entity.ToTable("ImportFiles", "sn");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.HashSumm)
                    .IsRequired()
                    .HasMaxLength(3500)
                    .IsUnicode(false)
                    .HasColumnName("hashSumm");

                entity.Property(e => e.ObjectData)
                    .HasColumnName("objectData")
                    .HasComment("Содержимое файла в двоичном формате");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("objectName")
                    .HasComment("Путь загрузки файла");

                entity.Property(e => e.ObjectTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("objectTitle")
                    .HasComment("Имя файла с указанием формата");
            });

            modelBuilder.Entity<ImportFilesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ImportFilesView", "sn");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HashSumm)
                    .IsRequired()
                    .HasMaxLength(3500)
                    .IsUnicode(false)
                    .HasColumnName("hashSumm");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ObjectData).HasColumnName("objectData");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("objectName");

                entity.Property(e => e.ObjectTitle)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("objectTitle");
            });

            modelBuilder.Entity<Indication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Indications", "ascupe");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Loadid).HasColumnName("loadid");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.HasOne(d => d.Load)
                    .WithMany()
                    .HasForeignKey(d => d.Loadid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ascupeIndications_load");
            });

            modelBuilder.Entity<InterfaceDynamicParameter>(entity =>
            {
                entity.HasKey(e => new { e.ParentTypeId, e.ParentId, e.Name })
                    .HasName("PK__InterfaceDynamicParameters");

                entity.ToTable("InterfaceDynamicParameters", "sn");

                entity.HasIndex(e => e.Id, "IX_InterfaceDynamicParameters_id")
                    .IsUnique();

                entity.Property(e => e.ParentTypeId).HasColumnName("parentTypeId");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintType)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printType");

                entity.Property(e => e.Sort)
                    .HasColumnName("sort")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.HasOne(d => d.ParentType)
                    .WithMany(p => p.InterfaceDynamicParameters)
                    .HasForeignKey(d => d.ParentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterfaceDynamicParameters_parentTypeId");
            });

            modelBuilder.Entity<InterfaceDynamicParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InterfaceDynamicParametersView", "sn");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ParentTypeId).HasColumnName("parentTypeId");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintType)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printType");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<Jn>(entity =>
            {
                entity.ToTable("Jn", "arc");

                entity.HasIndex(e => e.AccountServiceId, "IX_arcJn__accountServiceId");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.Baseimport).HasColumnName("baseimport");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<Jn1>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Created, e.Period, e.CalcOperId, e.Id });

                entity.ToTable("Jn", "sn");

                entity.HasIndex(e => new { e.Created, e.AccountServiceId, e.CalcOperId }, "IX_Jn__accountServiceId_calcOperId");

                entity.HasIndex(e => new { e.Created, e.AccountServiceId, e.Period }, "IX_Jn__accountServiceId_period");

                entity.HasIndex(e => e.Created, "IX_Jn__created");

                entity.HasIndex(e => new { e.Created, e.GroupOperId, e.CalcOperId }, "IX_Jn__groupOperId_calcOperId");

                entity.HasIndex(e => e.Id, "UX_Jn_id")
                    .IsUnique();

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.Jn1s)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Jn_AccountServices");

                entity.HasOne(d => d.CalcOper)
                    .WithMany(p => p.Jn1s)
                    .HasForeignKey(d => d.CalcOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Jn_CalcOperations");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.Jn1s)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_Jn_GroupOperations");

                entity.HasOne(d => d.RemitteePaymentOrder)
                    .WithMany(p => p.Jn1s)
                    .HasForeignKey(d => d.RemitteePaymentOrderId)
                    .HasConstraintName("FK_Jn_RemitteePaymentOrders");
            });

            modelBuilder.Entity<JnAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnAccountsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.OperGroupId).HasColumnName("operGroupId");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(35, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<JnBankPaymentOrderOutput>(entity =>
            {
                entity.ToTable("JnBankPaymentOrderOutputs", "sn");

                entity.HasIndex(e => new { e.JnId, e.OrgId }, "jnId_orgId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.BankPaymentOrder)
                    .WithMany(p => p.JnBankPaymentOrderOutputs)
                    .HasForeignKey(d => d.BankPaymentOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBankPaymentOrderOutputs_BankPaymentOrderRecords");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnBankPaymentOrderOutputs)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBankPaymentOrderOutputs_Jn");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.JnBankPaymentOrderOutputs)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBankPaymentOrderOutputs_Organizations");
            });

            modelBuilder.Entity<JnBenefit>(entity =>
            {
                entity.ToTable("JnBenefits", "bc");

                entity.HasIndex(e => new { e.BenefitApartmentId, e.ServiceId }, "IX_bc_jnBenefits_benefitApartmentId_serviceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.HasOne(d => d.BenefitApartment)
                    .WithMany(p => p.JnBenefits)
                    .HasForeignKey(d => d.BenefitApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBenefits_BenefitApartments");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.JnBenefits)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_JnBenefits_services");
            });

            modelBuilder.Entity<JnBenefit1>(entity =>
            {
                entity.ToTable("JnBenefits", "sn");

                entity.HasIndex(e => new { e.BenefitId, e.BenefitOwnerId, e.ExploitingPersonId }, "IX_JnBenefits_benefitId_benefitOwnerId_exploitingPersonId");

                entity.HasIndex(e => e.BenefitOwnerId, "IX_JnBenefits_benefitOwnerId");

                entity.HasIndex(e => e.ExploitingPersonId, "IX_JnBenefits_exploitingPersonId");

                entity.HasIndex(e => e.JnId, "UX_JnBenefits_jnId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.JnBenefit1s)
                    .HasForeignKey(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBenefits_Benefits");

                entity.HasOne(d => d.BenefitOwner)
                    .WithMany(p => p.JnBenefit1BenefitOwners)
                    .HasForeignKey(d => d.BenefitOwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ExploitingPerson)
                    .WithMany(p => p.JnBenefit1ExploitingPeople)
                    .HasForeignKey(d => d.ExploitingPersonId);

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnBenefit1s)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnBenefits_Jn");
            });

            modelBuilder.Entity<JnBenefitAccount>(entity =>
            {
                entity.ToTable("JnBenefitAccounts", "bc");

                entity.HasIndex(e => e.BenefitAccountId, "JnBenefitAccounts__benefitAccountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.HasOne(d => d.BenefitAccount)
                    .WithMany(p => p.JnBenefitAccounts)
                    .HasForeignKey(d => d.BenefitAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnBenefitAccounts_BenefitAccounts");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.JnBenefitAccounts)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_JnBenefitAccounts_serviceTypes");
            });

            modelBuilder.Entity<JnBenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnBenefitsView", "sn");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitLongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitLongName");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.BenefitOwnerName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("benefitOwnerName");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.ExploutingPersonName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("exploutingPersonName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<JnCalcCounterParam>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.CounterId, e.RangeStart });

                entity.ToTable("JnCalcCounterParams", "sn");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionDelta");

                entity.Property(e => e.ConsumptionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionFactor");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnCalcCounterParams)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnCalcCounterParams_Jn");
            });

            modelBuilder.Entity<JnCalcHouseCounterParam>(entity =>
            {
                entity.ToTable("JnCalcHouseCounterParams", "sn");

                entity.HasIndex(e => e.JnId, "IX_JnCalcHouseCounterAccountServiceParams_jnId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentCounterVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentNonResidentialConsumption");

                entity.Property(e => e.ApartmentNonResidentialCounterVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialCounterVolume");

                entity.Property(e => e.ApartmentNonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentNonResidentialResourceVolume");

                entity.Property(e => e.ApartmentOdpuVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentOdpuVolume");

                entity.Property(e => e.ApartmentResourceVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("apartmentResourceVolume");

                entity.Property(e => e.ApartmentVolume)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("apartmentVolume");

                entity.Property(e => e.BranchCalc).HasColumnName("branchCalc");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientCalc)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientCalc");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("coefficientDays");

                entity.Property(e => e.CountersVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("countersVolume");

                entity.Property(e => e.DeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("deltaForDay");

                entity.Property(e => e.HouseCounterConsumption)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseCounterConsumption");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseDelta)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseDelta");

                entity.Property(e => e.HouseResidentsCount)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.InfoNormDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoNormDeltaForDay");

                entity.Property(e => e.InfoPrintDeltaForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("infoPrintDeltaForDay");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.NonResidentialConsumptions)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("nonResidentialConsumptions");

                entity.Property(e => e.NonResidentialCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialCountersVolume");

                entity.Property(e => e.NonResidentialResourceVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("nonResidentialResourceVolume");

                entity.Property(e => e.NoncoreHouseSquare)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("noncoreHouseSquare");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RecalcsVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("recalcsVolume");

                entity.Property(e => e.ResidentsCountForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("residentsCountForDay");

                entity.Property(e => e.ResourcesVolume)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("resourcesVolume");

                entity.Property(e => e.SquareForDay)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("squareForDay");

                entity.Property(e => e.SubCountersVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("subCountersVolume");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnCalcHouseCounterParams)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnCalcHouseCounterAccountServiceParams_Jn");
            });

            modelBuilder.Entity<JnCalcParam>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.RangeStart });

                entity.ToTable("JnCalcParams", "sn");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CoefficientDays)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("coefficientDays")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.ResidentVacationsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentVacationsCountInfo");

                entity.Property(e => e.ResidentsCountInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountInfo");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceAltGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneralDelta");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceDelta");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2Delta");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralDelta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneralDelta");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.TotalSquareInfo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("totalSquareInfo");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnCalcParams)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnCalcParams_Jn");
            });

            modelBuilder.Entity<JnCommission>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.PaymentAgentId, e.Created, e.CalcOperId, e.Id });

                entity.ToTable("JnCommissions", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_JnCommissions_groupOperId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.JnCommissions)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnCommissions_Accounts");

                entity.HasOne(d => d.CalcOper)
                    .WithMany(p => p.JnCommissions)
                    .HasForeignKey(d => d.CalcOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.JnCommissions)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_JnCommissions_GroupOperations");

                entity.HasOne(d => d.PaymentAgent)
                    .WithMany(p => p.JnCommissions)
                    .HasForeignKey(d => d.PaymentAgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<JnDeleted>(entity =>
            {
                entity.ToTable("JnDeleted", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<JnGroupView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnGroupView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.ApartmentAddrId).HasColumnName("apartmentAddrId");

                entity.Property(e => e.ApartmentAddrLevel).HasColumnName("apartmentAddrLevel");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.Bankrupt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bankrupt");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.CalcOperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcOperName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FinancialCenterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterName");

                entity.Property(e => e.FixedPayment)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("fixedPayment");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUnloadedProvider).HasColumnName("isUnloadedProvider");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OperGroupId).HasColumnName("operGroupId");

                entity.Property(e => e.OperGroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operGroupName");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(35, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceCodeName)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("serviceCodeName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<JnInfosView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnInfosView", "sn");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroComment)
                    .IsUnicode(false)
                    .HasColumnName("groComment");

                entity.Property(e => e.GroCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("groCreated");

                entity.Property(e => e.GroSubType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groSubType");

                entity.Property(e => e.GroType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groType");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operName");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<JnOrganization>(entity =>
            {
                entity.ToTable("JnOrganizations", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceSplitDocumentId).HasColumnName("serviceSplitDocumentId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<JnPenalty>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.Period });

                entity.ToTable("JnPenalty", "sn");

                entity.HasIndex(e => e.Id, "IX_JnPenalty_id")
                    .IsUnique();

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.DayCalcPenalty)
                    .HasColumnType("datetime")
                    .HasColumnName("dayCalcPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtCredit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtCredit");

                entity.Property(e => e.DebtDays).HasColumnName("debtDays");

                entity.Property(e => e.DebtDays130).HasColumnName("debtDays130");

                entity.Property(e => e.DebtDays170).HasColumnName("debtDays170");

                entity.Property(e => e.DebtDays300).HasColumnName("debtDays300");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(20, 6)")
                    .HasColumnName("penalty")
                    .HasComputedColumnSql("(([penalty130]+[penalty300])+[penalty170])", false);

                entity.Property(e => e.Penalty130)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty130");

                entity.Property(e => e.Penalty130Charge)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty130Charge");

                entity.Property(e => e.Penalty170)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty170");

                entity.Property(e => e.Penalty170Charge)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty170Charge");

                entity.Property(e => e.Penalty300)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty300");

                entity.Property(e => e.Penalty300Charge)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty300Charge");

                entity.Property(e => e.PenaltyCharge)
                    .HasColumnType("decimal(20, 6)")
                    .HasColumnName("penaltyCharge")
                    .HasComputedColumnSql("(([penalty130Charge]+[penalty300Charge])+[penalty170Charge])", false);

                entity.Property(e => e.PrefDayCalcPenalty)
                    .HasColumnType("datetime")
                    .HasColumnName("prefDayCalcPenalty");

                entity.Property(e => e.PrefDays).HasColumnName("prefDays");

                entity.Property(e => e.PrefDays130).HasColumnName("prefDays130");

                entity.Property(e => e.PrefDays170).HasColumnName("prefDays170");

                entity.Property(e => e.PrefDays300).HasColumnName("prefDays300");

                entity.Property(e => e.RefinancingRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("refinancingRate");

                entity.Property(e => e.Suspension).HasColumnName("suspension");

                entity.Property(e => e.UiFormula)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnPenalties)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnPenalty_jnId");
            });

            modelBuilder.Entity<JnPenaltyByDay>(entity =>
            {
                entity.HasKey(e => new { e.JnId, e.Period, e.PayDate });

                entity.ToTable("JnPenaltyByDays", "sn");

                entity.HasIndex(e => e.Id, "IX_JnPenaltyByDays_id")
                    .IsUnique();

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payDate");

                entity.Property(e => e.BeginDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginDebt");

                entity.Property(e => e.ByCoef)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("byCoef");

                entity.Property(e => e.CountDayAll).HasColumnName("countDayAll");

                entity.Property(e => e.DayCoef).HasColumnName("dayCoef");

                entity.Property(e => e.DayCount).HasColumnName("dayCount");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ModeCalc).HasColumnName("modeCalc");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.Split).HasColumnName("split");

                entity.HasOne(d => d.Jn)
                    .WithMany(p => p.JnPenaltyByDays)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .HasConstraintName("FK_JnPenaltyByDays_jnId");
            });

            modelBuilder.Entity<JnSaldo>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Period });

                entity.ToTable("JnSaldo", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_JnSaldo__groupOPerId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.Credit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("credit");

                entity.Property(e => e.Debit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debit");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Payment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("payment");

                entity.Property(e => e.Recalc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalc");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.JnSaldos)
                    .HasForeignKey(d => d.AccountServiceId)
                    .HasConstraintName("FK_JnSaldo_AccountServices");
            });

            modelBuilder.Entity<JnSaldoAccount>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.Period });

                entity.ToTable("JnSaldoAccounts", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Payment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("payment");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.JnSaldoAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_JnSaldo_Accounts");
            });

            modelBuilder.Entity<JnSaldoSumm>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Period });

                entity.ToTable("JnSaldoSumm", "sn");

                entity.HasIndex(e => e.Period, "IX_JnSaldoSumm_period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoOutOfBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoOutOfBalance");

                entity.Property(e => e.SaldoPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPeny");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.JnSaldoSumms)
                    .HasForeignKey(d => d.AccountServiceId)
                    .HasConstraintName("FK_JnSaldo2_AccountServices");
            });

            modelBuilder.Entity<JnSaldoSummUpdatedJn>(entity =>
            {
                entity.ToTable("JnSaldoSummUpdatedJn", "sn");

                entity.HasIndex(e => new { e.AccountServiceId, e.Period }, "IX_JnSaldoSummUpdatedJn_accountserviceId_period");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<JnSendPayment>(entity =>
            {
                entity.ToTable("JnSendPayments", "gis");

                entity.HasIndex(e => e.GroupOperId, "UIX_JnSendPayments_groupOperationId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.Comm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("comm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Input)
                    .IsUnicode(false)
                    .HasColumnName("input");

                entity.Property(e => e.Output)
                    .IsUnicode(false)
                    .HasColumnName("output");

                entity.Property(e => e.ProviderData)
                    .HasColumnType("datetime")
                    .HasColumnName("providerData");

                entity.Property(e => e.ProviderUno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("providerUno");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<JnSingleView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnSingleView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.ApartmentAddrId).HasColumnName("apartmentAddrId");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.CalcOperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcOperName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceCodeName)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("serviceCodeName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(24, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<JnStorno>(entity =>
            {
                entity.ToTable("JnStorno", "sn");

                entity.HasIndex(e => e.GroupOperId, "IX_JnStorno__groupOperId");

                entity.HasIndex(e => e.InitialJnId, "UX_JnStorno__initialJnId")
                    .IsUnique();

                entity.HasIndex(e => e.StornoJnId, "UX_JnStorno__stornoJnId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.InitialJnId).HasColumnName("initialJnId");

                entity.Property(e => e.StornoJnId).HasColumnName("stornoJnId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.JnStornos)
                    .HasForeignKey(d => d.GroupOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnStorno_GroupOperations");

                entity.HasOne(d => d.InitialJn)
                    .WithOne(p => p.JnStornoInitialJn)
                    .HasPrincipalKey<Jn1>(p => p.Id)
                    .HasForeignKey<JnStorno>(d => d.InitialJnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnStorno_Jn__initialJnId");

                entity.HasOne(d => d.StornoJn)
                    .WithOne(p => p.JnStornoStornoJn)
                    .HasPrincipalKey<Jn1>(p => p.Id)
                    .HasForeignKey<JnStorno>(d => d.StornoJnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnStorno_Jn__stornoJnId");
            });

            modelBuilder.Entity<JnSumUploadedProvider>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("JnSumUploadedProvider", "sn");

                entity.HasIndex(e => e.JnId, "IX_JnSumUploadedProvider__Jn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.HasOne(d => d.Jn)
                    .WithMany()
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.JnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JnSumUploadedProvider_Jn");
            });

            modelBuilder.Entity<JnSumm>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Period });

                entity.ToTable("JnSumms", "sn");

                entity.HasIndex(e => e.Id, "IX_JnSumms")
                    .IsUnique();

                entity.HasIndex(e => e.Period, "IX_JnSumms_period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Charge)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("charge");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HashPeriod).HasColumnName("hashPeriod");

                entity.Property(e => e.HashSaldoBegin).HasColumnName("hashSaldoBegin");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Payment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("payment");

                entity.Property(e => e.Recalc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalc");

                entity.Property(e => e.SaldoBegin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoBegin");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");
            });

            modelBuilder.Entity<JnView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.ApartmentAddrId).HasColumnName("apartmentAddrId");

                entity.Property(e => e.ApartmentAddrLevel).HasColumnName("apartmentAddrLevel");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.Bankrupt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bankrupt");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.CalcOperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcOperName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FinancialCenterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterName");

                entity.Property(e => e.FixedPayment)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("fixedPayment");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUnloadedProvider).HasColumnName("isUnloadedProvider");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(24, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceCodeName)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("serviceCodeName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<JnWithArchivView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("JnWithArchivView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.CalcOperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcOperName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FinancialCenterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsUnloadedProvider).HasColumnName("isUnloadedProvider");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(24, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceCodeName)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("serviceCodeName");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<KbkserviceType>(entity =>
            {
                entity.ToTable("KBKServiceTypes", "nsi");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FasetItem161Id).HasColumnName("fasetItem161Id");

                entity.Property(e => e.FasetItem162Id).HasColumnName("fasetItem162Id");

                entity.Property(e => e.FasetItem163Id).HasColumnName("fasetItem163Id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.FasetItem161)
                    .WithMany(p => p.KbkserviceTypeFasetItem161s)
                    .HasForeignKey(d => d.FasetItem161Id)
                    .HasConstraintName("FK_KBKServiceTypes_FasetItems_fasetItem161");

                entity.HasOne(d => d.FasetItem162)
                    .WithMany(p => p.KbkserviceTypeFasetItem162s)
                    .HasForeignKey(d => d.FasetItem162Id)
                    .HasConstraintName("FK_KBKServiceTypes_FasetItems_fasetItem162");

                entity.HasOne(d => d.FasetItem163)
                    .WithMany(p => p.KbkserviceTypeFasetItem163s)
                    .HasForeignKey(d => d.FasetItem163Id)
                    .HasConstraintName("FK_KBKServiceTypes_FasetItems_fasetItem163");
            });

            modelBuilder.Entity<KbkserviceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KBKServiceTypesView", "nsi");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetConsumerGroups)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetConsumerGroups");

                entity.Property(e => e.FasetExternalServiceTypes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetExternalServiceTypes");

                entity.Property(e => e.FasetItem161Id).HasColumnName("fasetItem161Id");

                entity.Property(e => e.FasetItem162Id).HasColumnName("fasetItem162Id");

                entity.Property(e => e.FasetItem163Id).HasColumnName("fasetItem163Id");

                entity.Property(e => e.FasetKbkarticles)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetKBKArticles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Law>(entity =>
            {
                entity.ToTable("Laws", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BudgetId).HasColumnName("budgetId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.Laws)
                    .HasForeignKey(d => d.BudgetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Laws_Budget");
            });

            modelBuilder.Entity<LawsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LawsView", "sn");

                entity.Property(e => e.BudgetFasetId).HasColumnName("budgetFasetId");

                entity.Property(e => e.BudgetFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("budgetFasetName");

                entity.Property(e => e.BudgetId).HasColumnName("budgetId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");
            });

            modelBuilder.Entity<Level>(entity =>
            {
                entity.ToTable("Levels", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Load>(entity =>
            {
                entity.ToTable("Loads", "ascupe");

                entity.HasIndex(e => e.Number, "loads_unique_number")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Filetype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("filetype");

                entity.Property(e => e.Hash)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("hash");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .HasDefaultValueSql("(user_id())");

                entity.Property(e => e.ValidationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("validationDate");
            });

            modelBuilder.Entity<LoadAbonent>(entity =>
            {
                entity.ToTable("Load_Abonents", "epd");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadAbonents");

                entity.HasIndex(e => new { e.Number, e.CalcPeriod }, "IX_epdLoadAbonents_IncData");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod, e.Number }, "IX_epdLoadAbonents_billId_calcPeriod_number");

                entity.HasIndex(e => new { e.CalcPeriod, e.AccountId }, "IX_epdLoadAbonents_calcPeriod_accountId");

                entity.HasIndex(e => e.ExtRecordId, "IX_epdLoadAbonents_extRecordId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AltCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("altCity");

                entity.Property(e => e.AltDistrictName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("altDistrictName");

                entity.Property(e => e.AltFlat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("altFlat");

                entity.Property(e => e.AltHouse)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("altHouse");

                entity.Property(e => e.AltPostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("altPostalIndex");

                entity.Property(e => e.AltStreet)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("altStreet");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.City)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConsumerType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("consumerType");

                entity.Property(e => e.DistrictName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("districtName");

                entity.Property(e => e.EntranceCount)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("entranceCount");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.FName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.Fio)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Flat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.FloorCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("floorCount");

                entity.Property(e => e.FormControl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("formControl");

                entity.Property(e => e.GisGkhaccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GisGKHAccountNumber");

                entity.Property(e => e.GisGkhgkunumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GisGKHGKUNumber");

                entity.Property(e => e.HaveExDoc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("haveExDoc");

                entity.Property(e => e.House)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseAllUsedArea)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("houseAllUsedArea");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseLiveMkd)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("houseLiveMKD");

                entity.Property(e => e.HouseLivingArea)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("houseLivingArea");

                entity.Property(e => e.HouseTotalArea)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("houseTotalArea");

                entity.Property(e => e.IsEmployer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isEmployer");

                entity.Property(e => e.LName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.LiveCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("liveCount");

                entity.Property(e => e.Living)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("living");

                entity.Property(e => e.LocalDistrictId).HasColumnName("localDistrictId");

                entity.Property(e => e.MName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Ownerid).HasColumnName("ownerid");

                entity.Property(e => e.ParentFiesCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parentFiesCode");

                entity.Property(e => e.PayUntilDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payUntilDate");

                entity.Property(e => e.PensCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pensCount");

                entity.Property(e => e.PersonBenefitCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("personBenefitCount");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.ProvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("provNumber");

                entity.Property(e => e.ResidentCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("residentCount");

                entity.Property(e => e.Room)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("room");

                entity.Property(e => e.RoomsCount)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("roomsCount");

                entity.Property(e => e.SocialNormElectro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("socialNormElectro");

                entity.Property(e => e.StateAbonent)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("stateAbonent");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.Street)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.SubDivId).HasColumnName("subDivId");

                entity.Property(e => e.SummExDoc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("summExDoc");

                entity.Property(e => e.Total)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("total");

                entity.Property(e => e.TypeControl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("typeControl");

                entity.Property(e => e.TypeHouse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeHouse");

                entity.Property(e => e.TypeSpaceMkd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeSpaceMKD");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");

                entity.Property(e => e.YearBuildHouse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("yearBuildHouse");
            });

            modelBuilder.Entity<LoadAddrConformance>(entity =>
            {
                entity.ToTable("Load_AddrConformance", "epd");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod, e.HouseId }, "IX_epdLoadAddrConformance_billId_calcPeriod_houseId");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadAddrConformance_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.District)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("district");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.FiasHouse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fiasHouse");

                entity.Property(e => e.FiasParent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fiasParent");

                entity.Property(e => e.House)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.LocalDistrictId).HasColumnName("localDistrictId");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.SubDivId).HasColumnName("subDivId");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");
            });

            modelBuilder.Entity<LoadCharge>(entity =>
            {
                entity.ToTable("Load_Charges", "epd");

                entity.HasIndex(e => new { e.Number, e.CalcPeriod }, "IX_epdLoadCharges_IncData");

                entity.HasIndex(e => e.Accountserviceid, "IX_epdLoadCharges_accountServiceId");

                entity.HasIndex(e => new { e.CalcPeriod, e.Accountid }, "IX_epdLoadCharges_calcPeriod_accountId");

                entity.HasIndex(e => new { e.CalcPeriod, e.Accountserviceid }, "IX_epdLoadCharges_calcPeriod_accountServiceId");

                entity.HasIndex(e => e.ExtRecordId, "IX_epdLoadCharges_extRecordId");

                entity.HasIndex(e => new { e.Number, e.CalcPeriod, e.BillId }, "IX_epdLoadCharges_number_calcPeriod_billId");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadCharges_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Accountid).HasColumnName("accountid");

                entity.Property(e => e.Accountserviceid).HasColumnName("accountserviceid");

                entity.Property(e => e.Benefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("benefit");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.Charge)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("charge");

                entity.Property(e => e.ChargeItogPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("chargeItogPeriod");

                entity.Property(e => e.ChargeItogPeriodOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("chargeItogPeriodODN");

                entity.Property(e => e.ChargeItogProvPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("chargeItogProvPeriod");

                entity.Property(e => e.ChargeItogProvPeriodOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("chargeItogProvPeriodODN");

                entity.Property(e => e.ChargeType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("chargeType");

                entity.Property(e => e.CodeSrvPrime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("codeSrvPrime");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConsDay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consDay");

                entity.Property(e => e.ConsHalfPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consHalfPik");

                entity.Property(e => e.ConsKeep)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consKeep");

                entity.Property(e => e.ConsNight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consNight");

                entity.Property(e => e.ConsPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consPik");

                entity.Property(e => e.ConsService)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consService");

                entity.Property(e => e.ConsServiceOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consServiceODN");

                entity.Property(e => e.CurrPeriodPayProvider)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("currPeriodPayProvider");

                entity.Property(e => e.CurrPeriodPenyProvider)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("currPeriodPenyProvider");

                entity.Property(e => e.DateLastPay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateLastPay");

                entity.Property(e => e.DebtPenyBegin)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("debtPenyBegin");

                entity.Property(e => e.ElectroBuyTariff)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_buyTariff");

                entity.Property(e => e.ElectroSellTariff)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_sellTariff");

                entity.Property(e => e.ElectroTarrifDay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifDay");

                entity.Property(e => e.ElectroTarrifDayOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifDayODN");

                entity.Property(e => e.ElectroTarrifHalfPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifHalfPik");

                entity.Property(e => e.ElectroTarrifNight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifNight");

                entity.Property(e => e.ElectroTarrifNightOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifNightODN");

                entity.Property(e => e.ElectroTarrifPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("electro_tarrifPik");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.IdAbBalance)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("idAbBalance");

                entity.Property(e => e.LastDateIncludePay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("lastDateIncludePay");

                entity.Property(e => e.MeasUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("measUnit");

                entity.Property(e => e.NormRate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("normRate");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("orgCode");

                entity.Property(e => e.OtherServiceTariff)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("otherServiceTariff");

                entity.Property(e => e.PayCurrPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("payCurrPeriod");

                entity.Property(e => e.PenyCurrPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("penyCurrPeriod");

                entity.Property(e => e.PenyPay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("penyPay");

                entity.Property(e => e.PenyRecalc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("penyRecalc");

                entity.Property(e => e.PercentDeff)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("percentDeff");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.ProvNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("provNumber");

                entity.Property(e => e.Recalc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("recalc");

                entity.Property(e => e.RecalcDateBegin)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("recalcDateBegin");

                entity.Property(e => e.RecalcDateEnd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("recalcDateEnd");

                entity.Property(e => e.RecalcOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("recalcODN");

                entity.Property(e => e.RecalcOdndateBegin)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("recalcODNDateBegin");

                entity.Property(e => e.RecalcOdndateEnd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("recalcODNDateEnd");

                entity.Property(e => e.RecalcProvider)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("recalcProvider");

                entity.Property(e => e.RecalcReason)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("recalcReason");

                entity.Property(e => e.RecalcReasonOdn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("recalcReasonODN");

                entity.Property(e => e.SaldoBegProvider)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoBegProvider");

                entity.Property(e => e.SaldoBegin)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoBegin");

                entity.Property(e => e.SaldoEnd)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndNoPeny)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoEndNoPeny");

                entity.Property(e => e.SaldoEndPeny)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoEndPeny");

                entity.Property(e => e.SaldoEndProvider)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoEndProvider");

                entity.Property(e => e.SaldoPeny)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("saldoPeny");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.Serviceid).HasColumnName("serviceid");

                entity.Property(e => e.SignControlMkd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("signControlMKD");

                entity.Property(e => e.SignRecalc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("signRecalc");

                entity.Property(e => e.SingServActivity)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("singServActivity");

                entity.Property(e => e.SizePayServiceCons)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sizePayServiceCons");

                entity.Property(e => e.SizePayServiceConsOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sizePayServiceConsODN");

                entity.Property(e => e.StampDuty)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("stampDuty");

                entity.Property(e => e.StatysId).HasColumnName("statysId");

                entity.Property(e => e.SumCalcAll)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcAll");

                entity.Property(e => e.SumCalcDay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcDay");

                entity.Property(e => e.SumCalcHalfPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcHalfPik");

                entity.Property(e => e.SumCalcKeep)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcKeep");

                entity.Property(e => e.SumCalcKeepOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcKeepODN");

                entity.Property(e => e.SumCalcNight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcNight");

                entity.Property(e => e.SumCalcPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sumCalcPik");

                entity.Property(e => e.SummChargeDeffOldPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summChargeDeffOldPeriod");

                entity.Property(e => e.SummChargeDeffPeriod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summChargeDeffPeriod");

                entity.Property(e => e.SummChargeInclDeffPerc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summChargeInclDeffPerc");

                entity.Property(e => e.SummDeffPercent)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summDeffPercent");

                entity.Property(e => e.SummLastPay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summLastPay");

                entity.Property(e => e.SummUpCoeff)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("summUpCoeff");

                entity.Property(e => e.TarifRate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tarifRate");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");

                entity.Property(e => e.ValueUpCoeff)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("valueUpCoeff");
            });

            modelBuilder.Entity<LoadCounter>(entity =>
            {
                entity.ToTable("Load_Counters", "epd");

                entity.HasIndex(e => new { e.Number, e.CalcPeriod }, "IX_epdLoadCounters_IncData");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod, e.Number }, "IX_epdLoadCounters_billId_calcPeriod_number");

                entity.HasIndex(e => e.ExtRecordId, "IX_epdLoadCounters_extRecordId");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadCounters_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaRecOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("areaRecODN");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConsKtu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consKTU");

                entity.Property(e => e.ConsOdnktu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consODNKTU");

                entity.Property(e => e.CountTarif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("countTarif");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterMark)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterMark");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumb");

                entity.Property(e => e.CounterType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterType");

                entity.Property(e => e.DateInstallCounter)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateInstallCounter");

                entity.Property(e => e.DateLastVerify)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateLastVerify");

                entity.Property(e => e.Dateb)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateb");

                entity.Property(e => e.Datee)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("datee");

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("edIzm");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.HaveSensHate)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("haveSensHate");

                entity.Property(e => e.HaveSensPresure)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("haveSensPresure");

                entity.Property(e => e.IdCounterInBill).HasColumnName("idCounterInBill");

                entity.Property(e => e.IsNewCounter)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isNewCounter");

                entity.Property(e => e.IsRemoteControl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isRemoteControl");

                entity.Property(e => e.NameSystemRemote)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nameSystemRemote");

                entity.Property(e => e.NormOne)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("normOne");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("orgCode");

                entity.Property(e => e.PrevIndicationValDate)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("prevIndicationValDate");

                entity.Property(e => e.PrevVal)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("prevVal");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.Razr)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("razr");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.SourceVal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sourceVal");

                entity.Property(e => e.StatusCounter)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("statusCounter");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.TransformationCoeff)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("transformationCoeff");

                entity.Property(e => e.TypeTu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("typeTU");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");

                entity.Property(e => e.Val)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("val");

                entity.Property(e => e.ValFromDay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valFromDay");

                entity.Property(e => e.ValFromHalfPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valFromHalfPik");

                entity.Property(e => e.ValFromNight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valFromNight");

                entity.Property(e => e.ValFromPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valFromPik");

                entity.Property(e => e.ValToDay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valToDay");

                entity.Property(e => e.ValToHalfPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valToHalfPik");

                entity.Property(e => e.ValToNight)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valToNight");

                entity.Property(e => e.ValToPik)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valToPik");

                entity.Property(e => e.Valdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("valdate");

                entity.Property(e => e.Volime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("volime");

                entity.Property(e => e.ZoneTarif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("zoneTarif");
            });

            modelBuilder.Entity<LoadHouseInfo>(entity =>
            {
                entity.ToTable("Load_HouseInfo", "epd");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod, e.HouseId }, "IX_epdLoadHouseInfo_billId_calcPeriod_houseId");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadHouseInfo_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AllConsumptionLiving)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("allConsumptionLiving");

                entity.Property(e => e.AllConsumptionNotLiving)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("allConsumptionNotLiving");

                entity.Property(e => e.AllConsumptionOdpu)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("allConsumptionODPU");

                entity.Property(e => e.AreaOdn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("areaODN");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConsOdnktu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("consODNKTU");

                entity.Property(e => e.ConsumptionOdnMkd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("consumptionODN_MKD");

                entity.Property(e => e.ConsumptionOdnNorm)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("consumptionODN_Norm");

                entity.Property(e => e.CounterDateb)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("counterDateb");

                entity.Property(e => e.CounterMark)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterMark");

                entity.Property(e => e.CounterNumb)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("counterNumb");

                entity.Property(e => e.CounterType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterType");

                entity.Property(e => e.DateInstCounter)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateInstCounter");

                entity.Property(e => e.DateLastControl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dateLastControl");

                entity.Property(e => e.District)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("district");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.FiasHouse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fiasHouse");

                entity.Property(e => e.FiasParent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fiasParent");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.House)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsHateSign)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isHateSign");

                entity.Property(e => e.IsPressureSign)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isPressureSign");

                entity.Property(e => e.IsRemoteControl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isRemoteControl");

                entity.Property(e => e.LocalDistrictId).HasColumnName("localDistrictId");

                entity.Property(e => e.MaxLimChargePay)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("maxLimChargePay");

                entity.Property(e => e.MeterType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("meterType");

                entity.Property(e => e.NameSystemRemote)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nameSystemRemote");

                entity.Property(e => e.NormOne)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("normOne");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex");

                entity.Property(e => e.PrevValOdpu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("prevValODPU");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("unit");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");

                entity.Property(e => e.ValOdpu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("valODPU");

                entity.Property(e => e.Volime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("volime");
            });

            modelBuilder.Entity<LoadProvider>(entity =>
            {
                entity.ToTable("Load_Providers", "epd");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod }, "IX_epdLoadProviders_billId_calcPeriod");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadProviders_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddrInfo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.AddrReal)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("addrReal");

                entity.Property(e => e.AddrWeb)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("addrWeb");

                entity.Property(e => e.Bik)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("bik");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExtRecordId).HasColumnName("extRecordId");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.KAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("kAccount");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("kpp");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OrgCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("orgCode");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgLegalFormUl)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgLegalFormUL");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.OrgType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgType");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.RAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("rAccount");

                entity.Property(e => e.RegDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("regDate");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");
            });

            modelBuilder.Entity<LoadProvidersSynonim>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LoadProviders_Synonim", "epd");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ImportCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("importCode");

                entity.Property(e => e.ImportName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("importName");

                entity.Property(e => e.LocalOrgId).HasColumnName("localOrgId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<LoadService>(entity =>
            {
                entity.ToTable("Load_Services", "epd");

                entity.HasIndex(e => new { e.BillId, e.CalcPeriod }, "IX_epdLoadServices_billId_calcPeriod");

                entity.HasIndex(e => e.ProcessingId, "IX_epdLoadServices_processingId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BillId).HasColumnName("billId");

                entity.Property(e => e.CalcPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("calcPeriod");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.Property(e => e.Serviceid).HasColumnName("serviceid");

                entity.Property(e => e.Servicetype).HasColumnName("servicetype");

                entity.Property(e => e.Servicetypeid).HasColumnName("servicetypeid");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.UnloadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unloadDate");
            });

            modelBuilder.Entity<LocalAddress>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_Addresses")
                    .IsClustered(false);

                entity.ToTable("LocalAddresses", "sn");

                entity.HasIndex(e => e.Code, "IXU_LocalAddresses_code")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Level, "IX_LocalAddresses_level_id");

                entity.HasIndex(e => e.Level, "IX_LocalAddresses_level_inc_id_parentId");

                entity.HasIndex(e => e.LocalDistrictsId, "IX_LocalAddresses_localDistrictsId");

                entity.HasIndex(e => e.LocalDistrictsInCityId, "IX_LocalAddresses_localDistrictsInCityId");

                entity.HasIndex(e => e.ParentId, "IX_LocalAddresses_parentId");

                entity.HasIndex(e => new { e.ParentId, e.Id }, "IX_LocalAddresses_parentId_id");

                entity.HasIndex(e => new { e.Name, e.Socr, e.ParentId, e.LocalDistrictsId }, "UX_LocalAddresses__name_socr_parentId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Adr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("adr")
                    .HasComment("Не используется");

                entity.Property(e => e.ClAdr)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_adr")
                    .HasComment("Не используется");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("code")
                    .HasComment("Код 16 зн: 4 зн. - гор. + 4 зн.- ул. + 4 зн.- дом + 4 зн. квартира");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.FiasName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasName");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("latitude")
                    .HasComment("Широта географическая");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Индекс определяющий тип объекта в поле name: 10 -город, 20 -улица, 30 -дом, 40 -квартира");

                entity.Property(e => e.LocalDistrictsId).HasColumnName("localDistrictsId");

                entity.Property(e => e.LocalDistrictsInCityId).HasColumnName("localDistrictsInCityId");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("longitude")
                    .HasComment("Долгота географическая");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название: Города, улицы, номер дома, номер квартиры");

                entity.Property(e => e.ObjAdr)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_adr")
                    .HasComment("Не используется");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parentId")
                    .HasComment("Идентификатор родителя. Ссылается на ID этой же таблицы. Определяет привязку улицы к городу, дома к улице, квартиры к дому");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalCode")
                    .HasComment("Почтовый индекс");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex")
                    .HasComment("Почтовый индекс");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("socr")
                    .HasComment("Определение объекта в поле name: г.(Город), ул.(улица), д(дом) ");

                entity.Property(e => e.SocrDot)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("socrDot");

                entity.HasOne(d => d.LocalDistricts)
                    .WithMany(p => p.LocalAddresses)
                    .HasForeignKey(d => d.LocalDistrictsId)
                    .HasConstraintName("FK_LocalAddresses_LocalDistricts");

                entity.HasOne(d => d.LocalDistrictsInCity)
                    .WithMany(p => p.LocalAddresses)
                    .HasForeignKey(d => d.LocalDistrictsInCityId)
                    .HasConstraintName("FK_LocalAddresses_LocalDistrictsInCity");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_LocalAddresses_LocalAddresses");
            });

            modelBuilder.Entity<LocalAddressOrganizationSynonym>(entity =>
            {
                entity.ToTable("LocalAddressOrganizationSynonyms", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LocalAddressId).HasColumnName("localAddressId");

                entity.Property(e => e.LocalAddressLevel).HasColumnName("localAddressLevel");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.Synonym)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("synonym");
            });

            modelBuilder.Entity<LocalAddressOrganizationSynonymsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalAddressOrganizationSynonymsView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LocalAddressId).HasColumnName("localAddressId");

                entity.Property(e => e.LocalAddressLevel).HasColumnName("localAddressLevel");

                entity.Property(e => e.LocalAddressName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("localAddressName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ParentLocalAddressName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("parentLocalAddressName");

                entity.Property(e => e.Synonym)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("synonym");
            });

            modelBuilder.Entity<LocalAddressSocr>(entity =>
            {
                entity.ToTable("LocalAddressSocrs", "sn");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Метка принадлежности к городу (10), улице(20), дому(30), квартире(40)");

                entity.Property(e => e.Socr)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("socr")
                    .HasComment("Сокращенное написание объекта (г,ул,д,кв)");
            });

            modelBuilder.Entity<LocalAddressSynonym>(entity =>
            {
                entity.ToTable("LocalAddressSynonyms", "sn");

                entity.HasIndex(e => e.ParentId, "IX_LocalAddressesSynonyms__parentId");

                entity.HasIndex(e => new { e.OrgId, e.Name, e.ParentLocalAddressId, e.DistrictName }, "UX_LocalAddressesSynonyms__orgId_parentLocalAddressId_name")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.DistrictName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("districtName");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Уровень определяющий принадлежность (город -10, улица- 20, дом - 30, квартира- 40)");

                entity.Property(e => e.LocalAddressId)
                    .HasColumnName("localAddressId")
                    .HasComment("сылка на уникальный идентификатор ID таблицы LocalAddresses");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название (город, улица, номер дома, номер квартиры) с определением (г., ул)");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parentId")
                    .HasComment("Ссылка на родителя внутри данной таблицы");

                entity.Property(e => e.ParentLocalAddressId)
                    .HasColumnName("parentLocalAddressId")
                    .HasComment("Ссылка на \"родителя\" по таблице LocalAddresses");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");

                entity.HasOne(d => d.LocalAddress)
                    .WithMany(p => p.LocalAddressSynonymLocalAddresses)
                    .HasForeignKey(d => d.LocalAddressId);

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.LocalAddressSynonyms)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocalAddressSynonyms_Organizations");

                entity.HasOne(d => d.ParentLocalAddress)
                    .WithMany(p => p.LocalAddressSynonymParentLocalAddresses)
                    .HasForeignKey(d => d.ParentLocalAddressId);
            });

            modelBuilder.Entity<LocalAddressSynonymsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalAddressSynonymsView", "sn");

                entity.Property(e => e.DistrictName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("districtName");

                entity.Property(e => e.FullName)
                    .HasMaxLength(656)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Level).HasColumnName("LEVEL");

                entity.Property(e => e.LocalAddressId).HasColumnName("localAddressId");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ParentLocalAddressId).HasColumnName("parentLocalAddressId");

                entity.Property(e => e.ProcessingId).HasColumnName("processingId");
            });

            modelBuilder.Entity<LocalAddressesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalAddressesView", "sn");

                entity.Property(e => e.Adr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.ClAdr)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_adr");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.FiasCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasCode");

                entity.Property(e => e.FiasName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fiasName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("latitude");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.LocalDistrictsId).HasColumnName("localDistrictsId");

                entity.Property(e => e.LocalDistrictsInCityId).HasColumnName("localDistrictsInCityId");

                entity.Property(e => e.LocalDistrictsInCityName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("localDistrictsInCityName");

                entity.Property(e => e.LocalDistrictsName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("localDistrictsName");

                entity.Property(e => e.LocalDistrictsParentName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("localDistrictsParentName");

                entity.Property(e => e.LocalUnionDistrictsName)
                    .IsRequired()
                    .HasMaxLength(302)
                    .IsUnicode(false)
                    .HasColumnName("localUnionDistrictsName");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("longitude");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ObjAdr)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_adr");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalCode");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("socr");
            });

            modelBuilder.Entity<LocalAddressesWithFullName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalAddressesWithFullName", "sn");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(646)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<LocalDistrict>(entity =>
            {
                entity.ToTable("LocalDistricts", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.DistrictAdministrationId).HasColumnName("districtAdministrationId");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.SupportDistrictId).HasColumnName("supportDistrictId");

                entity.HasOne(d => d.SupportDistrict)
                    .WithMany(p => p.LocalDistricts)
                    .HasForeignKey(d => d.SupportDistrictId)
                    .HasConstraintName("FK_LocalDistricts_supportDistrictId");
            });

            modelBuilder.Entity<LocalDistrictsInCity>(entity =>
            {
                entity.ToTable("LocalDistrictsInCity", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<LocalDistrictsInCityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalDistrictsInCityView", "sn");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<LocalTransaction>(entity =>
            {
                entity.ToTable("LocalTransactions", "pay");

                entity.HasIndex(e => e.RequestId, "UX_LocalTransactions_requestId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Logs", "ascupe");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.ApartmentCounterId).HasColumnName("apartmentCounterId");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CityId).HasColumnName("cityId");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Error)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Flat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.House)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.RecordId).HasColumnName("recordId");

                entity.Property(e => e.Street)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.StreetId).HasColumnName("streetId");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");
            });

            modelBuilder.Entity<Log1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Logs", "audit");

                entity.HasIndex(e => new { e.TableId, e.UpdateDate }, "IX_AuditLogs__tableId_UpdateDate")
                    .IsClustered();

                entity.HasIndex(e => e.ActionId, "IX_AuditLogs_actionId");

                entity.HasIndex(e => e.AuditId, "IX_AuditLogs_auditId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AuditId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AuditID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.NewValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OldValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryKeyValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogCreateTable>(entity =>
            {
                entity.ToTable("Log_CreateTables", "audit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Eventdata)
                    .HasColumnType("xml")
                    .HasColumnName("eventdata");

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("tableName");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<LogGroupNoticeRenderedNotice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LogGroup_NoticeRenderedNotices", "audit");

                entity.Property(e => e.AuditId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("auditId");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName")
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<LogNoticeRenderedNotice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Log_NoticeRenderedNotices", "audit");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AuditId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("auditId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName")
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<LogRepBase>(entity =>
            {
                entity.HasKey(e => e.AuditId)
                    .HasName("PK_AuditLog_RepBase");

                entity.ToTable("Log_RepBase", "audit");

                entity.HasIndex(e => new { e.TableId, e.UpdateDate }, "IX__AuditLog_RepBase__tableId_updateDate");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.AreaOrgId).HasColumnName("areaOrgId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<LogReportTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Log_ReportTemplates", "audit");

                entity.Property(e => e.AccountProperty).HasColumnName("accountProperty");

                entity.Property(e => e.Addresses).HasColumnName("addresses");

                entity.Property(e => e.AdministrationDistrict).HasColumnName("administrationDistrict");

                entity.Property(e => e.ApartmentTypes).HasColumnName("apartmentTypes");

                entity.Property(e => e.AuditId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("auditId");

                entity.Property(e => e.BankAccounts).HasColumnName("bankAccounts");

                entity.Property(e => e.Benefits).HasColumnName("benefits");

                entity.Property(e => e.CalcOperationGroups).HasColumnName("calcOperationGroups");

                entity.Property(e => e.CanonicalServices).HasColumnName("canonicalServices");

                entity.Property(e => e.CityBorough).HasColumnName("cityBorough");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConvenienceTypes).HasColumnName("convenienceTypes");

                entity.Property(e => e.DatePeriod).HasColumnName("datePeriod");

                entity.Property(e => e.Debt).HasColumnName("debt");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.ExistsBenefitDiff).HasColumnName("existsBenefitDiff");

                entity.Property(e => e.FasetFilterId).HasColumnName("fasetFilterId");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.HouseTypes).HasColumnName("houseTypes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsAppending).HasColumnName("isAppending");

                entity.Property(e => e.IsAvailableInProvider).HasColumnName("isAvailableInProvider");

                entity.Property(e => e.IsCustomReport).HasColumnName("isCustomReport");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsGroupOperation).HasColumnName("isGroupOperation");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.Location)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.MinSumm).HasColumnName("minSumm");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgDocument).HasColumnName("orgDocument");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationAccountOwner).HasColumnName("organizationAccountOwner");

                entity.Property(e => e.OrgsApartmentArea).HasColumnName("orgsApartmentArea");

                entity.Property(e => e.OrgsBank).HasColumnName("orgsBank");

                entity.Property(e => e.OrgsCashlessTransferrers).HasColumnName("orgsCashlessTransferrers");

                entity.Property(e => e.OrgsFinancialCenters).HasColumnName("orgsFinancialCenters");

                entity.Property(e => e.OrgsHouseHolders).HasColumnName("orgsHouseHolders");

                entity.Property(e => e.OrgsPaymentAgents).HasColumnName("orgsPaymentAgents");

                entity.Property(e => e.OrgsResourceProviders).HasColumnName("orgsResourceProviders");

                entity.Property(e => e.OrgsServiceHouseHolders).HasColumnName("orgsServiceHouseHolders");

                entity.Property(e => e.OrgsServiceProviders).HasColumnName("orgsServiceProviders");

                entity.Property(e => e.PaymentAgentTypes).HasColumnName("paymentAgentTypes");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.ReesterTypes).HasColumnName("reesterTypes");

                entity.Property(e => e.ReportGroupId).HasColumnName("reportGroupId");

                entity.Property(e => e.ServiceApartmentTypeFasetItemId).HasColumnName("serviceApartmentTypeFasetItemId");

                entity.Property(e => e.ServiceTypes).HasColumnName("serviceTypes");

                entity.Property(e => e.Services).HasColumnName("services");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.SqlDefault)
                    .IsUnicode(false)
                    .HasColumnName("sqlDefault");

                entity.Property(e => e.Template)
                    .IsUnicode(false)
                    .HasColumnName("template");

                entity.Property(e => e.TemplateDefault)
                    .IsUnicode(false)
                    .HasColumnName("templateDefault");

                entity.Property(e => e.Terminals).HasColumnName("terminals");

                entity.Property(e => e.TextParameter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("textParameter");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.TypeRecalcReasons).HasColumnName("typeRecalcReasons");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("updateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("userName")
                    .HasDefaultValueSql("([sn].[User_GetName]())");

                entity.Property(e => e.Users).HasColumnName("users");

                entity.Property(e => e.WithRenderParameters).HasColumnName("withRenderParameters");

                entity.Property(e => e.WithSave).HasColumnName("withSave");

                entity.Property(e => e.WithoutBankrupt).HasColumnName("withoutBankrupt");

                entity.Property(e => e.WithoutClosesApartments).HasColumnName("withoutClosesApartments");
            });

            modelBuilder.Entity<LogsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LogsView", "audit");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AuditId).HasColumnName("AuditID");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.NewValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OldValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryKeyValue)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TableId).HasColumnName("tableId");

                entity.Property(e => e.TimeInterval)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("timeInterval");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LsMpa010222JnInsertDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_010222_Jn_insert_deleted", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<LsMpa110122GroupOperation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_110122_GroupOperations", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreditOrgId).HasColumnName("creditOrgId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.NoticeRecalcUseByPeriod).HasColumnName("noticeRecalcUseByPeriod");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordPaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordPaymentDate");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<LsMpa110122HouseCounterDeltum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_110122_HouseCounterDelta", "tmp");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Delta)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("delta");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsNeedRecalc).HasColumnName("isNeedRecalc");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<LsMpa110122Jn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_110122_Jn", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<LsMpa110122JnLishnee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_110122_Jn_lishnee", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<LsMpa110122RequestItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_110122_RequestItems", "tmp");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<LsMpa120122JnDel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_120122_Jn_del", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<LsMpa120122JnDel2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ls_mpa_120122_Jn_del2", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<MenuItem>(entity =>
            {
                entity.ToTable("MenuItems", "sn");

                entity.HasIndex(e => new { e.ParentId, e.Id }, "IX_MenuItems_parentId_id");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.NameItem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameItem")
                    .HasComment("Название объекта");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parentId")
                    .HasComment("Индентификатор родителя в котором находится объект");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName")
                    .HasComment("Тип объекта (вкладка, группа кнопок, кнопка)");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("valueName")
                    .HasComment("Ссылка на объект (путь)");

                entity.Property(e => e.Visible)
                    .HasColumnName("visible")
                    .HasComment("Видимость объекта");
            });

            modelBuilder.Entity<MenuItemGroup>(entity =>
            {
                entity.ToTable("MenuItemGroups", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GroupItem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupItem");
            });

            modelBuilder.Entity<MenuItemGroupContent>(entity =>
            {
                entity.HasKey(e => new { e.MenuItemGroupId, e.MenuItemId });

                entity.ToTable("MenuItemGroupContents", "sn");

                entity.HasIndex(e => e.Id, "IX_MenuItemGroupContents_id")
                    .IsUnique();

                entity.Property(e => e.MenuItemGroupId).HasColumnName("menuItemGroupId");

                entity.Property(e => e.MenuItemId).HasColumnName("menuItemId");

                entity.Property(e => e.Enable).HasColumnName("enable");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.MenuItemGroup)
                    .WithMany(p => p.MenuItemGroupContents)
                    .HasForeignKey(d => d.MenuItemGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuItemGroupContents_MenuItemGroups");

                entity.HasOne(d => d.MenuItem)
                    .WithMany(p => p.MenuItemGroupContents)
                    .HasForeignKey(d => d.MenuItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuItemGroupContents_MenuItems");
            });

            modelBuilder.Entity<MenuItemsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MenuItemsView", "sn");

                entity.Property(e => e.Enable).HasColumnName("enable");

                entity.Property(e => e.ExistChild).HasColumnName("existChild");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameItem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameItem");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("valueName");

                entity.Property(e => e.Visible).HasColumnName("visible");
            });

            modelBuilder.Entity<MenuItemsViewByCurrentUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MenuItemsViewByCurrentUser", "sn");

                entity.Property(e => e.Enable).HasColumnName("enable");

                entity.Property(e => e.ExistChild).HasColumnName("existChild");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameItem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameItem");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("valueName");

                entity.Property(e => e.Visible).HasColumnName("visible");
            });

            modelBuilder.Entity<MenuItemsViewWithParentName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MenuItemsViewWithParentName", "sn");

                entity.Property(e => e.ExistChild).HasColumnName("existChild");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NameItem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("nameItem");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ParentName)
                    .IsUnicode(false)
                    .HasColumnName("parentName");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("valueName");

                entity.Property(e => e.Visible).HasColumnName("visible");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Messages", "mpa");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ApplicationCode)
                    .HasMaxLength(50)
                    .HasComment("Код приложения.");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .HasComment("Код группы уведомлений");

                entity.Property(e => e.GroupName).HasMaxLength(255);

                entity.Property(e => e.Message1).HasColumnName("Message");

                entity.Property(e => e.NotificationExternalKey)
                    .ValueGeneratedOnAdd()
                    .HasComment("Идентификатор уведомления");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .HasComment("Тема сообщений");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(50)
                    .HasComment("Код типа уведомления");

                entity.Property(e => e.TypeName).HasMaxLength(255);

                entity.Property(e => e.UserDeviceId).HasColumnName("UserDeviceID");

                entity.Property(e => e.UserDeviceSystemTypeСode).HasComment(" Система моб. Устройства");

                entity.Property(e => e.UserDeviceVersion).HasMaxLength(255);

                entity.Property(e => e.UserDisplayName).HasMaxLength(50);

                entity.Property(e => e.UserEmail).HasMaxLength(255);

                entity.Property(e => e.UserFirebaseDeviceToken).HasMaxLength(255);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.ToTable("Modules", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ModuleRight>(entity =>
            {
                entity.ToTable("ModuleRights", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ModuleId).HasColumnName("moduleId");

                entity.Property(e => e.RightId).HasColumnName("rightId");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ModuleRights)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModuleRights_moduleId");

                entity.HasOne(d => d.Right)
                    .WithMany(p => p.ModuleRights)
                    .HasForeignKey(d => d.RightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ModuleRights_rightId");
            });

            modelBuilder.Entity<Node>(entity =>
            {
                entity.ToTable("Nodes", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CountCounter).HasColumnName("countCounter");

                entity.Property(e => e.CountRecalc).HasColumnName("countRecalc");

                entity.Property(e => e.CurrentCounter).HasColumnName("currentCounter");

                entity.Property(e => e.CurrentRecalc).HasColumnName("currentRecalc");

                entity.Property(e => e.CurrentRunCount).HasColumnName("currentRunCount");

                entity.Property(e => e.DbName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("dbName");

                entity.Property(e => e.MaxCounter).HasColumnName("maxCounter");

                entity.Property(e => e.MaxRecalc).HasColumnName("maxRecalc");

                entity.Property(e => e.MaxRunCount).HasColumnName("maxRunCount");

                entity.Property(e => e.NodeStatusId)
                    .HasColumnName("nodeStatusId")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SrvName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("srvName");

                entity.HasOne(d => d.NodeStatus)
                    .WithMany(p => p.Nodes)
                    .HasForeignKey(d => d.NodeStatusId)
                    .HasConstraintName("FK_vmcNodes_nodeStatusId");
            });

            modelBuilder.Entity<NodeService>(entity =>
            {
                entity.ToTable("NodeServices", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ipAddress");

                entity.Property(e => e.IpPort).HasColumnName("ipPort");

                entity.Property(e => e.IsEnabled).HasColumnName("isEnabled");

                entity.Property(e => e.NodeId).HasColumnName("nodeId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UrlAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("urlAddress");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.NodeServices)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_vmcNodeServices_typeId");
            });

            modelBuilder.Entity<NodeServiceType>(entity =>
            {
                entity.ToTable("NodeServiceTypes", "vmc");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<NodeServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NodeServicesView", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ipAddress");

                entity.Property(e => e.IpPort).HasColumnName("ipPort");

                entity.Property(e => e.IsEnabled).HasColumnName("isEnabled");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NodeId).HasColumnName("nodeId");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UrlAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("urlAddress");
            });

            modelBuilder.Entity<NodeStatus>(entity =>
            {
                entity.ToTable("NodeStatus", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<NodesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NodesView", "vmc");

                entity.Property(e => e.CountCounter).HasColumnName("countCounter");

                entity.Property(e => e.CountRecalc).HasColumnName("countRecalc");

                entity.Property(e => e.CurrentCounter).HasColumnName("currentCounter");

                entity.Property(e => e.CurrentRecalc).HasColumnName("currentRecalc");

                entity.Property(e => e.CurrentRunCount).HasColumnName("currentRunCount");

                entity.Property(e => e.DbName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("dbName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaxCounter).HasColumnName("maxCounter");

                entity.Property(e => e.MaxRecalc).HasColumnName("maxRecalc");

                entity.Property(e => e.MaxRunCount).HasColumnName("maxRunCount");

                entity.Property(e => e.NodeStatusId).HasColumnName("nodeStatusId");

                entity.Property(e => e.SrvName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("srvName");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<NonresidentialApartment>(entity =>
            {
                entity.ToTable("NonresidentialApartments", "sn");

                entity.HasIndex(e => e.HouseId, "IX_NonResidentialApartments_houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Number)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.House)
                    .WithMany(p => p.NonresidentialApartments)
                    .HasForeignKey(d => d.HouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartments_Houses");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.NonresidentialApartments)
                    .HasForeignKey(d => d.OwnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartments_Owners");
            });

            modelBuilder.Entity<NonresidentialApartmentHouseCounter>(entity =>
            {
                entity.ToTable("NonresidentialApartmentHouseCounters", "sn");

                entity.HasIndex(e => e.NonresidentialApartmentId, "IX_NonresidentialApartmentHouseCounters_nonresidentialApartmentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coment)
                    .IsUnicode(false)
                    .HasColumnName("coment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.NonresidentialApartmentId).HasColumnName("nonresidentialApartmentId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.HouseCounter)
                    .WithMany(p => p.NonresidentialApartmentHouseCounters)
                    .HasForeignKey(d => d.HouseCounterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentHouseCounters_HouseCounters");

                entity.HasOne(d => d.NonresidentialApartment)
                    .WithMany(p => p.NonresidentialApartmentHouseCounters)
                    .HasForeignKey(d => d.NonresidentialApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentHouseCounters_NonresidentialApartments");
            });

            modelBuilder.Entity<NonresidentialApartmentHouseCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NonresidentialApartmentHouseCountersView", "sn");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(304)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Coment)
                    .IsUnicode(false)
                    .HasColumnName("coment");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NonresidentialApartmentId).HasColumnName("nonresidentialApartmentId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCounterName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeCounterName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<NonresidentialApartmentPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NonresidentialApartmentPropertiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NonresidentialApartmentId).HasColumnName("nonresidentialApartmentId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.PropertyValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("propertyValue");
            });

            modelBuilder.Entity<NonresidentialApartmentProperty>(entity =>
            {
                entity.ToTable("NonresidentialApartmentProperties", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.NonresidentialApartmentId).HasColumnName("nonresidentialApartmentId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("propertyValue");

                entity.HasOne(d => d.NonresidentialApartment)
                    .WithMany(p => p.NonresidentialApartmentProperties)
                    .HasForeignKey(d => d.NonresidentialApartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentProperties_NonresidentialApartments");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.NonresidentialApartmentProperties)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NonresidentialApartmentProperties_FasetItems");
            });

            modelBuilder.Entity<NonresidentialApartmentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NonresidentialApartmentsView", "sn");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<NormsForElectric>(entity =>
            {
                entity.ToTable("NormsForElectric", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidentBenefits).HasColumnName("fromResidentBenefits");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.FromRooms).HasColumnName("fromRooms");

                entity.Property(e => e.FromSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("fromSquare");

                entity.Property(e => e.IsDayNightCounter)
                    .HasColumnName("isDayNightCounter")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IsLonePensioner)
                    .HasColumnName("isLonePensioner")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IsMop).HasColumnName("isMOP");

                entity.Property(e => e.IsSocial).HasColumnName("isSocial");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.IsWithHeater).HasColumnName("isWithHeater");

                entity.Property(e => e.IsWithLift).HasColumnName("isWithLift");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToResidentBenefits)
                    .HasColumnName("toResidentBenefits")
                    .HasDefaultValueSql("((9999))");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.ToRooms).HasColumnName("toRooms");

                entity.Property(e => e.ToSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("toSquare");

                entity.Property(e => e.UseMop).HasColumnName("useMop");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");

                entity.HasOne(d => d.ApartmentType)
                    .WithMany(p => p.NormsForElectrics)
                    .HasForeignKey(d => d.ApartmentTypeId);

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.NormsForElectrics)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_NormsForElectric_serviceId");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.NormsForElectrics)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_NormsForElectric_serviceTypeId");
            });

            modelBuilder.Entity<NormsForElectricView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NormsForElectricView", "sn");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromResidentBenefits).HasColumnName("fromResidentBenefits");

                entity.Property(e => e.FromResidents).HasColumnName("fromResidents");

                entity.Property(e => e.FromRooms).HasColumnName("fromRooms");

                entity.Property(e => e.FromSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("fromSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsDayNightCounter).HasColumnName("isDayNightCounter");

                entity.Property(e => e.IsLonePensioner).HasColumnName("isLonePensioner");

                entity.Property(e => e.IsMop).HasColumnName("isMop");

                entity.Property(e => e.IsSocial).HasColumnName("isSocial");

                entity.Property(e => e.IsWithCooker).HasColumnName("isWithCooker");

                entity.Property(e => e.IsWithHeater).HasColumnName("isWithHeater");

                entity.Property(e => e.IsWithLift).HasColumnName("isWithLift");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToResidentBenefits).HasColumnName("toResidentBenefits");

                entity.Property(e => e.ToResidents).HasColumnName("toResidents");

                entity.Property(e => e.ToRooms).HasColumnName("toRooms");

                entity.Property(e => e.ToSquare)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("toSquare");

                entity.Property(e => e.UseMop).HasColumnName("useMop");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<NormsForHeatingEnergy>(entity =>
            {
                entity.ToTable("NormsForHeatingEnergy", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<NormsForHeatingEnergyView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NormsForHeatingEnergyView", "sn");

                entity.Property(e => e.Adrname)
                    .IsUnicode(false)
                    .HasColumnName("adrname");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<NormsForTko>(entity =>
            {
                entity.ToTable("NormsForTKO", "sn");

                entity.HasIndex(e => e.DistrictId, "IX_NormsForTKO_districtId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaFrom)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("areaFrom");

                entity.Property(e => e.AreaTo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("areaTo");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DistrictId).HasColumnName("districtId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.NormsForTkos)
                    .HasForeignKey(d => d.DistrictId)
                    .HasConstraintName("FK_districtId");
            });

            modelBuilder.Entity<NormsForTkoview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NormsForTKOView", "sn");

                entity.Property(e => e.AreaFrom)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("areaFrom");

                entity.Property(e => e.AreaTo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("areaTo");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DistrictId).HasColumnName("districtId");

                entity.Property(e => e.DistrictName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("districtName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<NormsForWater>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NormsForWater", "sn");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Norma)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("norma");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeHeatId).HasColumnName("typeHeatId");

                entity.Property(e => e.TypeWaterId).HasColumnName("typeWaterId");
            });

            modelBuilder.Entity<NormsForWaterView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NormsForWaterView", "sn");

                entity.Property(e => e.CodeService).HasColumnName("codeService");

                entity.Property(e => e.CodeServiceType).HasColumnName("codeServiceType");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("heatName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Norma)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("norma");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeHeatId).HasColumnName("typeHeatId");

                entity.Property(e => e.TypeWaterId).HasColumnName("typeWaterId");

                entity.Property(e => e.WaterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("waterName");
            });

            modelBuilder.Entity<Notice>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.Id })
                    .HasName("PK_NoticeNotices");

                entity.ToTable("Notices", "notice");

                entity.HasIndex(e => e.Id, "IX_NoticeNotices_id")
                    .IsUnique();

                entity.HasIndex(e => new { e.Period, e.AccountId, e.HouseHolderId }, "IX_NoticeNotices_period_accountId_houseHolderId")
                    .IsUnique();

                entity.HasIndex(e => e.AccountId, "IX_noticeNotices__accountId");

                entity.HasIndex(e => new { e.ApartmentId, e.HouseHolderId }, "IX_noticeNotices_apartmentId_houseHolderId");

                entity.HasIndex(e => e.Barcode, "ix_NoticeServices_barcode");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AccountHouseHolderId).HasColumnName("accountHouseHolderId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AddressNameCityDistrict)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("addressNameCityDistrict");

                entity.Property(e => e.ApartmentHeatingSquare)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("apartmentHeatingSquare");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentLivingSquare)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("apartmentLivingSquare");

                entity.Property(e => e.ApartmentOwnerCount).HasColumnName("apartmentOwnerCount");

                entity.Property(e => e.ApartmentPropertys)
                    .IsUnicode(false)
                    .HasColumnName("apartmentPropertys");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentTypeName");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.BenefitResidentsCount).HasColumnName("benefitResidentsCount");

                entity.Property(e => e.CommunalApartment).HasColumnName("communalApartment");

                entity.Property(e => e.CountersCount).HasColumnName("countersCount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedActionId).HasColumnName("createdActionId");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DisableGenerate).HasColumnName("disableGenerate");

                entity.Property(e => e.ExternalNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("externalNumber");

                entity.Property(e => e.FilterMinDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("filterMinDebt");

                entity.Property(e => e.FixedShowDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fixedShowDebt");

                entity.Property(e => e.FloorCount).HasColumnName("floorCount");

                entity.Property(e => e.HouseAreaFloor)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaFloor");

                entity.Property(e => e.HouseAreaFloorEnergy)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaFloorEnergy");

                entity.Property(e => e.HouseAreaHeating)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaHeating");

                entity.Property(e => e.HouseAreaLiving)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaLiving");

                entity.Property(e => e.HouseAreaLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaLivingMKD");

                entity.Property(e => e.HouseAreaNotLivingMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaNotLivingMKD");

                entity.Property(e => e.HouseAreaNotSubscribe)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaNotSubscribe");

                entity.Property(e => e.HouseAreaTotal)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaTotal");

                entity.Property(e => e.HouseAreaTotalMkd)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaTotalMKD");

                entity.Property(e => e.HouseAreaTotalOi)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaTotalOI");

                entity.Property(e => e.HouseBankAccountOrganizationAsRicOrgId).HasColumnName("houseBankAccountOrganizationAsRicOrgId");

                entity.Property(e => e.HouseChief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseChief");

                entity.Property(e => e.HouseHolderBankAccountCode).HasColumnName("houseHolderBankAccountCode");

                entity.Property(e => e.HouseHolderBankAccountId).HasColumnName("houseHolderBankAccountId");

                entity.Property(e => e.HouseHolderBankAccountIsPrimary).HasColumnName("houseHolderBankAccountIsPrimary");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseResidentsCount).HasColumnName("houseResidentsCount");

                entity.Property(e => e.HouseTotalNotLiveSquare)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseTotalNotLiveSquare");

                entity.Property(e => e.HouseTotalSquare)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseTotalSquare");

                entity.Property(e => e.IsClosedAllServices).HasColumnName("isClosedAllServices");

                entity.Property(e => e.IsExistAnySumm).HasColumnName("isExistAnySumm");

                entity.Property(e => e.IsGenerating).HasColumnName("isGenerating");

                entity.Property(e => e.LinkedApartment).HasColumnName("linkedApartment");

                entity.Property(e => e.LocalDistrictName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("localDistrictName");

                entity.Property(e => e.NonResidential).HasColumnName("nonResidential");

                entity.Property(e => e.NoticeInformation)
                    .IsUnicode(false)
                    .HasColumnName("noticeInformation");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.OwnerOrganizationId).HasColumnName("ownerOrganizationId");

                entity.Property(e => e.PostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalIndex");

                entity.Property(e => e.PostalIndexOriginal)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("postalIndexOriginal");

                entity.Property(e => e.PrintServices)
                    .IsRequired()
                    .HasColumnName("printServices")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PrintTypeId).HasColumnName("printTypeId");

                entity.Property(e => e.ResidentInVacationsCount).HasColumnName("residentInVacationsCount");

                entity.Property(e => e.ResidentWithVacationsCount).HasColumnName("residentWithVacationsCount");

                entity.Property(e => e.ResidentsCheckInTempCount).HasColumnName("residentsCheckInTempCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsRegisteredCount).HasColumnName("residentsRegisteredCount");

                entity.Property(e => e.ResidentsRegisteredOnlyCount).HasColumnName("residentsRegisteredOnlyCount");

                entity.Property(e => e.ResidentsRegisteredTempCount).HasColumnName("residentsRegisteredTempCount");

                entity.Property(e => e.ResidentsResideCount).HasColumnName("residentsResideCount");

                entity.Property(e => e.ResidentsUnregisteredBenefit).HasColumnName("residentsUnregisteredBenefit");

                entity.Property(e => e.RicBankAccountCode).HasColumnName("ricBankAccountCode");

                entity.Property(e => e.RicBankAccountId).HasColumnName("ricBankAccountId");

                entity.Property(e => e.RicBankAccountIsPrimary).HasColumnName("ricBankAccountIsPrimary");

                entity.Property(e => e.RicOrganizationId).HasColumnName("ricOrganizationId");

                entity.Property(e => e.SubProvider)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subProvider");

                entity.Property(e => e.TerritorialManageOrgId).HasColumnName("territorialManageOrgId");

                entity.Property(e => e.TerritorialSubdivisionId).HasColumnName("territorialSubdivisionId");

                entity.Property(e => e.ToPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPay");

                entity.Property(e => e.UseExternalNumber).HasColumnName("useExternalNumber");

                entity.Property(e => e.Version).HasColumnName("version");

                entity.Property(e => e.WorkModeAddr)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("workModeAddr");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.Notices)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FC_noticeNotices_actionId");
            });

            modelBuilder.Entity<NoticeAccountInfoTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NoticeAccountInfoTax", "notice");

                entity.Property(e => e.DateBalance).HasColumnType("datetime");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.Indebted).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxName).IsUnicode(false);
            });

            modelBuilder.Entity<NoticeAdditionalSetting>(entity =>
            {
                entity.ToTable("NoticeAdditionalSettings", "notice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("isEnable")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<NoticeAdditionalSettingsParam>(entity =>
            {
                entity.HasKey(e => new { e.NoticeAdditionalSettingId, e.Name, e.Id })
                    .HasName("PK_noticeNoticeAdditionalSettingsParams");

                entity.ToTable("NoticeAdditionalSettingsParams", "notice");

                entity.Property(e => e.NoticeAdditionalSettingId).HasColumnName("noticeAdditionalSettingId");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.NoticeAdditionalSetting)
                    .WithMany(p => p.NoticeAdditionalSettingsParams)
                    .HasForeignKey(d => d.NoticeAdditionalSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeNoticeAdditionalSettingsParams_noticeAdditionalSettingId");
            });

            modelBuilder.Entity<NoticeAdditionalSettingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NoticeAdditionalSettingsView", "notice");

                entity.Property(e => e.AccountHouseHolder)
                    .HasMaxLength(559)
                    .IsUnicode(false)
                    .HasColumnName("accountHouseHolder");

                entity.Property(e => e.AccountHouseHolderId).HasColumnName("accountHouseHolderId");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("areaName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FixedPeriod)
                    .HasMaxLength(2051)
                    .IsUnicode(false)
                    .HasColumnName("fixedPeriod");

                entity.Property(e => e.FixedPeriodFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("fixedPeriodFrom");

                entity.Property(e => e.FixedPeriodTo)
                    .HasColumnType("datetime")
                    .HasColumnName("fixedPeriodTo");

                entity.Property(e => e.HouseHolder)
                    .HasMaxLength(559)
                    .IsUnicode(false)
                    .HasColumnName("houseHolder");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.Priority).HasColumnName("priority");

                entity.Property(e => e.ServiceProvider)
                    .HasMaxLength(559)
                    .IsUnicode(false)
                    .HasColumnName("serviceProvider");

                entity.Property(e => e.Subdivision)
                    .HasMaxLength(559)
                    .IsUnicode(false)
                    .HasColumnName("subdivision");

                entity.Property(e => e.Tag)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("tag");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<NoticeBenefit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NoticeBenefits", "notice");

                entity.HasIndex(e => new { e.NoticeId, e.AccountServiceId, e.PersonId, e.BenefitId }, "IX_noticeNoticeBenefits_clustered")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitChargeSumm");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitRecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitRecalcSumm");

                entity.Property(e => e.IsTransBenefit).HasColumnName("isTransBenefit");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.SpecialBenefitRecalcFutureSummByCurrentPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialBenefitRecalcFutureSummByCurrentPeriod");
            });

            modelBuilder.Entity<NoticeCounter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_NoticeNoticeCounters");

                entity.ToTable("NoticeCounters", "notice");

                entity.HasIndex(e => e.Id, "IX_NoticeNoticeCounters_id")
                    .IsUnique();

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.ConsumptionWithoutCalc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumptionWithoutCalc");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.EndIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endIndication");

                entity.Property(e => e.EndIndicationComment)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("endIndicationComment");

                entity.Property(e => e.EndIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("endIndicationDate");

                entity.Property(e => e.EndIndicationDateWithoutCalc)
                    .HasColumnType("datetime")
                    .HasColumnName("endIndicationDateWithoutCalc");

                entity.Property(e => e.EndIndicationTypeId).HasColumnName("endIndicationTypeId");

                entity.Property(e => e.EndIndicationWithoutCalc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endIndicationWithoutCalc");

                entity.Property(e => e.IsCloseCounter)
                    .IsRequired()
                    .HasColumnName("isCloseCounter")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Share)
                    .HasColumnType("decimal(5, 4)")
                    .HasColumnName("share")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StartIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("startIndication");

                entity.Property(e => e.StartIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startIndicationDate");

                entity.Property(e => e.StartIndicationDateWithoutCalc)
                    .HasColumnType("datetime")
                    .HasColumnName("startIndicationDateWithoutCalc");

                entity.Property(e => e.StartIndicationTypeId).HasColumnName("startIndicationTypeId");

                entity.Property(e => e.StartIndicationWithoutCalc)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("startIndicationWithoutCalc");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.HasOne(d => d.Notice)
                    .WithMany(p => p.NoticeCounters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeId)
                    .HasConstraintName("FK_NoticeNoticeCounters_Notices");
            });

            modelBuilder.Entity<NoticeHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NoticeHeader", "CRM");

                entity.HasIndex(e => e.Id, "IX_CRMNoticeHeader_id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AddressNameCityDistrict)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("addressNameCityDistrict");

                entity.Property(e => e.ApartmentSquare)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentSquare");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.DateLastPaymentNotice)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dateLastPaymentNotice");

                entity.Property(e => e.DebtSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtSumm");

                entity.Property(e => e.FinalChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSumm");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseAreaFloor)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaFloor");

                entity.Property(e => e.HouseAreaLiving)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaLiving");

                entity.Property(e => e.HouseAreaTotal)
                    .HasColumnType("decimal(10, 3)")
                    .HasColumnName("houseAreaTotal");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NegativeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeSumm");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.PaymentTo)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentTo");

                entity.Property(e => e.Period)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("period");

                entity.Property(e => e.ResidentsCount)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("residentsCount");

                entity.Property(e => e.RicName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ricName");

                entity.Property(e => e.SaldoPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPeny");

                entity.Property(e => e.ToPaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySumm");
            });

            modelBuilder.Entity<NoticeHouseCounter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_NoticeNoticeHouseCounters");

                entity.ToTable("NoticeHouseCounters", "notice");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApatrmentCountersVolume)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("apatrmentCountersVolume");

                entity.Property(e => e.ApatrmentNormativesVolume)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("apatrmentNormativesVolume");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Consumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("factor");

                entity.Property(e => e.HierarchyConsumptionInfo)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("hierarchyConsumptionInfo");

                entity.Property(e => e.HouseConsumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseConsumption");

                entity.Property(e => e.HouseConsumptionVolume)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseConsumptionVolume");

                entity.Property(e => e.HouseCounterId).HasColumnName("houseCounterId");

                entity.Property(e => e.HouseIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseIndication");

                entity.Property(e => e.HouseMopconsumption)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseMOPConsumption");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IndicationDatePrev)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDatePrev");

                entity.Property(e => e.IndicationPrev)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("indicationPrev");

                entity.Property(e => e.IsInnerVolume).HasColumnName("isInnerVolume");

                entity.Property(e => e.IsSubCounter).HasColumnName("isSubCounter");

                entity.Property(e => e.NonresidentialConsumptions)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("nonresidentialConsumptions");

                entity.Property(e => e.Note)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("note");

                entity.Property(e => e.NotePrev)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("notePrev");

                entity.Property(e => e.NoticeServiceId).HasColumnName("noticeServiceId");

                entity.Property(e => e.ParentHouseCounterId).HasColumnName("parentHouseCounterId");

                entity.Property(e => e.RevertConsumptions)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("revertConsumptions");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.ValInfo)
                    .HasColumnType("decimal(14, 4)")
                    .HasColumnName("valInfo");

                entity.HasOne(d => d.Notice)
                    .WithMany(p => p.NoticeHouseCounters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeId)
                    .HasConstraintName("FK_NoticeNoticeHouseCounters_Notices");
            });

            modelBuilder.Entity<NoticeInfoCalc>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_CRMNoticeInfoCalcs");

                entity.ToTable("NoticeInfoCalcs", "CRM");

                entity.HasIndex(e => e.Id, "IX_CRMNoticeInfoCalcs_id");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterType)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("counterType");

                entity.Property(e => e.EndIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("endIndication");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.GroupResource)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupResource");

                entity.Property(e => e.HouseResource)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("houseResource");

                entity.Property(e => e.HouseSquare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("houseSquare");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("resource");

                entity.Property(e => e.StartIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("startIndication");
            });

            modelBuilder.Entity<NoticeInformationAddress>(entity =>
            {
                entity.ToTable("NoticeInformationAddresses", "notice");

                entity.HasIndex(e => e.AddrId, "IX_NoticeInformationAddresses_addrId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.InformationText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("informationText");
            });

            modelBuilder.Entity<NoticeInformationAddress1>(entity =>
            {
                entity.ToTable("NoticeInformationAddresses", "pay");

                entity.HasIndex(e => e.AddrId, "UIX_NoticeInformationAddresses__addrId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.InformationText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("informationText");

                entity.HasOne(d => d.Addr)
                    .WithOne(p => p.NoticeInformationAddress1)
                    .HasForeignKey<NoticeInformationAddress1>(d => d.AddrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoticeInformationAddresses_LocalAddresses");
            });

            modelBuilder.Entity<NoticeInformationAddressesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NoticeInformationAddressesView", "notice");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InformationText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("informationText");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");
            });

            modelBuilder.Entity<NoticeInformationAddressesView1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NoticeInformationAddressesView", "pay");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InformationText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("informationText");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");
            });

            modelBuilder.Entity<NoticeNoticeAdditionalSetting>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.NoticeAdditionalSettingId })
                    .HasName("PK__NoticeNoticeAdditionalSettings");

                entity.ToTable("NoticeNoticeAdditionalSettings", "notice");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.NoticeAdditionalSettingId).HasColumnName("noticeAdditionalSettingId");

                entity.HasOne(d => d.NoticeAdditionalSetting)
                    .WithMany(p => p.NoticeNoticeAdditionalSettings)
                    .HasForeignKey(d => d.NoticeAdditionalSettingId)
                    .HasConstraintName("FK__NoticeNoticeAdditionalSettings__noticeAdditionalSettingId");

                entity.HasOne(d => d.Notice)
                    .WithMany(p => p.NoticeNoticeAdditionalSettings)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeId)
                    .HasConstraintName("FK__NoticeNoticeAdditionalSettings__noticeId");
            });

            modelBuilder.Entity<NoticePay>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_CRMNoticePays");

                entity.ToTable("NoticePays", "CRM");

                entity.HasIndex(e => e.Id, "IX_CRMNoticePays_id");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummApartment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummApartment");

                entity.Property(e => e.ChargeSummHouse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummHouse");

                entity.Property(e => e.DebtAdvanceBegin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtAdvanceBegin");

                entity.Property(e => e.DebtAdvanceEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtAdvanceEnd");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinalChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSumm");

                entity.Property(e => e.FinalChargeSummApartment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSummApartment");

                entity.Property(e => e.FinalChargeSummHouse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSummHouse");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.Num2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("num2");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.PreviousPeriodRecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("previousPeriodRecalcSumm");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.Resource)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceApartment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("resourceApartment");

                entity.Property(e => e.ResourceHouse)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("resourceHouse");

                entity.Property(e => e.SaldoAdvancePenyBegin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoAdvancePenyBegin");

                entity.Property(e => e.SaldoAdvancePenyEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoAdvancePenyEnd");

                entity.Property(e => e.SaldoPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPeny");

                entity.Property(e => e.ServiceRate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceRate");

                entity.Property(e => e.ToPaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySumm");

                entity.Property(e => e.ToPaySummEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySummEnd");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.ViewService)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("viewService");
            });

            modelBuilder.Entity<NoticeProvider>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_CRMNoticeProviders");

                entity.ToTable("NoticeProviders", "CRM");

                entity.HasIndex(e => e.Id, "IX_CRMNoticeProviders_id");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.AddrInfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.BeginAdvanceNextPeriodSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginAdvanceNextPeriodSumm");

                entity.Property(e => e.BeginAdvanceSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginAdvanceSumm");

                entity.Property(e => e.BeginSaldoNextPeriodSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginSaldoNextPeriodSumm");

                entity.Property(e => e.BeginSaldoSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginSaldoSumm");

                entity.Property(e => e.FinalChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSumm");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ToPaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySumm");
            });

            modelBuilder.Entity<NoticeRecalc>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_CRMNoticeRecalcs");

                entity.ToTable("NoticeRecalcs", "CRM");

                entity.HasIndex(e => e.Id, "IX_CRMNoticeRecalcs_id");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.SubTypeName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("subTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<NoticeService>(entity =>
            {
                entity.HasKey(e => new { e.NoticeId, e.Id })
                    .HasName("PK_NoticeNoticeServices");

                entity.ToTable("NoticeServices", "notice");

                entity.HasIndex(e => e.Id, "IX_NoticeNoticeServices_id")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.Created }, "IX_NoticeNoticeServices_id_created")
                    .IsUnique();

                entity.HasIndex(e => e.ServiceId, "IX_NoticeNoticeServices_serviceId");

                entity.HasIndex(e => e.AccountServiceId, "ix_NoticeServices_accountServiceId");

                entity.HasIndex(e => new { e.NoticeId, e.AccountServiceId }, "ix_NoticeServices_noticeid_accountServiceId");

                entity.Property(e => e.NoticeId).HasColumnName("noticeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitChargeSummByServiceType)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitChargeSummByServiceType");

                entity.Property(e => e.BenefitDebtVolume).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BenefitFutureRecSummByCreated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitFutureRecSummByCreated");

                entity.Property(e => e.BenefitPrevRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitPrevRecSumm");

                entity.Property(e => e.BenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitRecSumm");

                entity.Property(e => e.BenefitRecalcSummByServiceType)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitRecalcSummByServiceType");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.BenefitTransSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitTransSumm");

                entity.Property(e => e.CalcPenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("calcPenaltySumm");

                entity.Property(e => e.CalcSquare)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("calcSquare");

                entity.Property(e => e.CashlessSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashlessSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummByPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummByPeriod");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateLastPayment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateLastPayment");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtCountPeriod).HasColumnName("debtCountPeriod");

                entity.Property(e => e.DebtInfo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtInfo");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.EdkFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("edkFromDate");

                entity.Property(e => e.EdkOwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("edkOwnerName");

                entity.Property(e => e.EdkToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("edkToDate");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.FinalChargeSummInfo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("finalChargeSummInfo");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FuturePeriodCashlessSummByCreated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("futurePeriodCashlessSummByCreated");

                entity.Property(e => e.FuturePeriodRecalcSummByCreated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("futurePeriodRecalcSummByCreated");

                entity.Property(e => e.GroupCode).HasColumnName("groupCode");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.IncDecChargePenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDecChargePenalty");

                entity.Property(e => e.InfoNormGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoNormGiga");

                entity.Property(e => e.InfoNormRateCalcByDiv)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("infoNormRateCalcByDiv");

                entity.Property(e => e.InfoRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("infoRateGiga");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsExistAnySumm).HasColumnName("isExistAnySumm");

                entity.Property(e => e.IsExistCounter).HasColumnName("isExistCounter");

                entity.Property(e => e.IsHouseCharge).HasColumnName("isHouseCharge");

                entity.Property(e => e.IsIncomingService).HasColumnName("isIncomingService");

                entity.Property(e => e.IsOpenSrv).HasColumnName("isOpenSrv");

                entity.Property(e => e.IsTransBenefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("isTransBenefit");

                entity.Property(e => e.LastPaymentIsIncomingTransferDate).HasColumnName("lastPaymentIsIncomingTransferDate");

                entity.Property(e => e.MonetizedBenefitFutureRecSummByCreated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitFutureRecSummByCreated");

                entity.Property(e => e.MonetizedBenefitPrevRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitPrevRecSumm");

                entity.Property(e => e.MonetizedBenefitRecSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitRecSumm");

                entity.Property(e => e.MonetizedBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("monetizedBenefitSumm");

                entity.Property(e => e.Name)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OplEdksumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oplEDKSumm");

                entity.Property(e => e.OplSubsidSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oplSubsidSumm");

                entity.Property(e => e.ParentCode).HasColumnName("parentCode");

                entity.Property(e => e.ParentName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("parentName");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.PeriodDebt)
                    .HasColumnType("datetime")
                    .HasColumnName("periodDebt");

                entity.Property(e => e.PreviousPeriodCashlessSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("previousPeriodCashlessSumm");

                entity.Property(e => e.PreviousPeriodPaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("previousPeriodPaymentSumm");

                entity.Property(e => e.PreviousPeriodRecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("previousPeriodRecalcSumm");

                entity.Property(e => e.PreviousPeriodRecalcSummByCreated)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("previousPeriodRecalcSummByCreated");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcSummByPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSummByPeriod");

                entity.Property(e => e.SaldoBeginInfo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoBeginInfo");

                entity.Property(e => e.SaldoBeginPenyInfo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoBeginPenyInfo");

                entity.Property(e => e.SaldoEndInfo)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndInfo");

                entity.Property(e => e.SaldoPeny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoPeny");

                entity.Property(e => e.ServiceApartmentTypeId).HasColumnName("serviceApartmentTypeId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceNorm)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("serviceNorm");

                entity.Property(e => e.ServiceNormByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceNormByUnitName");

                entity.Property(e => e.ServiceNormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceNormUnitName");

                entity.Property(e => e.ServiceOriginalNorm)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceOriginalNorm");

                entity.Property(e => e.ServiceOriginalRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceOriginalRate");

                entity.Property(e => e.ServiceRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceRate");

                entity.Property(e => e.ServiceSubNoticeRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceSubNoticeRate");

                entity.Property(e => e.ServiceSubRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("serviceSubRate");

                entity.Property(e => e.ServiceUnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceUnitName");

                entity.Property(e => e.SpecialRecalcFutureSummByCurrentPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByCurrentPeriod");

                entity.Property(e => e.SpecialRecalcFutureSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByOldPeriod");

                entity.Property(e => e.SpecialRecalcSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcSummByOldPeriod");

                entity.Property(e => e.SummLastPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summLastPayment");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.ViewService)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("viewService");

                entity.HasOne(d => d.Notice)
                    .WithMany(p => p.NoticeServices)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeId)
                    .HasConstraintName("FK_NoticeNoticeServices_Notices");
            });

            modelBuilder.Entity<NoticeServiceByPeriod>(entity =>
            {
                entity.HasKey(e => new { e.NoticeServiceId, e.Period, e.Id })
                    .HasName("PK__NoticeServiceByPeriods");

                entity.ToTable("NoticeServiceByPeriods", "notice");

                entity.HasIndex(e => new { e.NoticeServiceId, e.Period, e.GroupOperSubTypeId }, "IX__NoticeNoticeServiceByPeriods__noticeServiceId_period_groupOperSubTypeId");

                entity.Property(e => e.NoticeServiceId).HasColumnName("noticeServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.CashlessSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashlessSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.GroupOperSubTypeId).HasColumnName("groupOperSubTypeId");

                entity.Property(e => e.IncDecChargePenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDecChargePenalty");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.SpecialRecalcFutureSummByCurrentPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByCurrentPeriod");

                entity.Property(e => e.SpecialRecalcFutureSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByOldPeriod");

                entity.Property(e => e.SpecialRecalcSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcSummByOldPeriod");

                entity.HasOne(d => d.NoticeService)
                    .WithMany(p => p.NoticeServiceByPeriods)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeServiceId)
                    .HasConstraintName("FK__noticeNoticeServiceByPeriods__noticeServiceId");
            });

            modelBuilder.Entity<NoticeServiceByPeriodFuture>(entity =>
            {
                entity.HasKey(e => new { e.NoticeServiceId, e.Period, e.Id })
                    .HasName("PK__NoticeServiceByPeriodFutures");

                entity.ToTable("NoticeServiceByPeriodFutures", "notice");

                entity.HasIndex(e => new { e.NoticeServiceId, e.Period, e.GroupOperSubTypeId }, "IX__NoticeNoticeServiceByPeriodFutures__noticeServiceId_period_groupOperSubTypeId");

                entity.Property(e => e.NoticeServiceId).HasColumnName("noticeServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.CashlessSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cashlessSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.GroupOperSubTypeId).HasColumnName("groupOperSubTypeId");

                entity.Property(e => e.IncDecChargePenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("incDecChargePenalty");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.SpecialRecalcFutureSummByCurrentPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByCurrentPeriod");

                entity.Property(e => e.SpecialRecalcFutureSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcFutureSummByOldPeriod");

                entity.Property(e => e.SpecialRecalcSummByOldPeriod)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("specialRecalcSummByOldPeriod");
            });

            modelBuilder.Entity<NoticeServiceCounter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeServiceId, e.NoticeCounterId })
                    .HasName("PK_NoticeNoticeServiceCounters");

                entity.ToTable("NoticeServiceCounters", "notice");

                entity.HasIndex(e => e.NoticeCounterId, "IX_noticeNoticeServiceCounters__noticeCounterId");

                entity.Property(e => e.NoticeServiceId).HasColumnName("noticeServiceId");

                entity.Property(e => e.NoticeCounterId).HasColumnName("noticeCounterId");

                entity.HasOne(d => d.NoticeCounter)
                    .WithMany(p => p.NoticeServiceCounters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeCounterId)
                    .HasConstraintName("FK_NoticeNoticeServiceCounters_NoticeCounters");

                entity.HasOne(d => d.NoticeService)
                    .WithMany(p => p.NoticeServiceCounters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NoticeNoticeServiceCounters_NoticeServices");
            });

            modelBuilder.Entity<NoticeTemplate>(entity =>
            {
                entity.ToTable("NoticeTemplates", "notice");

                entity.HasIndex(e => e.IdentityName, "UN_NoticeNoticeTemplates_identityName")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountsInTemplate).HasColumnName("accountsInTemplate");

                entity.Property(e => e.AutoRendering).HasColumnName("autoRendering");

                entity.Property(e => e.DisableGenerate).HasColumnName("disableGenerate");

                entity.Property(e => e.ExcludeServiceOldHouseHolder).HasColumnName("excludeServiceOldHouseHolder");

                entity.Property(e => e.ExcludeServiceProviderBankrupt).HasColumnName("excludeServiceProviderBankrupt");

                entity.Property(e => e.ForceHouseHolderId).HasColumnName("forceHouseHolderId");

                entity.Property(e => e.IdentityName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("identityName");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsExistBeginCredit).HasColumnName("isExistBeginCredit");

                entity.Property(e => e.IsExistBeginDebit).HasColumnName("isExistBeginDebit");

                entity.Property(e => e.IsExistChargeSummOrExistToPaySumm).HasColumnName("isExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.IsLkActive).HasColumnName("isLkActive");

                entity.Property(e => e.IsOpenByAccountDates).HasColumnName("isOpenByAccountDates");

                entity.Property(e => e.IsOpenByServiceDatesOrExistAnySumm)
                    .IsRequired()
                    .HasColumnName("isOpenByServiceDatesOrExistAnySumm")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSumm).HasColumnName("isOpenByServiceDatesOrExistChargeSumm");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSummOrExistToPaySumm).HasColumnName("isOpenByServiceDatesOrExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.ShowNoticeInformation).HasColumnName("showNoticeInformation");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.Sql)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.Template)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("template")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<NoticeTemplateParticalProvider>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateId, e.PartCode, e.ProviderId })
                    .HasName("PK__noticeNoticeTemplateParticalProviders");

                entity.ToTable("NoticeTemplateParticalProviders", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateParticalProviders__id")
                    .IsUnique();

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.PartCode).HasColumnName("partCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ForceHouseHolderId).HasColumnName("forceHouseHolderId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsPrint)
                    .IsRequired()
                    .HasColumnName("isPrint")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<NoticeTemplateProvider>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateId, e.ProviderId })
                    .HasName("PK__noticeNoticeTemplateProviders");

                entity.ToTable("NoticeTemplateProviders", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateProviders__id");

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeTemplate)
                    .WithMany(p => p.NoticeTemplateProviders)
                    .HasForeignKey(d => d.NoticeTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeNoticeTemplateProviders_noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSetting>(entity =>
            {
                entity.ToTable("NoticeTemplateSettings", "notice");

                entity.HasIndex(e => new { e.NoticeTemplateId, e.Name }, "UN_NoticeNoticeTemplateSettings__noticeTemplateId_name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountParam).HasColumnName("accountParam");

                entity.Property(e => e.AccountParam2).HasColumnName("accountParam2");

                entity.Property(e => e.AccountParamRevert).HasColumnName("accountParamRevert");

                entity.Property(e => e.AccountParamRevert2).HasColumnName("accountParamRevert2");

                entity.Property(e => e.ApartmentType).HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeRevert).HasColumnName("apartmentTypeRevert");

                entity.Property(e => e.AutoRendering).HasColumnName("autoRendering");

                entity.Property(e => e.ExcludeServiceApartmentTypeId).HasColumnName("excludeServiceApartmentTypeId");

                entity.Property(e => e.ExcludeServiceExistBeginCredit).HasColumnName("excludeServiceExistBeginCredit");

                entity.Property(e => e.ExcludeServiceExistBeginCreditSaldo).HasColumnName("excludeServiceExistBeginCreditSaldo");

                entity.Property(e => e.ExcludeServiceExistBeginDebit).HasColumnName("excludeServiceExistBeginDebit");

                entity.Property(e => e.ExcludeServiceExistEndCredit).HasColumnName("excludeServiceExistEndCredit");

                entity.Property(e => e.ExcludeServiceOldHouseHolder).HasColumnName("excludeServiceOldHouseHolder");

                entity.Property(e => e.ExcludeServiceProviderBankrupt).HasColumnName("excludeServiceProviderBankrupt");

                entity.Property(e => e.ForceHouseHolderId).HasColumnName("forceHouseHolderId");

                entity.Property(e => e.ForceRicOrgId).HasColumnName("forceRicOrgId");

                entity.Property(e => e.HideServiceWithoutChargeSumm)
                    .HasColumnName("hideServiceWithoutChargeSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HouseBankAccountPrimary).HasColumnName("houseBankAccountPrimary");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDefault).HasColumnName("isDefault");

                entity.Property(e => e.IsExistBeginCredit).HasColumnName("isExistBeginCredit");

                entity.Property(e => e.IsExistBeginDebit).HasColumnName("isExistBeginDebit");

                entity.Property(e => e.IsExistChargeSumm).HasColumnName("isExistChargeSumm");

                entity.Property(e => e.IsExistChargeSummOrExistRecalcSumm).HasColumnName("isExistChargeSummOrExistRecalcSumm");

                entity.Property(e => e.IsExistChargeSummOrExistToPaySumm).HasColumnName("isExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.IsExistEndDebit).HasColumnName("isExistEndDebit");

                entity.Property(e => e.IsLkActive).HasColumnName("isLkActive");

                entity.Property(e => e.IsOpenByAccountDates).HasColumnName("isOpenByAccountDates");

                entity.Property(e => e.IsOpenByServiceDates).HasColumnName("isOpenByServiceDates");

                entity.Property(e => e.IsOpenByServiceDatesOrExistAnySumm)
                    .IsRequired()
                    .HasColumnName("isOpenByServiceDatesOrExistAnySumm")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSumm).HasColumnName("isOpenByServiceDatesOrExistChargeSumm");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSummOrExistToPaySumm).HasColumnName("isOpenByServiceDatesOrExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.IsServiceFinancialCenterEqual).HasColumnName("isServiceFinancialCenterEqual");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NotReadRenderedNotices).HasColumnName("notReadRenderedNotices");

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.OnlyNonResidential).HasColumnName("onlyNonResidential");

                entity.Property(e => e.PdfExportParametersPacked)
                    .IsUnicode(false)
                    .HasColumnName("pdfExportParametersPacked");

                entity.Property(e => e.ShowLinesRecalcDetalic).HasColumnName("showLinesRecalcDetalic");

                entity.Property(e => e.ShowNoticeInformation).HasColumnName("showNoticeInformation");

                entity.Property(e => e.ShowRecalcByPeriod).HasColumnName("showRecalcByPeriod");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.SubProviderId).HasColumnName("subProviderId");

                entity.Property(e => e.SubSettingGroup)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("subSettingGroup");

                entity.Property(e => e.UseChargeAsToPaySumm).HasColumnName("useChargeAsToPaySumm");

                entity.HasOne(d => d.NoticeTemplate)
                    .WithMany(p => p.NoticeTemplateSettings)
                    .HasForeignKey(d => d.NoticeTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeNoticeTemplateSettings__noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSettingBlock>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingId, e.Id })
                    .HasName("PK_noticeNoticeTemplateSettingBlocks");

                entity.ToTable("NoticeTemplateSettingBlocks", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeTemplateSettingBlocks_id")
                    .IsUnique();

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.NoticeTemplateSettingBlocks)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeNoticeTemplateSettingBlocks_noticeTemplateSettingId");
            });

            modelBuilder.Entity<NoticeTemplateSettingBlockParameter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingBlockId, e.Name, e.Id })
                    .HasName("PK__noticeNoticeTemplateSettingBlockParameters");

                entity.ToTable("NoticeTemplateSettingBlockParameters", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeTemplateSettingBlockParameters_id")
                    .IsUnique();

                entity.Property(e => e.NoticeTemplateSettingBlockId).HasColumnName("noticeTemplateSettingBlockId");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.NoticeTemplateSettingBlock)
                    .WithMany(p => p.NoticeTemplateSettingBlockParameters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeTemplateSettingBlockId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_noticeNoticeTemplateSettingBlockParameters_noticeTemplateSettingId");
            });

            modelBuilder.Entity<NoticeTemplateSettingParameter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingId, e.Name, e.Id })
                    .HasName("PK__noticeNoticeTemplateSettingParameters");

                entity.ToTable("NoticeTemplateSettingParameters", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateSettingParameters__id");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.SubType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("subType");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.NoticeTemplateSettingParameters)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeNoticeTemplateSettingParameters_noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSettingProvider>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingId, e.ProviderId })
                    .HasName("PK__noticeNoticeTemplateSettingProviders");

                entity.ToTable("NoticeTemplateSettingProviders", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateSettingProviders__id");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.NoticeTemplateSettingProviders)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeNoticeTemplateSettingProviders_noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSettingReplaceRicOrg>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingId, e.HouseHolderId })
                    .HasName("PK__noticeNoticeTemplateSettingReplaceRicOrgs");

                entity.ToTable("NoticeTemplateSettingReplaceRicOrgs", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateSettingReplaceRicOrgs__id");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.NoticeTemplateSettingReplaceRicOrgs)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeNoticeTemplateSettingReplaceRicOrgs_noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSettingRightOrganization>(entity =>
            {
                entity.HasKey(e => new { e.NoticeTemplateSettingId, e.OrganizationId })
                    .HasName("PK__noticeNoticeTemplateSettingRightOrganizations");

                entity.ToTable("NoticeTemplateSettingRightOrganizations", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeTemplateSettingRightOrganizations__id");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.NoticeTemplateSettingRightOrganizations)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__noticeNoticeTemplateSettingRightOrganizations_noticeTemplateId");
            });

            modelBuilder.Entity<NoticeTemplateSettingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NoticeTemplateSettingsView", "notice");

                entity.Property(e => e.AccountParam).HasColumnName("accountParam");

                entity.Property(e => e.AccountParam2).HasColumnName("accountParam2");

                entity.Property(e => e.AccountParamRevert).HasColumnName("accountParamRevert");

                entity.Property(e => e.AccountParamRevert2).HasColumnName("accountParamRevert2");

                entity.Property(e => e.AccountsInTemplate).HasColumnName("accountsInTemplate");

                entity.Property(e => e.ApartmentType).HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeRevert).HasColumnName("apartmentTypeRevert");

                entity.Property(e => e.AutoRendering).HasColumnName("autoRendering");

                entity.Property(e => e.ExcludeServiceApartmentTypeId).HasColumnName("excludeServiceApartmentTypeId");

                entity.Property(e => e.ExcludeServiceExistBeginCredit).HasColumnName("excludeServiceExistBeginCredit");

                entity.Property(e => e.ExcludeServiceExistBeginCreditSaldo).HasColumnName("excludeServiceExistBeginCreditSaldo");

                entity.Property(e => e.ExcludeServiceExistBeginDebit).HasColumnName("excludeServiceExistBeginDebit");

                entity.Property(e => e.ExcludeServiceExistEndCredit).HasColumnName("excludeServiceExistEndCredit");

                entity.Property(e => e.ExcludeServiceOldHouseHolder).HasColumnName("excludeServiceOldHouseHolder");

                entity.Property(e => e.ExcludeServiceProviderBankrupt).HasColumnName("excludeServiceProviderBankrupt");

                entity.Property(e => e.ForceHouseHolderId).HasColumnName("forceHouseHolderId");

                entity.Property(e => e.ForceRicOrgId).HasColumnName("forceRicOrgId");

                entity.Property(e => e.HideServiceWithoutChargeSumm).HasColumnName("hideServiceWithoutChargeSumm");

                entity.Property(e => e.HouseBankAccountPrimary).HasColumnName("houseBankAccountPrimary");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.IsDefault).HasColumnName("isDefault");

                entity.Property(e => e.IsExistBeginCredit).HasColumnName("isExistBeginCredit");

                entity.Property(e => e.IsExistBeginDebit).HasColumnName("isExistBeginDebit");

                entity.Property(e => e.IsExistChargeSumm).HasColumnName("isExistChargeSumm");

                entity.Property(e => e.IsExistChargeSummOrExistRecalcSumm).HasColumnName("isExistChargeSummOrExistRecalcSumm");

                entity.Property(e => e.IsExistChargeSummOrExistToPaySumm).HasColumnName("isExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.IsExistEndDebit).HasColumnName("isExistEndDebit");

                entity.Property(e => e.IsLkActive).HasColumnName("isLkActive");

                entity.Property(e => e.IsOpenByAccountDates).HasColumnName("isOpenByAccountDates");

                entity.Property(e => e.IsOpenByServiceDates).HasColumnName("isOpenByServiceDates");

                entity.Property(e => e.IsOpenByServiceDatesOrExistAnySumm).HasColumnName("isOpenByServiceDatesOrExistAnySumm");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSumm).HasColumnName("isOpenByServiceDatesOrExistChargeSumm");

                entity.Property(e => e.IsOpenByServiceDatesOrExistChargeSummOrExistToPaySumm).HasColumnName("isOpenByServiceDatesOrExistChargeSummOrExistToPaySumm");

                entity.Property(e => e.IsServiceFinancialCenterEqual).HasColumnName("isServiceFinancialCenterEqual");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NotReadRenderedNotices).HasColumnName("notReadRenderedNotices");

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.PdfExportParametersPacked)
                    .IsUnicode(false)
                    .HasColumnName("pdfExportParametersPacked");

                entity.Property(e => e.ShowNoticeInformation).HasColumnName("showNoticeInformation");

                entity.Property(e => e.ShowRecalcByPeriod).HasColumnName("showRecalcByPeriod");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.SubProviderId).HasColumnName("subProviderId");

                entity.Property(e => e.SubSettingGroup)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("subSettingGroup");

                entity.Property(e => e.TemplateIdentityName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("templateIdentityName");

                entity.Property(e => e.TemplateIsActive).HasColumnName("templateIsActive");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateSql)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("templateSql");

                entity.Property(e => e.UseChargeAsToPaySumm).HasColumnName("useChargeAsToPaySumm");
            });

            modelBuilder.Entity<NoticeXmlcounter>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLCounters");

                entity.ToTable("NoticeXMLCounters", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLCounters_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmlcounters)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLCounters_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmldata13>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLData13");

                entity.ToTable("NoticeXMLData13", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLData13_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmldata13s)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLData13_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmldata2>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLData2");

                entity.ToTable("NoticeXMLData2", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLData2_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmldata2s)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLData2_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmldata4>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLData4");

                entity.ToTable("NoticeXMLData4", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLData4_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmldata4s)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLData4_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmldata9>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLData9");

                entity.ToTable("NoticeXMLData9", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLData9_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmldata9s)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLData9_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmlnotice>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.AccountId })
                    .HasName("PK_noticeNoticeXMLNotices");

                entity.ToTable("NoticeXMLNotices", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLNotices_id")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AllXml)
                    .IsUnicode(false)
                    .HasColumnName("allXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndexPart).HasColumnName("indexPart");

                entity.Property(e => e.NoticeXml)
                    .IsUnicode(false)
                    .HasColumnName("noticeXML");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.NoticeXmlnotices)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLNotices_actionId");
            });

            modelBuilder.Entity<NoticeXmlpay>(entity =>
            {
                entity.HasKey(e => new { e.NoticeXmlid, e.RowNumber })
                    .HasName("PK_noticeNoticeXMLPays");

                entity.ToTable("NoticeXMLPays", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeNoticeXMLPays_id")
                    .IsUnique();

                entity.Property(e => e.NoticeXmlid).HasColumnName("noticeXMLId");

                entity.Property(e => e.RowNumber).HasColumnName("rowNumber");

                entity.Property(e => e.DataXml)
                    .IsUnicode(false)
                    .HasColumnName("dataXML");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.NoticeXml)
                    .WithMany(p => p.NoticeXmlpays)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.NoticeXmlid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_noticeNoticeXMLPays_noticeXMLId");
            });

            modelBuilder.Entity<NoticeXmlresultAccount>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountId, e.NoticeTemplateSettingId })
                    .HasName("PK__noticeNoticeXMLResultAccounts");

                entity.ToTable("NoticeXMLResultAccounts", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeNoticeXMLResultAccounts__id")
                    .IsUnique();

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataXml)
                    .HasColumnType("xml")
                    .HasColumnName("dataXML");

                entity.Property(e => e.HasResult).HasColumnName("hasResult");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<NoticesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NoticesView", "notice");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AdditionalInfo)
                    .HasMaxLength(288)
                    .IsUnicode(false)
                    .HasColumnName("additionalInfo");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddressLevel).HasColumnName("addressLevel");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AlternativeAdditionalInfo)
                    .HasMaxLength(338)
                    .IsUnicode(false)
                    .HasColumnName("alternativeAdditionalInfo");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentLivingSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apartmentLivingSquare");

                entity.Property(e => e.ApartmentPropertys)
                    .IsUnicode(false)
                    .HasColumnName("apartmentPropertys");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentTypeName");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("barcode")
                    .IsFixedLength(true);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseChief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseChief");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseTotalSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("houseTotalSquare");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsClosedAllServices).HasColumnName("isClosedAllServices");

                entity.Property(e => e.IsGenerating).HasColumnName("isGenerating");

                entity.Property(e => e.NoticeInformation)
                    .IsUnicode(false)
                    .HasColumnName("noticeInformation");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.ParentAddrId).HasColumnName("parentAddrId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PrintServices).HasColumnName("printServices");

                entity.Property(e => e.ResidentWithVacationsCount).HasColumnName("residentWithVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.SubProvider)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subProvider");

                entity.Property(e => e.ToPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPay");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<Number>(entity =>
            {
                entity.ToTable("Numbers", "lk");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Pass).HasColumnName("pass");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");
            });

            modelBuilder.Entity<NumbersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NumbersView", "lk");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");
            });

            modelBuilder.Entity<ObjectInfoFull>(entity =>
            {
                entity.HasKey(e => e.CadNumber)
                    .HasName("PK_objectInfoFull");

                entity.ToTable("ObjectInfoFull", "egrn");

                entity.Property(e => e.CadNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cadNumber");

                entity.Property(e => e.EncodedObject)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("encoded_object");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId)
                    .HasColumnName("userId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");
            });

            modelBuilder.Entity<ObjectInfoFullAvailableDocument>(entity =>
            {
                entity.HasKey(e => new { e.CadNumber, e.DocType })
                    .HasName("PK_objectInfoFullAvailableDocuments");

                entity.ToTable("ObjectInfoFullAvailableDocuments", "egrn");

                entity.Property(e => e.CadNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cadNumber");

                entity.Property(e => e.DocType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("docType");

                entity.Property(e => e.DocAvailable).HasColumnName("docAvailable");

                entity.Property(e => e.DocPrice)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("docPrice");

                entity.HasOne(d => d.CadNumberNavigation)
                    .WithMany(p => p.ObjectInfoFullAvailableDocuments)
                    .HasForeignKey(d => d.CadNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_objectInfoFullAvailableDocuments_objectInfoFull");

                entity.HasOne(d => d.DocTypeNavigation)
                    .WithMany(p => p.ObjectInfoFullAvailableDocuments)
                    .HasForeignKey(d => d.DocType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_objectInfoFullAvailableDocuments_documentTypes");
            });

            modelBuilder.Entity<OpCode>(entity =>
            {
                entity.ToTable("OpCodes", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Option>(entity =>
            {
                entity.ToTable("Options", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => new { e.CadNumber, e.TransactionId });

                entity.ToTable("Orders", "egrn");

                entity.HasIndex(e => e.TransactionId, "IX_Orders")
                    .IsUnique();

                entity.HasIndex(e => e.CadNumber, "IX_Orders_1");

                entity.Property(e => e.CadNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cadNumber");

                entity.Property(e => e.TransactionId).HasColumnName("transactionId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatorId)
                    .HasColumnName("creatorId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");

                entity.Property(e => e.Paid).HasColumnName("paid");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdaterId)
                    .HasColumnName("updaterId")
                    .HasDefaultValueSql("([sn].[User_GetId]())");

                entity.HasOne(d => d.CadNumberNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CadNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_objectInfoFull");
            });

            modelBuilder.Entity<OrderDocument>(entity =>
            {
                entity.HasKey(e => new { e.TransactionId, e.DocType });

                entity.ToTable("OrderDocuments", "egrn");

                entity.Property(e => e.TransactionId).HasColumnName("transactionId");

                entity.Property(e => e.DocType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("docType");

                entity.Property(e => e.DocumentId).HasColumnName("documentId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.XmlText)
                    .HasColumnType("xml")
                    .HasColumnName("xmlText");

                entity.HasOne(d => d.DocTypeNavigation)
                    .WithMany(p => p.OrderDocuments)
                    .HasForeignKey(d => d.DocType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDocuments_documentTypes");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.OrderDocuments)
                    .HasPrincipalKey(p => p.TransactionId)
                    .HasForeignKey(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDocuments_Orders");
            });

            modelBuilder.Entity<Org>(entity =>
            {
                entity.ToTable("Orgs", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commission");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Orgs)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_spOrgs_snOrganization");
            });

            modelBuilder.Entity<OrgDocument>(entity =>
            {
                entity.ToTable("OrgDocuments", "sn");

                entity.HasIndex(e => new { e.TypeId, e.Number, e.IssueDate, e.OrgId }, "IUX_OrgDocuments__typeId_number_issueDate_orgId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AgreementEdo).HasColumnName("agreementEDO");

                entity.Property(e => e.BillingAddress).HasColumnName("billingAddress");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ConnectionService).HasColumnName("connectionService");

                entity.Property(e => e.CuratorId).HasColumnName("curatorId");

                entity.Property(e => e.DbFromDateLk)
                    .HasColumnType("datetime")
                    .HasColumnName("dbFromDateLK");

                entity.Property(e => e.DbToDateLk)
                    .HasColumnType("datetime")
                    .HasColumnName("dbToDateLK");

                entity.Property(e => e.DeliveryOrganization)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("deliveryOrganization");

                entity.Property(e => e.DestinationControl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("destinationControl");

                entity.Property(e => e.DopDate)
                    .HasColumnType("date")
                    .HasColumnName("dopDate");

                entity.Property(e => e.DopNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dopNumber");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasComment("Дата начала действия документа");

                entity.Property(e => e.FromDateEdo)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDateEDO");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("issueDate")
                    .HasComment("Дата документа организации");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComment("Номер документа организации");

                entity.Property(e => e.OkvedType).HasColumnName("okvedType");

                entity.Property(e => e.OrgId)
                    .HasColumnName("orgId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Organization");

                entity.Property(e => e.PDagentDecryption).HasColumnName("pDAgentDecryption");

                entity.Property(e => e.PaymentDocuments).HasColumnName("paymentDocuments");

                entity.Property(e => e.PaymentRequirements).HasColumnName("paymentRequirements");

                entity.Property(e => e.SignerId).HasColumnName("signerId");

                entity.Property(e => e.SpecialistId).HasColumnName("specialistId");

                entity.Property(e => e.StatusEventLogId).HasColumnName("statusEventLogId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate")
                    .HasComment("Дата окончания действия документа");

                entity.Property(e => e.ToDateEdo)
                    .HasColumnType("datetime")
                    .HasColumnName("toDateEDO");

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeId")
                    .HasComment("Тип документа. Ссылка на ID Faset/FasetID");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volume");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.OrgDocuments)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrgDocuments_Organizations");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.OrgDocuments)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrgDocuments_FasetItems");
            });

            modelBuilder.Entity<OrgDocumentTypeDoc>(entity =>
            {
                entity.ToTable("OrgDocumentTypeDocs", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.TypeDocId).HasColumnName("typeDocId");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.OrgDocumentTypeDocs)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrgDocumentTypeDocs_OrgDocuments");

                entity.HasOne(d => d.TypeDoc)
                    .WithMany(p => p.OrgDocumentTypeDocs)
                    .HasForeignKey(d => d.TypeDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrgDocumentTypeDocs_AccountTypeDocuments");
            });

            modelBuilder.Entity<OrgDocumentTypeDocsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrgDocumentTypeDocsView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.TypeDocId).HasColumnName("typeDocId");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");
            });

            modelBuilder.Entity<OrgDocumentsEventLog>(entity =>
            {
                entity.ToTable("OrgDocumentsEventLogs", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DocumentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("documentCreated");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("documentDate");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("documentNumber");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.TypeEvent).HasColumnName("typeEvent");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.OrgDocumentsEventLogs)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .HasConstraintName("FK_OrgDocumentsEventLogs_OrgDocuments");

                entity.HasOne(d => d.TypeEventNavigation)
                    .WithMany(p => p.OrgDocumentsEventLogs)
                    .HasForeignKey(d => d.TypeEvent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrgDocumentsEventLogs_FasetItems_TypeEvent");
            });

            modelBuilder.Entity<OrgDocumentsEventLogsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrgDocumentsEventLogsView", "sn");

                entity.Property(e => e.Comment)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DocumentCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("documentCreated");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("documentDate");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("documentNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.OrgDocumentIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("orgDocumentIssueDate");

                entity.Property(e => e.OrgDocumentNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentNumber");

                entity.Property(e => e.TypeEvent).HasColumnName("typeEvent");

                entity.Property(e => e.TypeEventName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeEventName");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<OrgDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrgDocumentsView", "sn");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("issueDate");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Okved)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("okved");

                entity.Property(e => e.OkvedType).HasColumnName("okvedType");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.StatusEventLog)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusEventLog");

                entity.Property(e => e.StatusEventLogId).HasColumnName("statusEventLogId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volume");
            });

            modelBuilder.Entity<OrgFreeAccountMask>(entity =>
            {
                entity.ToTable("OrgFreeAccountMasks", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mask)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mask");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.OrgFreeAccountMasks)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spOrgFreeAccountMasks__orgId");
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.OrgId })
                    .HasName("PK_rep_Organizations");

                entity.ToTable("Organizations", "rep");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<Organization1>(entity =>
            {
                entity.ToTable("Organizations", "sn");

                entity.HasIndex(e => e.Code, "IX__Organizations_code");

                entity.HasIndex(e => e.IsHouseHolder, "IX__Organizations_isHouseHolder_inc_id");

                entity.HasIndex(e => e.IsServiceProvider, "IX__Organizations_isServiceProvider_inc_id");

                entity.HasIndex(e => e.LongName, "IX__Organizations_longName");

                entity.HasIndex(e => e.ShortName, "IX__Organizations_shortName");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатоор записи");

                entity.Property(e => e.AddrInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo")
                    .HasComment("Контактная информация");

                entity.Property(e => e.AddrInternetInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInternetInfo");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName")
                    .HasComment("Адрес");

                entity.Property(e => e.BudgetType)
                    .HasColumnName("budgetType")
                    .HasComment("Справочник Тип бюджета");

                entity.Property(e => e.ChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chiefAccountant");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasComment("Код  (Внутренняя нумерация по порядку)");

                entity.Property(e => e.ConsumersType).HasColumnName("consumersType");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.2000',(104)))")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.DepartmentId).HasColumnName("departmentId");

                entity.Property(e => e.DistributionPayment)
                    .HasColumnName("distributionPayment")
                    .HasComment("Способ распределения");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FactAdrId)
                    .HasColumnName("factAdrId")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fax")
                    .HasComment("Факс");

                entity.Property(e => e.FkkoType)
                    .HasColumnName("fkkoType")
                    .HasComment("Справочник ФККО");

                entity.Property(e => e.FromDateOfAccrualPenalties)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDateOfAccrualPenalties");

                entity.Property(e => e.Info)
                    .IsUnicode(false)
                    .HasColumnName("info")
                    .HasComment("Информация");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN")
                    .HasComment("ИНН организации");

                entity.Property(e => e.IsBankPaymentAgent).HasColumnName("isBankPaymentAgent");

                entity.Property(e => e.IsBankrupt)
                    .HasColumnName("isBankrupt")
                    .HasComment("Статус организации: Банкрот");

                entity.Property(e => e.IsBenefitTransferrer)
                    .HasColumnName("isBenefitTransferrer")
                    .HasComment("Роль организации: Покрывает льготы");

                entity.Property(e => e.IsCashlessTransferrer)
                    .HasColumnName("isCashlessTransferrer")
                    .HasComment("Роль организации: Безналичные перечисления");

                entity.Property(e => e.IsContractEnded)
                    .HasColumnName("isContractEnded")
                    .HasComment("Договор закрыт/расторгнут");

                entity.Property(e => e.IsFinancialCenter).HasColumnName("isFinancialCenter");

                entity.Property(e => e.IsFlatOwner)
                    .HasColumnName("isFlatOwner")
                    .HasComment("Роль организации: Собственник квартир");

                entity.Property(e => e.IsGeneralContractor).HasColumnName("isGeneralContractor");

                entity.Property(e => e.IsHouseHolder)
                    .HasColumnName("isHouseHolder")
                    .HasComment("Роль организации: Управляющая компания. Если УК то 1, если нет то 0");

                entity.Property(e => e.IsPaymentAgent)
                    .HasColumnName("isPaymentAgent")
                    .HasComment("Роль организации: Платежноый агент");

                entity.Property(e => e.IsPaymentUseNegativeSumm)
                    .HasColumnName("isPaymentUseNegativeSumm")
                    .HasComment("Распределять отрицаительное сальдо на услугах");

                entity.Property(e => e.IsPaymentUseNotice)
                    .HasColumnName("isPaymentUseNotice")
                    .HasComment("Распределять оплату по квитанции");

                entity.Property(e => e.IsResourceProvider)
                    .HasColumnName("isResourceProvider")
                    .HasComment("Роль организации: Ресурсоснабжающая организация");

                entity.Property(e => e.IsServiceProvider)
                    .HasColumnName("isServiceProvider")
                    .HasComment("Роль организации: Поставщик услуг. Если провайдер то 1, если нет то 0");

                entity.Property(e => e.IsTerritorialManage).HasColumnName("isTerritorialManage");

                entity.Property(e => e.IsUnitOrganization).HasColumnName("isUnitOrganization");

                entity.Property(e => e.JuridicAdrId)
                    .HasColumnName("juridicAdrId")
                    .HasComment("Адрес места нахождения (юридический адрес)");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("KBK");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP")
                    .HasComment("КПП организации");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName")
                    .HasComment("Полное название организации");

                entity.Property(e => e.MailAdrId)
                    .HasColumnName("mailAdrId")
                    .HasComment("Почтовый адрес");

                entity.Property(e => e.Manager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("manager")
                    .HasComment("Руководитель");

                entity.Property(e => e.ManagerPosition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("managerPosition")
                    .HasComment("Должность");

                entity.Property(e => e.ModeWork)
                    .IsUnicode(false)
                    .HasColumnName("modeWork");

                entity.Property(e => e.NoticeInformation)
                    .IsUnicode(false)
                    .HasColumnName("noticeInformation");

                entity.Property(e => e.NoticeInformationOnlyAddressesInfo).HasColumnName("noticeInformationOnlyAddressesInfo");

                entity.Property(e => e.NoticeInformationWithAddressesInfo).HasColumnName("noticeInformationWithAddressesInfo");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN")
                    .HasComment("ОГРН организации");

                entity.Property(e => e.Ogrnip)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OGRNIP")
                    .HasComment("ОГРНИП организации");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("OKTMO");

                entity.Property(e => e.OkvedType)
                    .HasColumnName("okvedType")
                    .HasComment("Справочник ОКВЭД");

                entity.Property(e => e.OrgLegalForm)
                    .HasColumnName("orgLegalForm")
                    .HasComment("Вид организационно-правовой деятельности формы");

                entity.Property(e => e.OrgRegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("orgRegistrationDate")
                    .HasComment("Дата регистрации ЮР");

                entity.Property(e => e.OrgType)
                    .HasColumnName("orgType")
                    .HasComment("Вид организации");

                entity.Property(e => e.OrganizationType).HasColumnName("organizationType");

                entity.Property(e => e.OrpKey).HasColumnName("orp_key");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parentId")
                    .HasComment("Родительская организация. Ссылка на sn.Organizations");

                entity.Property(e => e.PurchaseMethod).HasColumnName("purchaseMethod");

                entity.Property(e => e.ReportsSignature)
                    .IsUnicode(false)
                    .HasColumnName("reportsSignature");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName")
                    .HasComment("Сокращенное название организации");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephone")
                    .HasComment("Телефон");

                entity.Property(e => e.TelephoneEmergencyDispatchService)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephoneEmergencyDispatchService")
                    .HasComment("Телефон АДС");

                entity.Property(e => e.TkoType).HasColumnName("tkoType");

                entity.HasOne(d => d.BudgetTypeNavigation)
                    .WithMany(p => p.Organization1BudgetTypeNavigations)
                    .HasForeignKey(d => d.BudgetType);

                entity.HasOne(d => d.ConsumersTypeNavigation)
                    .WithMany(p => p.Organization1ConsumersTypeNavigations)
                    .HasForeignKey(d => d.ConsumersType);

                entity.HasOne(d => d.FactAdr)
                    .WithMany(p => p.Organization1FactAdrs)
                    .HasForeignKey(d => d.FactAdrId);

                entity.HasOne(d => d.FkkoTypeNavigation)
                    .WithMany(p => p.Organization1FkkoTypeNavigations)
                    .HasForeignKey(d => d.FkkoType);

                entity.HasOne(d => d.JuridicAdr)
                    .WithMany(p => p.Organization1JuridicAdrs)
                    .HasForeignKey(d => d.JuridicAdrId);

                entity.HasOne(d => d.MailAdr)
                    .WithMany(p => p.Organization1MailAdrs)
                    .HasForeignKey(d => d.MailAdrId);

                entity.HasOne(d => d.OkvedTypeNavigation)
                    .WithMany(p => p.Organization1OkvedTypeNavigations)
                    .HasForeignKey(d => d.OkvedType);

                entity.HasOne(d => d.OrganizationTypeNavigation)
                    .WithMany(p => p.Organization1OrganizationTypeNavigations)
                    .HasForeignKey(d => d.OrganizationType);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Organizations_Organizations");

                entity.HasOne(d => d.PurchaseMethodNavigation)
                    .WithMany(p => p.Organization1PurchaseMethodNavigations)
                    .HasForeignKey(d => d.PurchaseMethod);

                entity.HasOne(d => d.TkoTypeNavigation)
                    .WithMany(p => p.Organization1TkoTypeNavigations)
                    .HasForeignKey(d => d.TkoType);
            });

            modelBuilder.Entity<OrganizationCommission>(entity =>
            {
                entity.ToTable("OrganizationCommissions", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CommissionCharge)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("commissionCharge");

                entity.Property(e => e.CommissionIncluding)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("commissionIncluding");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("value");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationCommissions)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FC_OrganizationCommissions_Organizations");
            });

            modelBuilder.Entity<OrganizationEconomic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OrganizationEconomic", "sn");

                entity.Property(e => e.Characteristic).HasColumnName("characteristic");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<OrganizationEconomicView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationEconomicView", "sn");

                entity.Property(e => e.Characteristic).HasColumnName("characteristic");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<OrganizationGroup>(entity =>
            {
                entity.ToTable("OrganizationGroups", "sn");

                entity.HasIndex(e => e.Code, "UIX_OrganizationGroups_Code")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<OrganizationGroupContent>(entity =>
            {
                entity.ToTable("OrganizationGroupContents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.OrganizationGroupContents)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("Sn_OrganizationGroupContents_groupId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationGroupContents)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("Sn_OrganizationGroupContents_organizationId");
            });

            modelBuilder.Entity<OrganizationGroupContentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationGroupContentsView", "sn");

                entity.Property(e => e.GroupCode).HasColumnName("groupCode");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");
            });

            modelBuilder.Entity<OrganizationInfo>(entity =>
            {
                entity.HasKey(e => e.OrgId);

                entity.ToTable("OrganizationInfo", "sn");

                entity.Property(e => e.OrgId)
                    .ValueGeneratedNever()
                    .HasColumnName("orgId");

                entity.Property(e => e.Info)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.HasOne(d => d.Org)
                    .WithOne(p => p.OrganizationInfo)
                    .HasForeignKey<OrganizationInfo>(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationInfo_orgId");
            });

            modelBuilder.Entity<OrganizationLicense>(entity =>
            {
                entity.ToTable("OrganizationLicenses", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasComment("Дата создания");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasComment("Дата начала лицензии");

                entity.Property(e => e.LicensOrgTypeId).HasColumnName("licensOrgTypeId");

                entity.Property(e => e.Number)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComment("Номер лицензии");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate")
                    .HasComment("Дата окончания лицензии");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.OrganizationLicenses)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLicenses_orgId");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.OrganizationLicenses)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLicenses_FasetItems__typeId");
            });

            modelBuilder.Entity<OrganizationLicensesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationLicensesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LicensOrgTypeId).HasColumnName("licensOrgTypeId");

                entity.Property(e => e.LicensOrgTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("licensOrgTypeName");

                entity.Property(e => e.Number)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");
            });

            modelBuilder.Entity<OrganizationMaterial>(entity =>
            {
                entity.ToTable("OrganizationMaterials", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MaterialId).HasColumnName("materialId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.OrganizationMaterials)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationMaterials_Materials");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationMaterials)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationMaterials_organizations");
            });

            modelBuilder.Entity<OrganizationMaterialsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationMaterialsView", "sn");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MaterialId).HasColumnName("materialId");

                entity.Property(e => e.MaterialName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("materialName");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<OrganizationPenaltiesSuspension>(entity =>
            {
                entity.ToTable("OrganizationPenaltiesSuspension", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PenaltyPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("penaltyPercent");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.OrganizationPenaltiesSuspensions)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_OrganizationPenaltiesSuspension_OrgDocuments");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationPenaltiesSuspensions)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPenaltiesSuspension_Organizations");
            });

            modelBuilder.Entity<OrganizationPersonal>(entity =>
            {
                entity.ToTable("OrganizationPersonal", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FioImenPad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIO_ImenPad");

                entity.Property(e => e.FioRodPad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIO_RodPad");

                entity.Property(e => e.OrgDocumentsId).HasColumnName("orgDocumentsId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PhoneMobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("phoneMobile");

                entity.Property(e => e.PhoneWork)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("phoneWork");

                entity.Property(e => e.Post).HasColumnName("post");
            });

            modelBuilder.Entity<OrganizationPersonalView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationPersonalView", "sn");

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("documentName");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FioImenPad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIO_ImenPad");

                entity.Property(e => e.FioRodPad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIO_RodPad");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentsId).HasColumnName("orgDocumentsId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PhoneMobile)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("phoneMobile");

                entity.Property(e => e.PhoneWork)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("phoneWork");

                entity.Property(e => e.Post).HasColumnName("post");

                entity.Property(e => e.PostName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("postName");
            });

            modelBuilder.Entity<OrganizationPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationPropertiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.PropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertyName");

                entity.Property(e => e.PropertyValue)
                    .IsUnicode(false)
                    .HasColumnName("propertyValue");
            });

            modelBuilder.Entity<OrganizationProperty>(entity =>
            {
                entity.HasKey(e => new { e.OrganizationId, e.PropertyId });

                entity.ToTable("OrganizationProperties", "sn");

                entity.HasIndex(e => e.Id, "IX_OrganizationProperties_id")
                    .IsUnique();

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PropertyValue)
                    .IsUnicode(false)
                    .HasColumnName("propertyValue");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationProperties)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationProperties_organizationId");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.OrganizationProperties)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationProperties_propertyId");
            });

            modelBuilder.Entity<OrganizationWage>(entity =>
            {
                entity.ToTable("OrganizationWages", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.ProfessionId).HasColumnName("professionId");

                entity.Property(e => e.Rank).HasColumnName("rank");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Wage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wage");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationWages)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationWages_organizations");

                entity.HasOne(d => d.Profession)
                    .WithMany(p => p.OrganizationWages)
                    .HasForeignKey(d => d.ProfessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationWages_Professions");
            });

            modelBuilder.Entity<OrganizationWagesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrganizationWagesView", "sn");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.ProfessionId).HasColumnName("professionId");

                entity.Property(e => e.ProfessionName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("professionName");

                entity.Property(e => e.Rank).HasColumnName("rank");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Wage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wage");
            });

            modelBuilder.Entity<OrganizationWasteClassificator>(entity =>
            {
                entity.ToTable("OrganizationWasteClassificators", "sn");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Таблица связка между организациями и ФККО фасетом");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.OrganizationWasteClassificators)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationWasteClassificators_Organization");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.OrganizationWasteClassificators)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationWasteClassificators_Property");
            });

            modelBuilder.Entity<OrganizationsUdb>(entity =>
            {
                entity.HasKey(e => new { e.OrgId, e.KodCl });

                entity.ToTable("OrganizationsUdb", "sn");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.KodCl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("kod_cl");

                entity.Property(e => e.KodObj)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("kod_obj");
            });

            modelBuilder.Entity<Owner>(entity =>
            {
                entity.ToTable("Owners", "sn");

                entity.HasIndex(e => e.OrgId, "IX_Owners_orgId");

                entity.HasIndex(e => e.PersonId, "IX_Owners_personId");

                entity.HasIndex(e => new { e.OrgId, e.PersonId }, "UX_owners_personId_orgId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.OrgId)
                    .HasColumnName("orgId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Organization");

                entity.Property(e => e.PersonId)
                    .HasColumnName("personId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Person");

                entity.Property(e => e.TypeOwner)
                    .HasColumnName("typeOwner")
                    .HasComment("Тип владения недвижимостью ; 1 - если владеет физ.лицо; 0 - если юр.лицо");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.Owners)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_owners_Organizations");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Owners)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_owners_persons");
            });

            modelBuilder.Entity<OwnersFromP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("owners_from_ps", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("account_number");

                entity.Property(e => e.Adr)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.DateBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("date_begin");

                entity.Property(e => e.DateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("date_end");

                entity.Property(e => e.Fio)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Ownership)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ownership");

                entity.Property(e => e.PsAddressId).HasColumnName("ps_address_id");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");
            });

            modelBuilder.Entity<OwnersFromSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("owners_from_sn", "tmp");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.DateBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("date_begin");

                entity.Property(e => e.Fio)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(646)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");

                entity.Property(e => e.SnPersonId).HasColumnName("sn_person_id");
            });

            modelBuilder.Entity<OwnersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OwnersView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.TypeOwner).HasColumnName("typeOwner");
            });

            modelBuilder.Entity<PayJn>(entity =>
            {
                entity.HasKey(e => new { e.AccountServiceId, e.Created, e.Period, e.CalcOperId, e.Id });

                entity.ToTable("PayJn", "sn");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.AccountService)
                    .WithMany(p => p.PayJns)
                    .HasForeignKey(d => d.AccountServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayJn_AccountServices");

                entity.HasOne(d => d.CalcOper)
                    .WithMany(p => p.PayJns)
                    .HasForeignKey(d => d.CalcOperId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayJn_CalcOperations");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.PayJns)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_PayJn_GroupOperations");

                entity.HasOne(d => d.ReesterRecord)
                    .WithMany(p => p.PayJns)
                    .HasForeignKey(d => d.ReesterRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PayJn_ReesterRecords");

                entity.HasOne(d => d.RemitteePaymentOrder)
                    .WithMany(p => p.PayJns)
                    .HasForeignKey(d => d.RemitteePaymentOrderId)
                    .HasConstraintName("FK_PayJn_RemitteePaymentOrders");
            });

            modelBuilder.Entity<PayJnView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PayJnView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountOwnerId).HasColumnName("accountOwnerId");

                entity.Property(e => e.AccountOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("accountOwnerName");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.ApartmentAddrId).HasColumnName("apartmentAddrId");

                entity.Property(e => e.ApartmentAddrLevel).HasColumnName("apartmentAddrLevel");

                entity.Property(e => e.ApartmentAddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentAddrName");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentParentAddrId).HasColumnName("apartmentParentAddrId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.Bankrupt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bankrupt");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.CalcOperName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcOperName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FinancialCenterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterName");

                entity.Property(e => e.FixedPayment)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("fixedPayment");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.OriginalSumm)
                    .HasColumnType("decimal(24, 2)")
                    .HasColumnName("originalSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceCodeName)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("serviceCodeName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("Payments", "sp");

                entity.HasIndex(e => new { e.AccountId, e.Created }, "IX_Payments__accountId_created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fio)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.OpCodeId).HasColumnName("opCodeId");

                entity.Property(e => e.ReversePaymentId).HasColumnName("reversePaymentId");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.Storno).HasColumnName("storno");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Terminal)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.Uno).HasColumnName("uno");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spPayments_Organizations_agentId");

                entity.HasOne(d => d.OpCode)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.OpCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spPayments_spOpCodes");

                entity.HasOne(d => d.ReversePayment)
                    .WithMany(p => p.InverseReversePayment)
                    .HasForeignKey(d => d.ReversePaymentId)
                    .HasConstraintName("FK_spPayments_reversePaymentId");

                entity.HasOne(d => d.ServiceProvider)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ServiceProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spPayments_spServiceProviderId");

                entity.HasOne(d => d.UnoNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.Uno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spPayments_payLocalTransactionId_uno");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spPayments_Users");
            });

            modelBuilder.Entity<PaymentMoreFixedSum>(entity =>
            {
                entity.ToTable("PaymentMoreFixedSums", "pay");

                entity.HasIndex(e => e.GroupOperationId, "IX_payPaymentMoreFixedSums__groupOperationId");

                entity.HasIndex(e => e.SpPaymentUno, "IX_payPaymentMoreFixedSums__spPaymentUno");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperationId).HasColumnName("groupOperationId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.SpPaymentUno).HasColumnName("spPaymentUno");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.GroupOperation)
                    .WithMany(p => p.PaymentMoreFixedSums)
                    .HasForeignKey(d => d.GroupOperationId)
                    .HasConstraintName("FK_PaymentMoreFixedSums_GroupOperations");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PaymentMoreFixedSums)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentMoreFixedSums_Persons");

                entity.HasOne(d => d.SpPaymentUnoNavigation)
                    .WithMany(p => p.PaymentMoreFixedSums)
                    .HasForeignKey(d => d.SpPaymentUno)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PaymentMoreFixedSums_LocalTransactions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PaymentMoreFixedSums)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentMoreFixedSums_Users");
            });

            modelBuilder.Entity<PaymentOrder>(entity =>
            {
                entity.ToTable("PaymentOrders", "notice");

                entity.HasIndex(e => e.Number, "UQ_NoticePaymentOrders_number")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddrInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.Archived).HasColumnName("archived");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.BankBik)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("bankBIK")
                    .IsFixedLength(true);

                entity.Property(e => e.BankInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankInfo");

                entity.Property(e => e.BankLoroAccount)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("bankLoroAccount");

                entity.Property(e => e.Barcode)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.ChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chiefAccountant");

                entity.Property(e => e.CountLine).HasColumnName("countLine");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateNotice)
                    .HasColumnType("date")
                    .HasColumnName("dateNotice");

                entity.Property(e => e.DocumentInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("documentInfo");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Inn)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.IsAdvance).HasColumnName("isAdvance");

                entity.Property(e => e.IsOnlyPeni).HasColumnName("isOnlyPeni");

                entity.Property(e => e.IsSaldo).HasColumnName("isSaldo");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.LegalEntityId).HasColumnName("legalEntityId");

                entity.Property(e => e.Manager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("manager");

                entity.Property(e => e.ManagerPosition)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("managerPosition");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocumentsId).HasColumnName("orgDocumentsId");

                entity.Property(e => e.OrgLegalEntityInn)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("orgLegalEntityINN");

                entity.Property(e => e.OrgLegalEntityKpp)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("orgLegalEntityKPP");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PaymentOrderTemplateId).HasColumnName("paymentOrderTemplateId");

                entity.Property(e => e.PaymentOwner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOwner");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PowerOfAttorneyChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("powerOfAttorneyChiefAccountant");

                entity.Property(e => e.PowerOfAttorneyManager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("powerOfAttorneyManager");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("recipientName");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("summ");

                entity.Property(e => e.TotalSquareSumm)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("totalSquareSumm");

                entity.Property(e => e.TypePeriod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("typePeriod")
                    .HasDefaultValueSql("('Счет сформирован \"ЗА\" периоде')");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<PaymentOrder1>(entity =>
            {
                entity.ToTable("PaymentOrders", "pay");

                entity.HasIndex(e => e.Date, "IX_PaymentOrders__date");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.IsCashier).HasColumnName("isCashier");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.HasOne(d => d.PaymentAgent)
                    .WithMany(p => p.PaymentOrder1s)
                    .HasForeignKey(d => d.PaymentAgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrders_Organizations");
            });

            modelBuilder.Entity<PaymentOrderAccount>(entity =>
            {
                entity.ToTable("PaymentOrderAccounts", "notice");

                entity.HasIndex(e => e.NoticePaymentOrderId, "IX_NoticePaymentOrderAccounts_NoticePaymentOrderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Address)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.City)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CountDay).HasColumnName("countDay");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.NoticePaymentOrderId).HasColumnName("noticePaymentOrderId");

                entity.Property(e => e.ServiceTariff)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("serviceTariff");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Street)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("summ");

                entity.Property(e => e.TotalArea)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalArea");

                entity.HasOne(d => d.NoticePaymentOrder)
                    .WithMany(p => p.PaymentOrderAccounts)
                    .HasForeignKey(d => d.NoticePaymentOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrderAccounts_PaymentOrders");
            });

            modelBuilder.Entity<PaymentOrderAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrderAccountsView", "notice");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Address)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.City)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.CountDay).HasColumnName("countDay");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Flat)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NoticePaymentOrderId).HasColumnName("noticePaymentOrderId");

                entity.Property(e => e.ServiceTariff)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("serviceTariff");

                entity.Property(e => e.ServiceType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceType");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Street)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("summ");

                entity.Property(e => e.TotalArea)
                    .HasColumnType("decimal(8, 3)")
                    .HasColumnName("totalArea");
            });

            modelBuilder.Entity<PaymentOrderLink>(entity =>
            {
                entity.ToTable("PaymentOrderLinks", "pay");

                entity.HasIndex(e => e.PaymentOrderChildId, "IX_PaymentOrderLinks_paymentOrderChildId");

                entity.HasIndex(e => e.PaymentOrderParentId, "IX_PaymentOrderLinks_paymentOrderParentId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PaymentOrderChildId).HasColumnName("paymentOrderChildId");

                entity.Property(e => e.PaymentOrderParentId).HasColumnName("paymentOrderParentId");

                entity.HasOne(d => d.PaymentOrderChild)
                    .WithMany(p => p.PaymentOrderLinkPaymentOrderChildren)
                    .HasForeignKey(d => d.PaymentOrderChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrders_PaymentOrderChildId");

                entity.HasOne(d => d.PaymentOrderParent)
                    .WithMany(p => p.PaymentOrderLinkPaymentOrderParents)
                    .HasForeignKey(d => d.PaymentOrderParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrders_PaymentOrderParentId");
            });

            modelBuilder.Entity<PaymentOrderLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrderLinksView", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PaymentOrderChildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderChildDate");

                entity.Property(e => e.PaymentOrderChildId).HasColumnName("paymentOrderChildId");

                entity.Property(e => e.PaymentOrderChildNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderChildNumber");

                entity.Property(e => e.PaymentOrderChildSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentOrderChildSumm");

                entity.Property(e => e.PaymentOrderParentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderParentDate");

                entity.Property(e => e.PaymentOrderParentId).HasColumnName("paymentOrderParentId");

                entity.Property(e => e.PaymentOrderParentNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderParentNumber");

                entity.Property(e => e.PaymentOrderParentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentOrderParentSumm");
            });

            modelBuilder.Entity<PaymentOrderPack>(entity =>
            {
                entity.ToTable("PaymentOrderPacks", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.PaymentOrder)
                    .WithMany(p => p.PaymentOrderPacks)
                    .HasForeignKey(d => d.PaymentOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrderPacks_PaymentOrders");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PaymentOrderPacks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrderPacks_Users__userId");
            });

            modelBuilder.Entity<PaymentOrderPackPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PaymentOrderPackPayments", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<PaymentOrderPackPaymentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrderPackPaymentsView", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<PaymentOrderPacksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrderPacksView", "pay");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PackSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("packSumm");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentCount).HasColumnName("paymentCount");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<PaymentOrderPayLink>(entity =>
            {
                entity.ToTable("PaymentOrderPayLinks", "notice");

                entity.HasIndex(e => e.JnId, "IX_PaymentOrderPayLinks_jnId");

                entity.HasIndex(e => e.NoticePaymentOrderId, "IX_PaymentOrderPayLinks_noticePaymentOrderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.NoticePaymentOrderId).HasColumnName("noticePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PaymentOrderTemplate>(entity =>
            {
                entity.ToTable("PaymentOrderTemplates", "notice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(250)
                    .HasColumnName("comment");

                entity.Property(e => e.IsActivity).HasColumnName("isActivity");

                entity.Property(e => e.IsAddDebtActionHistory)
                    .HasColumnName("isAddDebtActionHistory")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsAddReportFilters)
                    .HasColumnName("isAddReportFilters")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCodeTypePayment).HasColumnName("isCodeTypePayment");

                entity.Property(e => e.IsColDayPerformance)
                    .HasColumnName("isColDayPerformance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsMinCountDebt)
                    .HasColumnName("isMinCountDebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMonitor).HasColumnName("isMonitor");

                entity.Property(e => e.IsPartOneIndex).HasColumnName("isPartOneIndex");

                entity.Property(e => e.IsPayNotices)
                    .HasColumnName("isPayNotices")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsReport)
                    .HasColumnName("isReport")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSave)
                    .HasColumnName("isSave")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsVisible)
                    .HasColumnName("isVisible")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProcedureName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Template).IsUnicode(false);
            });

            modelBuilder.Entity<PaymentOrdersCashierView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrdersCashierView", "pay");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PackCount).HasColumnName("packCount");

                entity.Property(e => e.PackSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("packSumm");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentAgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgentName");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PaymentOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrdersView", "notice");

                entity.Property(e => e.AccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AddrInfo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.Archive)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("archive");

                entity.Property(e => e.Archived).HasColumnName("archived");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.BankBik)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("bankBIK")
                    .IsFixedLength(true);

                entity.Property(e => e.BankInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankInfo");

                entity.Property(e => e.BankLoroAccount)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("bankLoroAccount");

                entity.Property(e => e.ChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chiefAccountant");

                entity.Property(e => e.CountLine).HasColumnName("countLine");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateNotice)
                    .HasColumnType("date")
                    .HasColumnName("dateNotice");

                entity.Property(e => e.DocumentInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("documentInfo");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.IsAdvance).HasColumnName("isAdvance");

                entity.Property(e => e.IsOnlyPeni).HasColumnName("isOnlyPeni");

                entity.Property(e => e.IsSaldo).HasColumnName("isSaldo");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.LegalEntity)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("legalEntity");

                entity.Property(e => e.LegalEntityId).HasColumnName("legalEntityId");

                entity.Property(e => e.Manager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("manager");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrgDocumentsId).HasColumnName("orgDocumentsId");

                entity.Property(e => e.PaymentOrderTemplateId).HasColumnName("paymentOrderTemplateId");

                entity.Property(e => e.PaymentOwner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOwner");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Provider)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("provider");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("recipientName");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.SumPays)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("sumPays");

                entity.Property(e => e.SumRemnant)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("sumRemnant");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("summ");

                entity.Property(e => e.TotalSquareSumm)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("totalSquareSumm");

                entity.Property(e => e.TypePeriod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("typePeriod");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<PaymentOrdersView1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentOrdersView", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsChildPaymentOrder).HasColumnName("isChildPaymentOrder");

                entity.Property(e => e.IsParentPaymentOrder).HasColumnName("isParentPaymentOrder");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentAgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgentName");

                entity.Property(e => e.PaymentOrderLinkSumm)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("paymentOrderLinkSumm");

                entity.Property(e => e.PaymentOrderMainId).HasColumnName("paymentOrderMainId");

                entity.Property(e => e.PaymentOrderMainName)
                    .HasMaxLength(546)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderMainName");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ReesterCount).HasColumnName("reesterCount");

                entity.Property(e => e.ReesterSum)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("reesterSum");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<PaymentSystem>(entity =>
            {
                entity.ToTable("PaymentSystems", "pay");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.InsertApartmentCounterIndicationProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("insertApartmentCounterIndicationProcName");

                entity.Property(e => e.IsBankPaymentOrder).HasColumnName("isBankPaymentOrder");

                entity.Property(e => e.IsDeleteLoadedFiles)
                    .HasColumnName("isDeleteLoadedFiles")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsInsertIndicationsInPreProcess).HasColumnName("isInsertIndicationsInPreProcess");

                entity.Property(e => e.IsRequiredPaymentAgent)
                    .IsRequired()
                    .HasColumnName("isRequiredPaymentAgent")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название \"платежной системы\"");

                entity.Property(e => e.ParseProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("parseProcName");

                entity.Property(e => e.PivotApxReesterRecordProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("pivotApxReesterRecordProcName");

                entity.Property(e => e.PostProcessReesterProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("postProcessReesterProcName");

                entity.Property(e => e.PreProcessReesterProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("preProcessReesterProcName")
                    .HasComment("Хранимая процедура предобработки записей реестра платежей. Делает синтаксический разбор документостроки записанной в поле АРХ после чего разносит данные по полям таблицы");

                entity.Property(e => e.ProcessReesterRecordByHandProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("processReesterRecordByHandProcName");

                entity.Property(e => e.ProcessReesterRecordProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("processReesterRecordProcName")
                    .HasComment("Основная процедура обработки записей реестра платежей");

                entity.Property(e => e.RecordNameParse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecordStorageFormatId)
                    .HasColumnName("recordStorageFormatId")
                    .HasComment("Ссылка на FasetItevs. Определяет используемые разделители полей в строке поля АРХ");

                entity.Property(e => e.StartFolderForFiles)
                    .IsUnicode(false)
                    .HasColumnName("startFolderForFiles");

                entity.Property(e => e.UnpivotApxReesterRecordProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unpivotApxReesterRecordProcName");

                entity.HasOne(d => d.RecordStorageFormat)
                    .WithMany(p => p.PaymentSystems)
                    .HasForeignKey(d => d.RecordStorageFormatId)
                    .HasConstraintName("FK_PaymentSystems_FasetItems");
            });

            modelBuilder.Entity<PaymentSystemAgent>(entity =>
            {
                entity.ToTable("PaymentSystemAgents", "pay");

                entity.HasIndex(e => new { e.PaymentSystemId, e.ExternalNumber }, "UX_PaymentSystemAgents")
                    .IsUnique();

                entity.HasIndex(e => new { e.OrganizationId, e.PaymentSystemId, e.ExternalNumber }, "UX_payPaymentSystemAgents__organizationId_paymentSystemId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CashFlowTypeId).HasColumnName("cashFlowTypeId");

                entity.Property(e => e.CashlessOrgId).HasColumnName("cashlessOrgId");

                entity.Property(e => e.ExternalNumber)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("externalNumber");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PercentRateCommission)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percentRateCommission");

                entity.Property(e => e.PercentRateCommissionOnTop)
                    .HasColumnType("decimal(6, 3)")
                    .HasColumnName("percentRateCommissionOnTop");

                entity.Property(e => e.RoubleRateCommission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("roubleRateCommission");

                entity.HasOne(d => d.CashFlowType)
                    .WithMany(p => p.PaymentSystemAgents)
                    .HasForeignKey(d => d.CashFlowTypeId);

                entity.HasOne(d => d.CashlessOrg)
                    .WithMany(p => p.PaymentSystemAgentCashlessOrgs)
                    .HasForeignKey(d => d.CashlessOrgId);

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.PaymentSystemAgentOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentSystemAgents_Organizations");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PaymentSystemAgents)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentSystemAgents_PaymentSystem");
            });

            modelBuilder.Entity<PaymentSystemAgentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentSystemAgentsView", "pay");

                entity.Property(e => e.CashFlowTypeId).HasColumnName("cashFlowTypeId");

                entity.Property(e => e.CashFlowTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cashFlowTypeName");

                entity.Property(e => e.CashlessOrgId).HasColumnName("cashlessOrgId");

                entity.Property(e => e.CashlessOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cashlessOrgName");

                entity.Property(e => e.ExternalNumber)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("externalNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrganizationCode).HasColumnName("organizationCode");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.PercentRateCommission)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percentRateCommission");

                entity.Property(e => e.PercentRateCommissionOnTop)
                    .HasColumnType("decimal(6, 3)")
                    .HasColumnName("percentRateCommissionOnTop");

                entity.Property(e => e.RoubleRateCommission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("roubleRateCommission");
            });

            modelBuilder.Entity<PaymentSystemsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentSystemsView", "pay");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsertApartmentCounterIndicationProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("insertApartmentCounterIndicationProcName");

                entity.Property(e => e.IsBankPaymentOrder).HasColumnName("isBankPaymentOrder");

                entity.Property(e => e.IsDeleteLoadedFiles).HasColumnName("isDeleteLoadedFiles");

                entity.Property(e => e.IsRequiredPaymentAgent).HasColumnName("isRequiredPaymentAgent");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParseProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("parseProcName");

                entity.Property(e => e.PivotApxReesterRecordProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("pivotApxReesterRecordProcName");

                entity.Property(e => e.PostProcessReesterProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("postProcessReesterProcName");

                entity.Property(e => e.PreProcessReesterProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("preProcessReesterProcName");

                entity.Property(e => e.ProcessReesterRecordByHandProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("processReesterRecordByHandProcName");

                entity.Property(e => e.ProcessReesterRecordProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("processReesterRecordProcName");

                entity.Property(e => e.RecordNameParse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecordStorageFormatId).HasColumnName("recordStorageFormatId");

                entity.Property(e => e.RecordStorageFormatName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("recordStorageFormatName");

                entity.Property(e => e.StartFolderForFiles)
                    .IsUnicode(false)
                    .HasColumnName("startFolderForFiles");

                entity.Property(e => e.UnpivotApxReesterRecordProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unpivotApxReesterRecordProcName");
            });

            modelBuilder.Entity<PaymentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentsView", "sp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.Adr)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Fio)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OpCodeId).HasColumnName("opCodeId");

                entity.Property(e => e.ReversePaymentId).HasColumnName("reversePaymentId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.Storno).HasColumnName("storno");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Terminal)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.Uno).HasColumnName("uno");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<PeopleFromP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("people_from_ps", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_number");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.Fio)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Fname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fname");

                entity.Property(e => e.Lname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lname");

                entity.Property(e => e.Mname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mname");

                entity.Property(e => e.PsAddressId).HasColumnName("ps_address_id");

                entity.Property(e => e.PsPersonId).HasColumnName("ps_person_id");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");
            });

            modelBuilder.Entity<PeopleFromSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("people_from_sn", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("account_number");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.Fio)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fname");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("lname");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mname");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");

                entity.Property(e => e.SnPersonId).HasColumnName("sn_person_id");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("Persons", "sn");

                entity.HasIndex(e => e.AccountBenefit, "IX_Persons__accountBenefit");

                entity.HasIndex(e => e.BirthDate, "IX_Persons__birthDate");

                entity.HasIndex(e => new { e.LName, e.FName, e.MName, e.BirthDate }, "IX_Persons__lName_fName_mName__birthDate");

                entity.HasIndex(e => e.OrgBenefitId, "IX_Persons_orgBenefitId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit")
                    .HasComment("ЛС льготника (в расчетной организации)");

                entity.Property(e => e.AllowPersonalDataUsage)
                    .HasColumnName("allowPersonalDataUsage")
                    .HasComment("Раздрешение на использование персональных данных");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("birthPlace")
                    .HasComment("Место рождения");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания (занесения в БД)");

                entity.Property(e => e.DateBenefit)
                    .HasColumnType("datetime")
                    .HasColumnName("dateBenefit")
                    .HasComment("Дата расчета (в расчетной организации)");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата последнего изменения (в БД)");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc")
                    .HasComment("Дата документа");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName")
                    .HasComment("Имя");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fullName")
                    .HasComputedColumnSql("((isnull(ltrim(rtrim([lName])),'')+isnull(' '+ltrim(rtrim([fName])),''))+isnull(' '+ltrim(rtrim([mName])),''))", false)
                    .HasComment("Вычисляемое поле. Складывает поля Фамилия+ Имя+ Отчество");

                entity.Property(e => e.Inn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate")
                    .HasComment("СНИЛС");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.KodCl)
                    .HasColumnName("kod_cl")
                    .HasComment("Не используется");

                entity.Property(e => e.KodObj)
                    .HasColumnName("kod_obj")
                    .HasComment("Не используется");

                entity.Property(e => e.LName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName")
                    .HasComment("Фамилия");

                entity.Property(e => e.MName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName")
                    .HasComment("Отчество");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc")
                    .HasComment("Номер документа");

                entity.Property(e => e.OrgBenefitId)
                    .HasColumnName("orgBenefitId")
                    .HasComment("Отделение банка");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc")
                    .HasComment("Организация выдавшая документ");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc")
                    .HasComment("Серия документа");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.SubdivisionCodeDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subdivisionCodeDoc");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDoc)
                    .HasColumnName("typeDoc")
                    .HasComment("Тип документа");

                entity.HasOne(d => d.OrgBenefit)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.OrgBenefitId)
                    .HasConstraintName("FK_Persons_Organizations");

                entity.HasOne(d => d.SexNavigation)
                    .WithMany(p => p.PersonSexNavigations)
                    .HasForeignKey(d => d.Sex);

                entity.HasOne(d => d.TypeDocNavigation)
                    .WithMany(p => p.PersonTypeDocNavigations)
                    .HasForeignKey(d => d.TypeDoc)
                    .HasConstraintName("FK_Persons_FasetItems");
            });

            modelBuilder.Entity<PersonBenefit>(entity =>
            {
                entity.ToTable("PersonBenefits", "sn");

                entity.HasIndex(e => e.BenefitId, "IX_PersonBenefits__benefitId");

                entity.HasIndex(e => new { e.PersonId, e.BenefitId }, "IX_PersonBenefits_personId_benefitId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.PersonBenefits)
                    .HasForeignKey(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonBenefits_Benefits");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonBenefits)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonBenefits_Persons");
            });

            modelBuilder.Entity<PersonBenefitDocument>(entity =>
            {
                entity.ToTable("PersonBenefitDocuments", "sn");

                entity.HasIndex(e => e.PersonBenefitId, "IX_PersonBenefitDocuments__personBenefitId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CloseReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("closeReason");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.DateNotif)
                    .HasColumnType("datetime")
                    .HasColumnName("dateNotif");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.NumNotif)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("numNotif");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgNotif)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("orgNotif");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.TypeDoc).HasColumnName("typeDoc");

                entity.Property(e => e.WhereDoc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("whereDoc");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.PersonBenefitDocuments)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_PersonBenefitDocuments_Organizations");

                entity.HasOne(d => d.PersonBenefit)
                    .WithMany(p => p.PersonBenefitDocuments)
                    .HasForeignKey(d => d.PersonBenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonBenefitDocuments_PersonBenefits");

                entity.HasOne(d => d.TypeDocNavigation)
                    .WithMany(p => p.PersonBenefitDocuments)
                    .HasForeignKey(d => d.TypeDoc)
                    .HasConstraintName("FK_PersonBenefitDocuments_typeDoc");
            });

            modelBuilder.Entity<PersonBenefitOut>(entity =>
            {
                entity.ToTable("PersonBenefitOuts", "sn");

                entity.HasIndex(e => new { e.Period, e.PersonId }, "IX_PersonBenefitOuts_period_personid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.ByPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("byPeriod");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.IsDebt).HasColumnName("isDebt");

                entity.Property(e => e.IsDebtPrev).HasColumnName("isDebtPrev");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PersonBenefitOutServiceType>(entity =>
            {
                entity.ToTable("PersonBenefitOutServiceTypes", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ByPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("byPeriod");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.PersonBenefitOutId).HasColumnName("personBenefitOutId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PersonBenefitOutServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonBenefitOutServiceTypesView", "sn");

                entity.Property(e => e.ByPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("byPeriod");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.PersonBenefitOutId).HasColumnName("personBenefitOutId");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeExternalCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PersonBenefitOutsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonBenefitOutsView", "sn");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BenefitCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.ByPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("byPeriod");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<PersonBenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonBenefitsView", "sn");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.BenefitCode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("benefitCode");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.CloseReason)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("closeReason");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.DateNotif)
                    .HasColumnType("datetime")
                    .HasColumnName("dateNotif");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.NumNotif)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("numNotif");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.OrgNotif)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("orgNotif");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.TypeDocFasetId).HasColumnName("typeDocFasetId");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");

                entity.Property(e => e.WhereDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("whereDoc");
            });

            modelBuilder.Entity<PersonByOrganization>(entity =>
            {
                entity.HasKey(e => new { e.PersonId, e.OrgId });

                entity.ToTable("PersonByOrganizations", "sn");

                entity.HasIndex(e => e.Id, "IX_PersonByOrganizations_id");

                entity.HasIndex(e => e.OrgId, "IX_PersonByOrganizations_orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("birthPlace");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateBenefit)
                    .HasColumnType("datetime")
                    .HasColumnName("dateBenefit");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.OrgBenefitId).HasColumnName("orgBenefitId");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.SubdivisionCodeDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subdivisionCodeDoc");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TypeDoc).HasColumnName("typeDoc");

                entity.HasOne(d => d.OrgBenefit)
                    .WithMany(p => p.PersonByOrganizationOrgBenefits)
                    .HasForeignKey(d => d.OrgBenefitId)
                    .HasConstraintName("FK_PersonByOrganizations_Organizations");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.PersonByOrganizationOrgs)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonByOrganizations)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonByOrganizations_Persons");

                entity.HasOne(d => d.SexNavigation)
                    .WithMany(p => p.PersonByOrganizationSexNavigations)
                    .HasForeignKey(d => d.Sex);

                entity.HasOne(d => d.TypeDocNavigation)
                    .WithMany(p => p.PersonByOrganizationTypeDocNavigations)
                    .HasForeignKey(d => d.TypeDoc)
                    .HasConstraintName("FK_PersonByOrganizations_FasetItems");
            });

            modelBuilder.Entity<PersonByOrganizationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonByOrganizationsView", "sn");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AllowPersonalDataUsage).HasColumnName("allowPersonalDataUsage");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("birthPlace");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateBenefit)
                    .HasColumnType("datetime")
                    .HasColumnName("dateBenefit");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.LName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.OrgBenefitId).HasColumnName("orgBenefitId");

                entity.Property(e => e.OrgBenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgBenefitName");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.SexName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sexName");

                entity.Property(e => e.SubdivisionCodeDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subdivisionCodeDoc");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TypeDoc).HasColumnName("typeDoc");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");
            });

            modelBuilder.Entity<PersonDeclaration>(entity =>
            {
                entity.HasKey(e => new { e.PersonPhoneId, e.AccountId });

                entity.ToTable("PersonDeclarations", "sms");

                entity.HasIndex(e => e.AccountId, "IX_smsPersonDeclarations_accountId");

                entity.Property(e => e.PersonPhoneId).HasColumnName("personPhoneId");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PersonDeclarations)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDeclarations_AccountId");

                entity.HasOne(d => d.PersonPhone)
                    .WithMany(p => p.PersonDeclarations)
                    .HasForeignKey(d => d.PersonPhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDeclarations_PersonPhoneId");
            });

            modelBuilder.Entity<PersonFamily>(entity =>
            {
                entity.ToTable("PersonFamily", "sn");

                entity.HasIndex(e => e.FromPersonId, "IX_PersonFamily_fromPersonId");

                entity.HasIndex(e => e.ToPersonId, "IX_PersonFamily_toPersonId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromPersonId).HasColumnName("fromPersonId");

                entity.Property(e => e.RelationId).HasColumnName("relationId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToPersonId).HasColumnName("toPersonId");

                entity.HasOne(d => d.FromPerson)
                    .WithMany(p => p.PersonFamilyFromPeople)
                    .HasForeignKey(d => d.FromPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFamily_Persons_from");

                entity.HasOne(d => d.Relation)
                    .WithMany(p => p.PersonFamilies)
                    .HasForeignKey(d => d.RelationId)
                    .HasConstraintName("FK_PersonFamily_FasetItems");

                entity.HasOne(d => d.ToPerson)
                    .WithMany(p => p.PersonFamilyToPeople)
                    .HasForeignKey(d => d.ToPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFamily_Persons_to");
            });

            modelBuilder.Entity<PersonFamilyView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonFamilyView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromPersonId).HasColumnName("fromPersonId");

                entity.Property(e => e.FromPersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fromPersonName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RelationId).HasColumnName("relationId");

                entity.Property(e => e.RelationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("relationName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToPersonId).HasColumnName("toPersonId");

                entity.Property(e => e.ToPersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("toPersonName");
            });

            modelBuilder.Entity<PersonPhone>(entity =>
            {
                entity.ToTable("PersonPhone", "sms");

                entity.HasIndex(e => e.Phone, "IX_PersonPhone_Phone")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("date")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Fio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.GenerateToken).HasColumnName("generateToken");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<PersonPhoneEventType>(entity =>
            {
                entity.ToTable("PersonPhoneEventTypes", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.PersonPhoneId).HasColumnName("personPhoneId");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.PersonPhoneEventTypes)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhoneEventTypes_EventTypes");

                entity.HasOne(d => d.PersonPhone)
                    .WithMany(p => p.PersonPhoneEventTypes)
                    .HasForeignKey(d => d.PersonPhoneId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhoneEventTypes_PersonPhone");
            });

            modelBuilder.Entity<PersonPhoneEventTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonPhoneEventTypesView", "sms");

                entity.Property(e => e.Event)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("event");

                entity.Property(e => e.EventId).HasColumnName("eventId");

                entity.Property(e => e.EventTypeId).HasColumnName("eventTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsEvent).HasColumnName("isEvent");

                entity.Property(e => e.PersonPhoneId).HasColumnName("personPhoneId");
            });

            modelBuilder.Entity<PersonPhoneView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonPhoneView", "sms");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("date")
                    .HasColumnName("created");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Fio)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.GenerateToken).HasColumnName("generateToken");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<PersonPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonPropertiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsBedPatient).HasColumnName("isBedPatient");

                entity.Property(e => e.IsBedPatientName)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("isBedPatientName");

                entity.Property(e => e.IsInvalid).HasColumnName("isInvalid");

                entity.Property(e => e.IsInvalidName)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("isInvalidName");

                entity.Property(e => e.IsUnemployedPensioner).HasColumnName("isUnemployedPensioner");

                entity.Property(e => e.IsUnemployedPensionerName)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("isUnemployedPensionerName");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("personName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<PersonProperty>(entity =>
            {
                entity.ToTable("PersonProperties", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsBedPatient).HasColumnName("isBedPatient");

                entity.Property(e => e.IsInvalid).HasColumnName("isInvalid");

                entity.Property(e => e.IsUnemployedPensioner).HasColumnName("isUnemployedPensioner");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonProperties)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonProperties_Persons");
            });

            modelBuilder.Entity<PersonsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PersonsView", "sn");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AllowPersonalDataUsage).HasColumnName("allowPersonalDataUsage");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("birthPlace");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateBenefit)
                    .HasColumnType("datetime")
                    .HasColumnName("dateBenefit");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.OrgBenefitId).HasColumnName("orgBenefitId");

                entity.Property(e => e.OrgBenefitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgBenefitName");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.SexName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sexName");

                entity.Property(e => e.SubdivisionCodeDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subdivisionCodeDoc");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDoc).HasColumnName("typeDoc");

                entity.Property(e => e.TypeDocName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeDocName");
            });

            modelBuilder.Entity<ProviderCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProviderCode", "audit");

                entity.HasIndex(e => new { e.OldCode, e.NewCode, e.ServiceId }, "PK_ProviderCode")
                    .IsClustered();

                entity.Property(e => e.NewCode).HasColumnName("newCode");

                entity.Property(e => e.OldCode).HasColumnName("oldCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            });

            modelBuilder.Entity<Query>(entity =>
            {
                entity.ToTable("Query", "audit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Block)
                    .HasMaxLength(1)
                    .HasColumnName("block");

                entity.Property(e => e.BlockingSessionId).HasColumnName("blocking_session_id");

                entity.Property(e => e.CpuTime).HasColumnName("cpu_time");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Db)
                    .HasMaxLength(128)
                    .HasColumnName("db");

                entity.Property(e => e.DbLogin)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("db_login");

                entity.Property(e => e.DbUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("db_user");

                entity.Property(e => e.HostName)
                    .HasMaxLength(500)
                    .HasColumnName("host_name");

                entity.Property(e => e.LogicalReads).HasColumnName("logical_reads");

                entity.Property(e => e.Plan)
                    .HasColumnType("xml")
                    .HasColumnName("plan");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(500)
                    .HasColumnName("procName");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(500)
                    .HasColumnName("program_name");

                entity.Property(e => e.QueryText)
                    .HasColumnType("xml")
                    .HasColumnName("queryText");

                entity.Property(e => e.Reads).HasColumnName("reads");

                entity.Property(e => e.RunTime)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("runTime");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("status");

                entity.Property(e => e.Uid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("uid");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.WaitTime).HasColumnName("wait_time");

                entity.Property(e => e.WaitType)
                    .HasMaxLength(200)
                    .HasColumnName("wait_type");

                entity.Property(e => e.Writes).HasColumnName("writes");
            });

            modelBuilder.Entity<Reester>(entity =>
            {
                entity.ToTable("Reesters", "pay");

                entity.HasIndex(e => e.PaymentOrderId, "IX_Reesters__paymentOrderId");

                entity.HasIndex(e => new { e.Number, e.PaymentSystemId, e.OrganizationId }, "UX_Reesters__paymentSystemId_number_organizationId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.CommissionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("commissionSumm");

                entity.Property(e => e.CountNewConsumption).HasColumnName("countNewConsumption");

                entity.Property(e => e.CountNewConsumptionError).HasColumnName("countNewConsumptionError");

                entity.Property(e => e.CountRecordsWithCountersIndications).HasColumnName("countRecordsWithCountersIndications");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasComment("Дата обработки реестра");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasComment("Начальная дата периода за который произведена оплата");

                entity.Property(e => e.GroupOperIdForCountersIndications).HasColumnName("groupOperIdForCountersIndications");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.Md5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("md5");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComment("Название файла реестра который пытаемся загрузить");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization")
                    .HasComment("Платежный агент. Отображается в интерфейсе. На расчеты не влияет");

                entity.Property(e => e.OrganizationId)
                    .HasColumnName("organizationId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Organization");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderDate");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderPeriod");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem")
                    .HasComment("\"Платежная система\" определяет тип и формат файлов реестра");

                entity.Property(e => e.PaymentSystemId)
                    .HasColumnName("paymentSystemId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы PaymentSystem");

                entity.Property(e => e.ReasonReturnId).HasColumnName("reasonReturnId");

                entity.Property(e => e.Records)
                    .HasColumnName("records")
                    .HasComment("Количество записей в рестре");

                entity.Property(e => e.ReeTypeId).HasColumnName("reeTypeId");

                entity.Property(e => e.RepPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("repPaymentOrderDate");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.StatusId)
                    .HasColumnName("statusId")
                    .HasComment("Статус обработки. Ссылка на FasetItems");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ")
                    .HasComment("Сумма платежей по реестру");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate")
                    .HasComment("Конечная дата периода за который призведена оплата");

                entity.Property(e => e.TransferSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("transferSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.ReesterHouseHolders)
                    .HasForeignKey(d => d.HouseHolderId)
                    .HasConstraintName("FK_Reesters_HouseHolders");

                entity.HasOne(d => d.OrganizationNavigation)
                    .WithMany(p => p.ReesterOrganizationNavigations)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_Reesters_Organizations");

                entity.HasOne(d => d.PaymentOrder)
                    .WithMany(p => p.Reesters)
                    .HasForeignKey(d => d.PaymentOrderId)
                    .HasConstraintName("FK_Reesters_PaymentOrders");

                entity.HasOne(d => d.PaymentSystemNavigation)
                    .WithMany(p => p.Reesters)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .HasConstraintName("FK_Reesters_PaymentSystems");

                entity.HasOne(d => d.ReasonReturn)
                    .WithMany(p => p.ReesterReasonReturns)
                    .HasForeignKey(d => d.ReasonReturnId)
                    .HasConstraintName("FK_Reesters_ReasonReturn");

                entity.HasOne(d => d.ReeType)
                    .WithMany(p => p.ReesterReeTypes)
                    .HasForeignKey(d => d.ReeTypeId)
                    .HasConstraintName("FK_Reesters_FasetItems_ReeTypeId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReesterStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Reesters_FasetItems");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Reesters)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Reesters_Users__userId");
            });

            modelBuilder.Entity<ReesterRecord>(entity =>
            {
                entity.ToTable("ReesterRecords", "pay");

                entity.HasIndex(e => e.AccountNumber, "IX_ReesterRecords__accountNumber");

                entity.HasIndex(e => new { e.AccountNumber, e.PaymentSumm, e.PaymentDate, e.RequestId }, "IX_ReesterRecords__accountNumber_paymentSumm_paymentDate_requestId_i_id_reesterId");

                entity.HasIndex(e => e.ExternalTransactionId, "IX_ReesterRecords__externalTransactionId");

                entity.HasIndex(e => e.GroupOperId, "IX_ReesterRecords__groupOperId");

                entity.HasIndex(e => new { e.ReesterId, e.GroupOperId }, "IX_ReesterRecords__reesterId_groupOperId");

                entity.HasIndex(e => new { e.ReesterId, e.StatusId }, "IX_ReesterRecords__reesterId_statusId");

                entity.HasIndex(e => e.RequestId, "IX_ReesterRecords__requestId");

                entity.HasIndex(e => e.StatusId, "IX_ReesterRecords__statusId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("abonentName")
                    .HasComment("Фамилия владельца Лицевого счета");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber")
                    .HasComment("Номер лицевого счета по которому произведена оплата");

                entity.Property(e => e.AccountNumberProvider)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("accountNumberProvider");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address")
                    .HasComment("Адрес лицевого счета");

                entity.Property(e => e.Apx)
                    .IsUnicode(false)
                    .HasColumnName("apx")
                    .HasComment("Документострока платенжа из реестра");

                entity.Property(e => e.ApxCounter)
                    .IsUnicode(false)
                    .HasColumnName("apxCounter");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CardType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cardType");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error")
                    .HasComment("Сообщение об ошибке");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IsChargePenalty).HasColumnName("isChargePenalty");

                entity.Property(e => e.IsNewConsumption).HasColumnName("isNewConsumption");

                entity.Property(e => e.IsNewCounterConsumption).HasColumnName("isNewCounterConsumption");

                entity.Property(e => e.OtherPaymentAttributeId).HasColumnName("otherPaymentAttributeId");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate")
                    .HasComment("Дата платежа");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm")
                    .HasComment("Сумма платежа ");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period")
                    .HasComment("Начальная дата периода");

                entity.Property(e => e.ProviderCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("providerCode");

                entity.Property(e => e.ReesterId)
                    .HasColumnName("reesterId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Reesters");

                entity.Property(e => e.ReesterRecordTypeFasetId).HasColumnName("reesterRecordTypeFasetId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.StatusId)
                    .HasColumnName("statusId")
                    .HasComment("Статус обработки строки. Ссылается на FasetItems");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.ToPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("toPeriod")
                    .HasComment("Конечная дата периода");

                entity.Property(e => e.TransactionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("transactionSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.ReesterRecords)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_ReesterRecords_GroupOperations");

                entity.HasOne(d => d.OtherPaymentAttribute)
                    .WithMany(p => p.ReesterRecordOtherPaymentAttributes)
                    .HasForeignKey(d => d.OtherPaymentAttributeId)
                    .HasConstraintName("FK_ReesterRecord_FasetItems_OtherPaymentAttributeId");

                entity.HasOne(d => d.Reester)
                    .WithMany(p => p.ReesterRecords)
                    .HasForeignKey(d => d.ReesterId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ReesterRecords_Reesters");

                entity.HasOne(d => d.ReesterRecordTypeFaset)
                    .WithMany(p => p.ReesterRecordReesterRecordTypeFasets)
                    .HasForeignKey(d => d.ReesterRecordTypeFasetId)
                    .HasConstraintName("FK_ReesterRecords_FasetItems__requestTypeFasetId");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReesterRecordStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_ReesterRecords_FasetItems");
            });

            modelBuilder.Entity<ReesterRecordError>(entity =>
            {
                entity.ToTable("ReesterRecordErrors", "pay");

                entity.HasIndex(e => e.ReesterRecordId, "IX_ReesterRecordErrors_reesterRecordId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Error)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ErrorId).HasColumnName("errorId");

                entity.Property(e => e.ErrorTypeId).HasColumnName("errorTypeId");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");
            });

            modelBuilder.Entity<ReesterRecordErrorsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReesterRecordErrorsView", "pay");

                entity.Property(e => e.ErrorId).HasColumnName("errorId");

                entity.Property(e => e.ErrorName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("errorName");

                entity.Property(e => e.ErrorTypeId).HasColumnName("errorTypeId");

                entity.Property(e => e.ErrorTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("errorTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");
            });

            modelBuilder.Entity<ReesterRecordsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReesterRecordsView", "pay");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("abonentName");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountNumberProvider)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("accountNumberProvider");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.Apx)
                    .IsUnicode(false)
                    .HasColumnName("apx");

                entity.Property(e => e.ApxCounter)
                    .IsUnicode(false)
                    .HasColumnName("apxCounter");

                entity.Property(e => e.CardType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cardType");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IsChargePenalty).HasColumnName("isChargePenalty");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OtherPaymentAttributeId).HasColumnName("otherPaymentAttributeId");

                entity.Property(e => e.OtherPaymentAttributeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("otherPaymentAttributeName");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProviderCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("providerCode");

                entity.Property(e => e.ReesterId).HasColumnName("reesterId");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordTypeFasetId).HasColumnName("reesterRecordTypeFasetId");

                entity.Property(e => e.ReesterRecordTypeFasetName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterRecordTypeFasetName");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.ToPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("toPeriod");

                entity.Property(e => e.TransactionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("transactionSumm");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<ReestersNotProcessedView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReestersNotProcessedView", "pay");

                entity.Property(e => e.ReesterId).HasColumnName("reesterId");
            });

            modelBuilder.Entity<ReestersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReestersView", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("commissionSumm");

                entity.Property(e => e.CountNewConsumption).HasColumnName("countNewConsumption");

                entity.Property(e => e.CountNewConsumptionError).HasColumnName("countNewConsumptionError");

                entity.Property(e => e.CountRecordsWithCountersIndications).HasColumnName("countRecordsWithCountersIndications");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IsComparingBankRecord)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("isComparingBankRecord");

                entity.Property(e => e.Md5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("md5");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PaymentOrderAgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderAgentName");

                entity.Property(e => e.PaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderDate");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderNumber");

                entity.Property(e => e.PaymentOrderPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderPeriod");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.ReasonReturnId).HasColumnName("reasonReturnId");

                entity.Property(e => e.ReasonReturnName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonReturnName");

                entity.Property(e => e.Records).HasColumnName("records");

                entity.Property(e => e.ReeTypeId).HasColumnName("reeTypeId");

                entity.Property(e => e.ReeTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reeTypeName");

                entity.Property(e => e.RepPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("repPaymentOrderDate");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.SummNotProcessed)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("summNotProcessed");

                entity.Property(e => e.SummProcessed)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summProcessed");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransferSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("transferSumm");
            });

            modelBuilder.Entity<ReestersViewNoCheckSumm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReestersViewNoCheckSumm", "pay");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.ClientName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("commissionSumm");

                entity.Property(e => e.CountNewConsumption).HasColumnName("countNewConsumption");

                entity.Property(e => e.CountNewConsumptionError).HasColumnName("countNewConsumptionError");

                entity.Property(e => e.CountRecordsWithCountersIndications).HasColumnName("countRecordsWithCountersIndications");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FileName)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("indicationDate");

                entity.Property(e => e.IsComparingBankRecord)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("isComparingBankRecord");

                entity.Property(e => e.Md5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("md5");

                entity.Property(e => e.Number)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PaymentOrderAgentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderAgentName");

                entity.Property(e => e.PaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderDate");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderNumber");

                entity.Property(e => e.PaymentOrderPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderPeriod");

                entity.Property(e => e.PaymentSystem)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PaymentSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystemName");

                entity.Property(e => e.ReasonReturnId).HasColumnName("reasonReturnId");

                entity.Property(e => e.ReasonReturnName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reasonReturnName");

                entity.Property(e => e.Records).HasColumnName("records");

                entity.Property(e => e.ReeTypeId).HasColumnName("reeTypeId");

                entity.Property(e => e.ReeTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reeTypeName");

                entity.Property(e => e.RepPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("repPaymentOrderDate");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.SummNotProcessed)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summNotProcessed");

                entity.Property(e => e.SummProcessed)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("summProcessed");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransferSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("transferSumm");
            });

            modelBuilder.Entity<RefinancingRatesByPeriod>(entity =>
            {
                entity.ToTable("RefinancingRatesByPeriod", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.RefinancingRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("refinancingRate");
            });

            modelBuilder.Entity<RegistrationsFromP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("registrations_from_ps", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account_number");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.DateChangeFio)
                    .HasColumnType("datetime")
                    .HasColumnName("date_change_fio");

                entity.Property(e => e.Fio)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Fname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fname");

                entity.Property(e => e.Lname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lname");

                entity.Property(e => e.Mname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mname");

                entity.Property(e => e.OldLastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("old_last_name");

                entity.Property(e => e.PsAddressId).HasColumnName("ps_address_id");

                entity.Property(e => e.PsPersonId).HasColumnName("ps_person_id");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");

                entity.Property(e => e.UnregDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unreg_date");
            });

            modelBuilder.Entity<RegistrationsFromSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("registrations_from_sn", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("account_number");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthdate");

                entity.Property(e => e.Fio)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fname");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("lname");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mname");

                entity.Property(e => e.RegDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reg_date");

                entity.Property(e => e.SnAddressId).HasColumnName("sn_address_id");

                entity.Property(e => e.SnPersonId).HasColumnName("sn_person_id");

                entity.Property(e => e.UnregDate)
                    .HasColumnType("datetime")
                    .HasColumnName("unreg_date");
            });

            modelBuilder.Entity<Remittee>(entity =>
            {
                entity.ToTable("Remittees", "sn");

                entity.HasIndex(e => new { e.RemitteeOrgId, e.ClientDocId }, "UX_Remittees__remitteeOrgId_clientDocId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.ClientDocId).HasColumnName("clientDocId");

                entity.Property(e => e.RemitteeOrgId).HasColumnName("remitteeOrgId");

                entity.HasOne(d => d.BankAccount)
                    .WithMany(p => p.Remittees)
                    .HasForeignKey(d => d.BankAccountId)
                    .HasConstraintName("FK_Remittees_BankAccount");

                entity.HasOne(d => d.ClientDoc)
                    .WithMany(p => p.Remittees)
                    .HasForeignKey(d => d.ClientDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Remittees_OrgDocuments");

                entity.HasOne(d => d.RemitteeOrg)
                    .WithMany(p => p.Remittees)
                    .HasForeignKey(d => d.RemitteeOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Remittees_Organizations");
            });

            modelBuilder.Entity<RemitteePaymentOrder>(entity =>
            {
                entity.ToTable("RemitteePaymentOrders", "sn");

                entity.HasIndex(e => e.Number, "UX_RemitteePaymentOrders__number")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.RemitteeId).HasColumnName("remitteeId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Remittee)
                    .WithMany(p => p.RemitteePaymentOrders)
                    .HasForeignKey(d => d.RemitteeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RemitteePaymentOrders_Remittees");
            });

            modelBuilder.Entity<RemitteePaymentOrderUploading>(entity =>
            {
                entity.ToTable("RemitteePaymentOrderUploadings", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Format)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("format");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Sql)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("sql");
            });

            modelBuilder.Entity<RemitteePaymentOrdersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RemitteePaymentOrdersView", "sn");

                entity.Property(e => e.ClientDocOrgId).HasColumnName("clientDocOrgId");

                entity.Property(e => e.ClientDocOrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("clientDocOrgName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.RemitteeId).HasColumnName("remitteeId");

                entity.Property(e => e.RemitteeOrgId).HasColumnName("remitteeOrgId");

                entity.Property(e => e.RemitteeOrgShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("remitteeOrgShortName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<RemitteeService>(entity =>
            {
                entity.ToTable("RemitteeServices", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate }, "UIX_RemitteServices__serviceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsRemitteeCommission).HasColumnName("isRemitteeCommission");

                entity.Property(e => e.RemitteeId).HasColumnName("remitteeId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.Remittee)
                    .WithMany(p => p.RemitteeServices)
                    .HasForeignKey(d => d.RemitteeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RemitteeServices_Remittees");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.RemitteeServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RemitteeServices_Services");
            });

            modelBuilder.Entity<RemitteeServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RemitteeServicesView", "sn");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsRemitteeCommission).HasColumnName("isRemitteeCommission");

                entity.Property(e => e.RemitteeClientDocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remitteeClientDocNumber");

                entity.Property(e => e.RemitteeClientDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("remitteeClientDocOrgName");

                entity.Property(e => e.RemitteeId).HasColumnName("remitteeId");

                entity.Property(e => e.RemitteeOrgCode).HasColumnName("remitteeOrgCode");

                entity.Property(e => e.RemitteeOrgShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("remitteeOrgShortName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");
            });

            modelBuilder.Entity<RemitteesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RemitteesView", "sn");

                entity.Property(e => e.BankAccountId).HasColumnName("bankAccountId");

                entity.Property(e => e.BankAccountNumber)
                    .HasColumnType("decimal(20, 0)")
                    .HasColumnName("bankAccountNumber");

                entity.Property(e => e.BankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("bankName");

                entity.Property(e => e.BankOwnerName)
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("bankOwnerName");

                entity.Property(e => e.ClientDocId).HasColumnName("clientDocId");

                entity.Property(e => e.ClientDocIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("clientDocIssueDate");

                entity.Property(e => e.ClientDocNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("clientDocNumber");

                entity.Property(e => e.ClientDocOrgId).HasColumnName("clientDocOrgId");

                entity.Property(e => e.ClientDocOrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("clientDocOrgName");

                entity.Property(e => e.Comment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RemitteeOrgCode).HasColumnName("remitteeOrgCode");

                entity.Property(e => e.RemitteeOrgId).HasColumnName("remitteeOrgId");

                entity.Property(e => e.RemitteeOrgShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("remitteeOrgShortName");
            });

            modelBuilder.Entity<RenderedNotice>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountId, e.NoticeTemplateSettingId })
                    .HasName("PK__noticeRenderedNotices");

                entity.ToTable("RenderedNotices", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeRenderedNotices__id")
                    .IsUnique();

                entity.HasIndex(e => new { e.Period, e.AccountId, e.HouseHolderId }, "IX__noticeRenderedNotices__period_accountId_houseHolderId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.AccountCsv)
                    .IsUnicode(false)
                    .HasColumnName("accountCSV");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GeneralParams)
                    .IsUnicode(false)
                    .HasColumnName("generalParams");

                entity.Property(e => e.HasResult).HasColumnName("hasResult");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.PacketReport).HasColumnName("packetReport");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PrintTypeId).HasColumnName("printTypeId");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.RenderedNotices)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FK_noticeRenderedNotices_actionId");
            });

            modelBuilder.Entity<RenderedNoticesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RenderedNoticesView", "notice");

                entity.Property(e => e.AccountCsv)
                    .IsUnicode(false)
                    .HasColumnName("accountCSV");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.ApartmentNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.Barcode)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("barcode");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FlatSortValue)
                    .IsUnicode(false)
                    .HasColumnName("flatSortValue");

                entity.Property(e => e.GeneralParams)
                    .IsUnicode(false)
                    .HasColumnName("generalParams");

                entity.Property(e => e.HasResult).HasColumnName("hasResult");

                entity.Property(e => e.HouseAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseAddressName");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.HouseSortValue)
                    .IsUnicode(false)
                    .HasColumnName("houseSortValue");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NoticeTemplateId).HasColumnName("noticeTemplateId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.PacketReport).HasColumnName("packetReport");

                entity.Property(e => e.PageCount).HasColumnName("pageCount");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PrintTypeId).HasColumnName("printTypeId");

                entity.Property(e => e.PrintTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printTypeName");

                entity.Property(e => e.StreetName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("streetName");
            });

            modelBuilder.Entity<RepReportTemplatesBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("rep_ReportTemplates_backup", "db");

                entity.Property(e => e.AccountProperty).HasColumnName("accountProperty");

                entity.Property(e => e.Addresses).HasColumnName("addresses");

                entity.Property(e => e.AdministrationDistrict).HasColumnName("administrationDistrict");

                entity.Property(e => e.ApartmentTypes).HasColumnName("apartmentTypes");

                entity.Property(e => e.BankAccounts).HasColumnName("bankAccounts");

                entity.Property(e => e.Benefits).HasColumnName("benefits");

                entity.Property(e => e.CalcOperationGroups).HasColumnName("calcOperationGroups");

                entity.Property(e => e.CanonicalServices).HasColumnName("canonicalServices");

                entity.Property(e => e.CityBorough).HasColumnName("cityBorough");

                entity.Property(e => e.ConvenienceTypes).HasColumnName("convenienceTypes");

                entity.Property(e => e.DatePeriod).HasColumnName("datePeriod");

                entity.Property(e => e.Debt).HasColumnName("debt");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.ExistsBenefitDiff).HasColumnName("existsBenefitDiff");

                entity.Property(e => e.FasetFilterId).HasColumnName("fasetFilterId");

                entity.Property(e => e.HouseTypes).HasColumnName("houseTypes");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsAppending).HasColumnName("isAppending");

                entity.Property(e => e.IsAvailableInProvider).HasColumnName("isAvailableInProvider");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.Location)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.MinSumm).HasColumnName("minSumm");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationAccountOwner).HasColumnName("organizationAccountOwner");

                entity.Property(e => e.OrgsApartmentArea).HasColumnName("orgsApartmentArea");

                entity.Property(e => e.OrgsBank).HasColumnName("orgsBank");

                entity.Property(e => e.OrgsCashlessTransferrers).HasColumnName("orgsCashlessTransferrers");

                entity.Property(e => e.OrgsFinancialCenters).HasColumnName("orgsFinancialCenters");

                entity.Property(e => e.OrgsHouseHolders).HasColumnName("orgsHouseHolders");

                entity.Property(e => e.OrgsPaymentAgents).HasColumnName("orgsPaymentAgents");

                entity.Property(e => e.OrgsResourceProviders).HasColumnName("orgsResourceProviders");

                entity.Property(e => e.OrgsServiceHouseHolders).HasColumnName("orgsServiceHouseHolders");

                entity.Property(e => e.OrgsServiceProviders).HasColumnName("orgsServiceProviders");

                entity.Property(e => e.PaymentAgentTypes).HasColumnName("paymentAgentTypes");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.ReesterTypes).HasColumnName("reesterTypes");

                entity.Property(e => e.ReportGroupId).HasColumnName("reportGroupId");

                entity.Property(e => e.ServiceApartmentTypeFasetItemId).HasColumnName("serviceApartmentTypeFasetItemId");

                entity.Property(e => e.ServiceTypes).HasColumnName("serviceTypes");

                entity.Property(e => e.Services).HasColumnName("services");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.SqlDefault)
                    .IsUnicode(false)
                    .HasColumnName("sqlDefault");

                entity.Property(e => e.Template)
                    .HasColumnType("text")
                    .HasColumnName("template");

                entity.Property(e => e.TemplateDefault)
                    .HasColumnType("text")
                    .HasColumnName("templateDefault");

                entity.Property(e => e.Terminals).HasColumnName("terminals");

                entity.Property(e => e.TextParameter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("textParameter");

                entity.Property(e => e.TypeRecalcReasons).HasColumnName("typeRecalcReasons");

                entity.Property(e => e.Users).HasColumnName("users");

                entity.Property(e => e.WithRenderParameters).HasColumnName("withRenderParameters");

                entity.Property(e => e.WithSave).HasColumnName("withSave");

                entity.Property(e => e.WithoutBankrupt).HasColumnName("withoutBankrupt");

                entity.Property(e => e.WithoutClosesApartments).HasColumnName("withoutClosesApartments");
            });

            modelBuilder.Entity<ReplicateJob>(entity =>
            {
                entity.ToTable("ReplicateJobs", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Finished)
                    .HasColumnType("datetime")
                    .HasColumnName("finished");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Started)
                    .HasColumnType("datetime")
                    .HasColumnName("started");

                entity.Property(e => e.StatusId).HasColumnName("statusId");
            });

            modelBuilder.Entity<ReplicateJobParameter>(entity =>
            {
                entity.ToTable("ReplicateJobParameters", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JobId).HasColumnName("jobId");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PrintName)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.ReplicateJobParameters)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ReplicateJobParameters_jobId");
            });

            modelBuilder.Entity<ReplicateJobParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReplicateJobParametersView", "sn");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.JobId).HasColumnName("jobId");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PrintName)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<ReplicateJobPartial>(entity =>
            {
                entity.ToTable("ReplicateJobPartials", "sn");

                entity.HasIndex(e => new { e.JobId, e.Num }, "IX_ReplicateJobPartials_jobId_num");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ErrorAccept)
                    .IsUnicode(false)
                    .HasColumnName("errorAccept");

                entity.Property(e => e.ErrorProcess)
                    .IsUnicode(false)
                    .HasColumnName("errorProcess");

                entity.Property(e => e.Finished)
                    .HasColumnType("datetime")
                    .HasColumnName("finished");

                entity.Property(e => e.IsResult).HasColumnName("isResult");

                entity.Property(e => e.JobId).HasColumnName("jobId");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.ServerId).HasColumnName("serverId");

                entity.Property(e => e.Started)
                    .HasColumnType("datetime")
                    .HasColumnName("started");
            });

            modelBuilder.Entity<ReplicateJobPartialAccountService>(entity =>
            {
                entity.ToTable("ReplicateJobPartialAccountServices", "sn");

                entity.HasIndex(e => e.JobPartialId, "IX_ReplicateJobPartialAccountServices_jobPartialId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.JobPartialId).HasColumnName("jobPartialId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<ReplicateJobPartialLocalTask>(entity =>
            {
                entity.ToTable("ReplicateJobPartialLocalTasks", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ErrorAccept)
                    .IsUnicode(false)
                    .HasColumnName("errorAccept");

                entity.Property(e => e.ErrorProcess)
                    .IsUnicode(false)
                    .HasColumnName("errorProcess");

                entity.Property(e => e.IsAccept).HasColumnName("isAccept");

                entity.Property(e => e.IsResult).HasColumnName("isResult");

                entity.Property(e => e.JobPartialId).HasColumnName("jobPartialId");

                entity.Property(e => e.Started)
                    .HasColumnType("datetime")
                    .HasColumnName("started");
            });

            modelBuilder.Entity<ReplicateJobPartialLocalTasksParameter>(entity =>
            {
                entity.ToTable("ReplicateJobPartialLocalTasksParameters", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JobPartialId).HasColumnName("jobPartialId");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<ReplicateJobPartialMessage>(entity =>
            {
                entity.ToTable("ReplicateJobPartialMessages", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.JobPartialId).HasColumnName("jobPartialId");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.MessageText)
                    .IsUnicode(false)
                    .HasColumnName("messageText");

                entity.Property(e => e.ServerName)
                    .IsUnicode(false)
                    .HasColumnName("serverName");

                entity.Property(e => e.TimeElapsed).HasColumnName("timeElapsed");
            });

            modelBuilder.Entity<ReplicateJobPartialMessagesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReplicateJobPartialMessagesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JobId).HasColumnName("jobId");

                entity.Property(e => e.JobPartialId).HasColumnName("jobPartialId");

                entity.Property(e => e.JobPartialNum).HasColumnName("jobPartialNum");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.MessageText)
                    .IsUnicode(false)
                    .HasColumnName("messageText");

                entity.Property(e => e.ServerName)
                    .IsUnicode(false)
                    .HasColumnName("serverName");

                entity.Property(e => e.TimeElapsed).HasColumnName("timeElapsed");
            });

            modelBuilder.Entity<ReplicateJobsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReplicateJobsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Finished)
                    .HasColumnType("datetime")
                    .HasColumnName("finished");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PartsCount).HasColumnName("partsCount");

                entity.Property(e => e.PartsPercentDone)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("partsPercentDone");

                entity.Property(e => e.PartsResultCount).HasColumnName("partsResultCount");

                entity.Property(e => e.Started)
                    .HasColumnType("datetime")
                    .HasColumnName("started");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<ReplicateServer>(entity =>
            {
                entity.ToTable("ReplicateServers", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MainLinkedName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("mainLinkedName");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.StatusId).HasColumnName("statusId");
            });

            modelBuilder.Entity<ReplicateServersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReplicateServersView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MainLinkedName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("mainLinkedName");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("Reports", "rep");

                entity.HasIndex(e => e.UserId, "IX_Reports_userId_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CountFail)
                    .HasColumnName("countFail")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FinishTime)
                    .HasColumnType("datetime")
                    .HasColumnName("finishTime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("hostName")
                    .HasDefaultValueSql("(host_name())");

                entity.Property(e => e.IsVip).HasColumnName("isVIP");

                entity.Property(e => e.PlannedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("plannedDate");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.Result)
                    .HasColumnType("text")
                    .HasColumnName("result");

                entity.Property(e => e.SovaRequestId).HasColumnName("sovaRequestId");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("startTime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<ReportGroup>(entity =>
            {
                entity.ToTable("ReportGroups", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsGroupOperation).HasColumnName("isGroupOperation");

                entity.Property(e => e.IsVisible)
                    .IsRequired()
                    .HasColumnName("isVisible")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ReportPackedResult>(entity =>
            {
                entity.ToTable("ReportPackedResults", "rep");

                entity.HasIndex(e => e.ReportId, "UIX_ReportPackedResults_reportId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PackedResult)
                    .IsRequired()
                    .HasColumnName("packedResult");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.HasOne(d => d.Report)
                    .WithOne(p => p.ReportPackedResult)
                    .HasForeignKey<ReportPackedResult>(d => d.ReportId)
                    .HasConstraintName("FK_ReportPackedResults_reportId");
            });

            modelBuilder.Entity<ReportParameter>(entity =>
            {
                entity.ToTable("ReportParameters", "rep");

                entity.HasIndex(e => new { e.ReportId, e.Name }, "IX_ReportParameters_reportId_name");

                entity.HasIndex(e => new { e.ReportId, e.PrintName, e.PrintValue }, "IX_ReportParameters_reportId_printName_printValue");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportParameters)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportParametrs_ReportArea");
            });

            modelBuilder.Entity<ReportPrintEnvelope>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportPrintEnvelopes", "notice");

                entity.Property(e => e.AccountsCount).HasColumnName("accountsCount");

                entity.Property(e => e.BaseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("baseName");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.EnvelopsCount).HasColumnName("envelopsCount");

                entity.Property(e => e.House)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.PagesCount).HasColumnName("pagesCount");

                entity.Property(e => e.PrintTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printTypeName");

                entity.Property(e => e.SheetsCount).HasColumnName("sheetsCount");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<ReportPrintNotice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportPrintNotices", "notice");

                entity.Property(e => e.AccountsCount).HasColumnName("accountsCount");

                entity.Property(e => e.ApartmentsCount).HasColumnName("apartmentsCount");

                entity.Property(e => e.BaseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("baseName");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.House)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.NoticeTemplateSettingName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("noticeTemplateSettingName");

                entity.Property(e => e.PagesCount).HasColumnName("pagesCount");

                entity.Property(e => e.PrintTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printTypeName");

                entity.Property(e => e.SheetsCount).HasColumnName("sheetsCount");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<ReportPrintPrint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportPrintPrints", "notice");

                entity.Property(e => e.AccountsCount).HasColumnName("accountsCount");

                entity.Property(e => e.BaseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("baseName");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.House)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.PagesCount).HasColumnName("pagesCount");

                entity.Property(e => e.PrintTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printTypeName");

                entity.Property(e => e.SheetsCount).HasColumnName("sheetsCount");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<ReportReportSheduler>(entity =>
            {
                entity.ToTable("ReportReportShedulers", "rep");

                entity.HasIndex(e => e.ReportId, "IX_Reports_reportId");

                entity.HasIndex(e => e.ReportShedulerId, "IX_Reports_reportShedulerId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.ReportShedulerId).HasColumnName("reportShedulerId");

                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportReportShedulers)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportReportShedulers_Reports");

                entity.HasOne(d => d.ReportSheduler)
                    .WithMany(p => p.ReportReportShedulers)
                    .HasForeignKey(d => d.ReportShedulerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportReportShedulers_ReportShedulers");
            });

            modelBuilder.Entity<ReportResult>(entity =>
            {
                entity.ToTable("ReportResults", "rep");

                entity.HasIndex(e => e.ReportId, "IX_ReportResults_reportId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.Record)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("record");

                entity.Property(e => e.ReportId).HasColumnName("reportId");
            });

            modelBuilder.Entity<ReportServiceStatus>(entity =>
            {
                entity.ToTable("ReportServiceStatuses", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CheckTime)
                    .HasColumnType("datetime")
                    .HasColumnName("checkTime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsLog)
                    .HasColumnName("isLog")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mssg)
                    .IsUnicode(false)
                    .HasColumnName("mssg");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<ReportSheduler>(entity =>
            {
                entity.ToTable("ReportShedulers", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompleateCount).HasColumnName("compleateCount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DayBeginAllowShift)
                    .IsRequired()
                    .HasColumnName("dayBeginAllowShift")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Enable).HasColumnName("enable");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("interval")
                    .HasDefaultValueSql("('м')");

                entity.Property(e => e.IntervalValue)
                    .HasColumnName("intervalValue")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LimitTimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("limitTimeBegin");

                entity.Property(e => e.LimitTimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("limitTimeEnd");

                entity.Property(e => e.NextTime)
                    .HasColumnType("datetime")
                    .HasColumnName("nextTime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.ShiftDateBegin).HasColumnName("shiftDateBegin");

                entity.Property(e => e.ShiftDateEnd).HasColumnName("shiftDateEnd");

                entity.Property(e => e.ShiftSecondDateBegin).HasColumnName("shiftSecondDateBegin");

                entity.Property(e => e.ShiftSecondDateEnd).HasColumnName("shiftSecondDateEnd");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<ReportShedulerParameter>(entity =>
            {
                entity.ToTable("ReportShedulerParameters", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.PrintValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("printValue");

                entity.Property(e => e.ReportId).HasColumnName("reportId");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<ReportShedulersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportShedulersView", "rep");

                entity.Property(e => e.CompleateCount).HasColumnName("compleateCount");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DayBeginAllowShift).HasColumnName("dayBeginAllowShift");

                entity.Property(e => e.Enable).HasColumnName("enable");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Interval)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("interval");

                entity.Property(e => e.IntervalValue).HasColumnName("intervalValue");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.LimitTimeBegin)
                    .HasColumnType("datetime")
                    .HasColumnName("limitTimeBegin");

                entity.Property(e => e.LimitTimeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("limitTimeEnd");

                entity.Property(e => e.NextTime)
                    .HasColumnType("datetime")
                    .HasColumnName("nextTime");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.ReportTemplateName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reportTemplateName");

                entity.Property(e => e.ShiftDateBegin).HasColumnName("shiftDateBegin");

                entity.Property(e => e.ShiftDateEnd).HasColumnName("shiftDateEnd");

                entity.Property(e => e.ShiftSecondDateBegin).HasColumnName("shiftSecondDateBegin");

                entity.Property(e => e.ShiftSecondDateEnd).HasColumnName("shiftSecondDateEnd");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ReportTemplate>(entity =>
            {
                entity.ToTable("ReportTemplates", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountProperty).HasColumnName("accountProperty");

                entity.Property(e => e.Addresses).HasColumnName("addresses");

                entity.Property(e => e.AdministrationDistrict).HasColumnName("administrationDistrict");

                entity.Property(e => e.ApartmentTypes).HasColumnName("apartmentTypes");

                entity.Property(e => e.BankAccounts).HasColumnName("bankAccounts");

                entity.Property(e => e.Benefits).HasColumnName("benefits");

                entity.Property(e => e.CalcOperationGroups).HasColumnName("calcOperationGroups");

                entity.Property(e => e.CanonicalServices).HasColumnName("canonicalServices");

                entity.Property(e => e.CityBorough)
                    .HasColumnName("cityBorough")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConvenienceTypes).HasColumnName("convenienceTypes");

                entity.Property(e => e.DatePeriod).HasColumnName("datePeriod");

                entity.Property(e => e.Debt).HasColumnName("debt");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.ExistsBenefitDiff).HasColumnName("existsBenefitDiff");

                entity.Property(e => e.FasetFilterId).HasColumnName("fasetFilterId");

                entity.Property(e => e.HouseTypes).HasColumnName("houseTypes");

                entity.Property(e => e.IsAppending)
                    .HasColumnName("isAppending")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsAvailableInProvider)
                    .HasColumnName("isAvailableInProvider")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCustomReport).HasColumnName("isCustomReport");

                entity.Property(e => e.IsEnable)
                    .IsRequired()
                    .HasColumnName("isEnable")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsExcel)
                    .HasColumnName("isExcel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsGroupOperation).HasColumnName("isGroupOperation");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.Location)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.MinSumm).HasColumnName("minSumm");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NetworkFilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("networkFilePath")
                    .HasComment("Путь к сетевому ресурсу для выгрузки отчета");

                entity.Property(e => e.Number)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("number")
                    .HasComputedColumnSql("(case when patindex('% %',[name])>(2) AND [name] like '[0-9]%.[0-9]%.[0-9]% %' then (isnull(substring([name],(1),patindex('% %',[name])-(1)),'')+' ')+isnull([location],'')  end)", false);

                entity.Property(e => e.OrgDocument).HasColumnName("orgDocument");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationAccountOwner).HasColumnName("organizationAccountOwner");

                entity.Property(e => e.OrgsApartmentArea).HasColumnName("orgsApartmentArea");

                entity.Property(e => e.OrgsBank).HasColumnName("orgsBank");

                entity.Property(e => e.OrgsCashlessTransferrers).HasColumnName("orgsCashlessTransferrers");

                entity.Property(e => e.OrgsFinancialCenters).HasColumnName("orgsFinancialCenters");

                entity.Property(e => e.OrgsHouseHolders).HasColumnName("orgsHouseHolders");

                entity.Property(e => e.OrgsPaymentAgents).HasColumnName("orgsPaymentAgents");

                entity.Property(e => e.OrgsResourceProviders).HasColumnName("orgsResourceProviders");

                entity.Property(e => e.OrgsServiceHouseHolders).HasColumnName("orgsServiceHouseHolders");

                entity.Property(e => e.OrgsServiceProviders).HasColumnName("orgsServiceProviders");

                entity.Property(e => e.PaymentAgentTypes).HasColumnName("paymentAgentTypes");

                entity.Property(e => e.Period)
                    .IsRequired()
                    .HasColumnName("period")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReesterTypes).HasColumnName("reesterTypes");

                entity.Property(e => e.ReportGroupId).HasColumnName("reportGroupId");

                entity.Property(e => e.RunInTransaction)
                    .IsRequired()
                    .HasColumnName("runInTransaction")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ServiceApartmentTypeFasetItemId).HasColumnName("serviceApartmentTypeFasetItemId");

                entity.Property(e => e.ServiceTypes).HasColumnName("serviceTypes");

                entity.Property(e => e.Services).HasColumnName("services");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.SqlDefault)
                    .IsUnicode(false)
                    .HasColumnName("sqlDefault");

                entity.Property(e => e.Template)
                    .IsUnicode(false)
                    .HasColumnName("template")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TemplateDefault)
                    .IsUnicode(false)
                    .HasColumnName("templateDefault")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Terminals).HasColumnName("terminals");

                entity.Property(e => e.TextParameter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("textParameter");

                entity.Property(e => e.TypeRecalcReasons).HasColumnName("typeRecalcReasons");

                entity.Property(e => e.Users).HasColumnName("users");

                entity.Property(e => e.WithRenderParameters).HasColumnName("withRenderParameters");

                entity.Property(e => e.WithSave).HasColumnName("withSave");

                entity.Property(e => e.WithoutBankrupt).HasColumnName("withoutBankrupt");

                entity.Property(e => e.WithoutClosesApartments).HasColumnName("withoutClosesApartments");

                entity.HasOne(d => d.FasetFilter)
                    .WithMany(p => p.ReportTemplates)
                    .HasForeignKey(d => d.FasetFilterId)
                    .HasConstraintName("FK_ReportTemplates_FasetFilter");

                entity.HasOne(d => d.ReportGroup)
                    .WithMany(p => p.ReportTemplates)
                    .HasForeignKey(d => d.ReportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportTemplates_ReportGroups");
            });

            modelBuilder.Entity<ReportTemplateBu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportTemplate_BU", "rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.Template)
                    .HasColumnType("text")
                    .HasColumnName("template");
            });

            modelBuilder.Entity<ReportTemplatesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportTemplatesView", "rep");

                entity.Property(e => e.AccountProperty).HasColumnName("accountProperty");

                entity.Property(e => e.Addresses).HasColumnName("addresses");

                entity.Property(e => e.AdministrationDistrict).HasColumnName("administrationDistrict");

                entity.Property(e => e.ApartmentTypes).HasColumnName("apartmentTypes");

                entity.Property(e => e.BankAccounts).HasColumnName("bankAccounts");

                entity.Property(e => e.Benefits).HasColumnName("benefits");

                entity.Property(e => e.CalcOperationGroups).HasColumnName("calcOperationGroups");

                entity.Property(e => e.CanonicalServices).HasColumnName("canonicalServices");

                entity.Property(e => e.CityBorough).HasColumnName("cityBorough");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConvenienceTypes).HasColumnName("convenienceTypes");

                entity.Property(e => e.DatePeriod).HasColumnName("datePeriod");

                entity.Property(e => e.Debt).HasColumnName("debt");

                entity.Property(e => e.Encoding)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("encoding");

                entity.Property(e => e.ExistsBenefitDiff).HasColumnName("existsBenefitDiff");

                entity.Property(e => e.FasetFilterId).HasColumnName("fasetFilterId");

                entity.Property(e => e.FasetFilterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetFilterName");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.HouseTypes).HasColumnName("houseTypes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsAppending).HasColumnName("isAppending");

                entity.Property(e => e.IsAvailableInProvider).HasColumnName("isAvailableInProvider");

                entity.Property(e => e.IsCustomReport).HasColumnName("isCustomReport");

                entity.Property(e => e.IsEnable).HasColumnName("isEnable");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsGroupOperation).HasColumnName("isGroupOperation");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.Location)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("location");

                entity.Property(e => e.MinSumm).HasColumnName("minSumm");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NetworkFilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("networkFilePath");

                entity.Property(e => e.Number)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgDocument).HasColumnName("orgDocument");

                entity.Property(e => e.Organization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OrganizationAccountOwner).HasColumnName("organizationAccountOwner");

                entity.Property(e => e.OrgsApartmentArea).HasColumnName("orgsApartmentArea");

                entity.Property(e => e.OrgsBank).HasColumnName("orgsBank");

                entity.Property(e => e.OrgsCashlessTransferrers).HasColumnName("orgsCashlessTransferrers");

                entity.Property(e => e.OrgsFinancialCenters).HasColumnName("orgsFinancialCenters");

                entity.Property(e => e.OrgsHouseHolders).HasColumnName("orgsHouseHolders");

                entity.Property(e => e.OrgsPaymentAgents).HasColumnName("orgsPaymentAgents");

                entity.Property(e => e.OrgsResourceProviders).HasColumnName("orgsResourceProviders");

                entity.Property(e => e.OrgsServiceHouseHolders).HasColumnName("orgsServiceHouseHolders");

                entity.Property(e => e.OrgsServiceProviders).HasColumnName("orgsServiceProviders");

                entity.Property(e => e.PaymentAgentTypes).HasColumnName("paymentAgentTypes");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.ReesterTypes).HasColumnName("reesterTypes");

                entity.Property(e => e.ReportGroupId).HasColumnName("reportGroupId");

                entity.Property(e => e.RunInTransaction).HasColumnName("runInTransaction");

                entity.Property(e => e.ServiceApartmentTypeFasetItemId).HasColumnName("serviceApartmentTypeFasetItemId");

                entity.Property(e => e.ServiceTypes).HasColumnName("serviceTypes");

                entity.Property(e => e.Services).HasColumnName("services");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.Template)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("template");

                entity.Property(e => e.Terminals).HasColumnName("terminals");

                entity.Property(e => e.TextParameter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("textParameter");

                entity.Property(e => e.TypeRecalcReasons).HasColumnName("typeRecalcReasons");

                entity.Property(e => e.Users).HasColumnName("users");

                entity.Property(e => e.WithRenderParameters).HasColumnName("withRenderParameters");

                entity.Property(e => e.WithSave).HasColumnName("withSave");

                entity.Property(e => e.WithoutBankrupt).HasColumnName("withoutBankrupt");

                entity.Property(e => e.WithoutClosesApartments).HasColumnName("withoutClosesApartments");
            });

            modelBuilder.Entity<ReportsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportsView", "rep");

                entity.Property(e => e.CountFail).HasColumnName("countFail");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fileName");

                entity.Property(e => e.FinishTime)
                    .HasColumnType("datetime")
                    .HasColumnName("finishTime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsExcel).HasColumnName("isExcel");

                entity.Property(e => e.IsSimpleTable).HasColumnName("isSimpleTable");

                entity.Property(e => e.IsTxt).HasColumnName("isTxt");

                entity.Property(e => e.IsVip).HasColumnName("isVIP");

                entity.Property(e => e.PackedResult).HasColumnName("packedResult");

                entity.Property(e => e.PlannedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("plannedDate");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.Property(e => e.ReportTemplateName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reportTemplateName");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.SovaRequestId).HasColumnName("sovaRequestId");

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("sql");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("startTime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<Request>(entity =>
            {
                entity.ToTable("Requests", "mpa");

                entity.HasIndex(e => e.AccountId, "IX_mpaRequests_accountId");

                entity.HasIndex(e => new { e.Created, e.RequestTypeId }, "IX_mpaRequests_created_requestTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.Attachments).HasColumnName("attachments");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CompletedWork)
                    .IsUnicode(false)
                    .HasColumnName("completedWork");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.Processed)
                    .HasColumnType("datetime")
                    .HasColumnName("processed")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("replyDate");

                entity.Property(e => e.RequestFrom)
                    .HasColumnName("requestFrom")
                    .HasDefaultValueSql("([sn].[FasetItem_GetId]('CRM','SN'))");

                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.XmlIn)
                    .IsUnicode(false)
                    .HasColumnName("xmlIn");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Requests)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_MPARequests_accounts");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.Requests)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_MPARequests_groupOperations");

                entity.HasOne(d => d.RequestType)
                    .WithMany(p => p.Requests)
                    .HasForeignKey(d => d.RequestTypeId)
                    .HasConstraintName("FK_MPARequests_requestTypeId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Requests)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Request_Users_userId");
            });

            modelBuilder.Entity<Request1>(entity =>
            {
                entity.ToTable("Requests", "pay");

                entity.HasIndex(e => e.CalcId, "IX_Requests__calcId");

                entity.HasIndex(e => e.Created, "IX_Requests__created");

                entity.HasIndex(e => e.DebtActionId, "IX_Requests__debtActionId");

                entity.HasIndex(e => new { e.ExternalTransactionId, e.IsConfirmed, e.IsProcessed }, "IX_Requests__externalTransactionId_isConfirmed_isProcessed");

                entity.HasIndex(e => e.GroupOperId, "IX_Requests__groupOperId");

                entity.HasIndex(e => e.PaymentOrderDate, "IX_Requests__paymentOrderDate");

                entity.HasIndex(e => new { e.PaymentSystem, e.ExternalTransactionId }, "IX_Requests__paymentSystem_externalTransactionId");

                entity.HasIndex(e => e.ReverseRequestId, "IX_Requests__reverseRequestId");

                entity.HasIndex(e => e.AccountId, "IX_Requests_accountId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountEpd)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountEpd");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountProviderCode).HasColumnName("accountProviderCode");

                entity.Property(e => e.AdditionalInfo)
                    .IsUnicode(false)
                    .HasColumnName("additionalInfo");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CashFlowTypeId).HasColumnName("cashFlowTypeId");

                entity.Property(e => e.CashOrderPayment)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cashOrderPayment");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Comments)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.ConfirmedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmedAt");

                entity.Property(e => e.CounterPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("counterPeriod");

                entity.Property(e => e.CounterWoauth).HasColumnName("CounterWOAuth");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrentBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentBenefitSumm");

                entity.Property(e => e.CurrentChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentChargeSumm");

                entity.Property(e => e.CurrentRecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentRecalcSumm");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairOwnerId).HasColumnName("debtAffairOwnerId");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.DistributionType).HasColumnName("distributionType");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.GroupType).HasColumnName("groupType");

                entity.Property(e => e.HouseHolder)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("houseHolder");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.InsuranceSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("insuranceSumm");

                entity.Property(e => e.IsByNotice).HasColumnName("isByNotice");

                entity.Property(e => e.IsChargePenalty).HasColumnName("isChargePenalty");

                entity.Property(e => e.IsConfirmed).HasColumnName("isConfirmed");

                entity.Property(e => e.IsDebt).HasColumnName("isDebt");

                entity.Property(e => e.IsFirst).HasColumnName("isFirst");

                entity.Property(e => e.IsManualReturn)
                    .HasColumnName("isManualReturn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMaxPeriod).HasColumnName("isMaxPeriod");

                entity.Property(e => e.IsOneSumm).HasColumnName("isOneSumm");

                entity.Property(e => e.IsPayFixed).HasColumnName("isPayFixed");

                entity.Property(e => e.IsProcessed).HasColumnName("isProcessed");

                entity.Property(e => e.IsProcessedByHand).HasColumnName("isProcessedByHand");

                entity.Property(e => e.IsReester).HasColumnName("isReester");

                entity.Property(e => e.IsSaveSameIndications)
                    .HasColumnName("isSaveSameIndications")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsServiceOnlyCounters).HasColumnName("isServiceOnlyCounters");

                entity.Property(e => e.IsShowClosedServicesWithoutSaldo).HasColumnName("isShowClosedServicesWithoutSaldo");

                entity.Property(e => e.IsTransferPayment)
                    .HasColumnName("isTransferPayment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsUseUkgroupCode).HasColumnName("isUseUKGroupCode");

                entity.Property(e => e.MinDebtPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("minDebtPeriod");

                entity.Property(e => e.NeedServiceCollapse)
                    .IsRequired()
                    .HasColumnName("needServiceCollapse")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NotUseInsurance)
                    .HasColumnName("notUseInsurance")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Office)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("office");

                entity.Property(e => e.Operator)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operator");

                entity.Property(e => e.Organization)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PackNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packNumber");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PaidSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidSumm");

                entity.Property(e => e.PayCurrentReceipt)
                    .HasColumnName("payCurrentReceipt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.PaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderDate");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderNumber");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.Penalty3Year)
                    .HasColumnName("penalty3Year")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.PenaltySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penaltySumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PinpadCode).HasColumnName("pinpadCode");

                entity.Property(e => e.PinpadData)
                    .IsUnicode(false)
                    .HasColumnName("pinpadData");

                entity.Property(e => e.ProcessedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("processedAt");

                entity.Property(e => e.ProviderCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.ReesterTypeId).HasColumnName("reesterTypeId");

                entity.Property(e => e.RequestPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("requestPeriod");

                entity.Property(e => e.RequestTypeFasetId).HasColumnName("requestTypeFasetId");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ReverseRequestId).HasColumnName("reverseRequestId");

                entity.Property(e => e.RunPoint).HasColumnName("runPoint");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.ServiceTypeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeCode");

                entity.Property(e => e.ShowClosedAdvances).HasColumnName("showClosedAdvances");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.TotalDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalDebt");

                entity.Property(e => e.TotalDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalDebtPenalty");

                entity.Property(e => e.TotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalPenalty");

                entity.Property(e => e.TotalPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalPositiveDebt");

                entity.Property(e => e.UseBankrupt)
                    .IsRequired()
                    .HasColumnName("useBankrupt")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UsePaidPenalty).HasColumnName("usePaidPenalty");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.WithoutClosed).HasColumnName("withoutClosed");

                entity.Property(e => e.WithoutFixed).HasColumnName("withoutFixed");

                entity.HasOne(d => d.Calc)
                    .WithMany(p => p.Request1s)
                    .HasForeignKey(d => d.CalcId)
                    .HasConstraintName("FK_Requests_Calcs");

                entity.HasOne(d => d.DebtAction)
                    .WithMany(p => p.Request1s)
                    .HasForeignKey(d => d.DebtActionId)
                    .HasConstraintName("FK_pay_Requests_DebtActions__debtActionId");

                entity.HasOne(d => d.GroupOper)
                    .WithMany(p => p.Request1s)
                    .HasForeignKey(d => d.GroupOperId)
                    .HasConstraintName("FK_Requests_GroupOperations");

                entity.HasOne(d => d.PaymentSystemNavigation)
                    .WithMany(p => p.Request1s)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .HasConstraintName("FK_Requests_PaymentSystems");

                entity.HasOne(d => d.RequestTypeFaset)
                    .WithMany(p => p.Request1s)
                    .HasForeignKey(d => d.RequestTypeFasetId)
                    .HasConstraintName("FK_Requests_FasetItems__requestTypeFasetId");

                entity.HasOne(d => d.ReverseRequest)
                    .WithMany(p => p.InverseReverseRequest)
                    .HasForeignKey(d => d.ReverseRequestId)
                    .HasConstraintName("FK_Requests_Requests__reverseRequestId");
            });

            modelBuilder.Entity<Request2>(entity =>
            {
                entity.ToTable("Request", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Request)
                    .HasColumnType("xml")
                    .HasColumnName("request");

                entity.Property(e => e.Respond)
                    .HasColumnType("xml")
                    .HasColumnName("respond");

                entity.Property(e => e.Result).HasColumnName("result");

                entity.Property(e => e.TypeRequest).HasColumnName("typeRequest");
            });

            modelBuilder.Entity<Request3>(entity =>
            {
                entity.ToTable("Requests", "vmc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CalcNodeId).HasColumnName("calcNodeId");

                entity.Property(e => e.LocalRequestId).HasColumnName("localRequestId");

                entity.Property(e => e.NodeId).HasColumnName("nodeId");

                entity.Property(e => e.NodeRequestId).HasColumnName("nodeRequestId");

                entity.Property(e => e.NodeServiceId).HasColumnName("nodeServiceId");
            });

            modelBuilder.Entity<RequestAccountService>(entity =>
            {
                entity.ToTable("RequestAccountServices", "pay");

                entity.HasIndex(e => new { e.RequestId, e.AccountServiceId }, "IX_RequestAccountServices_requestId_accountServiceId");

                entity.HasIndex(e => new { e.RequestId, e.GroupCode, e.CounterId }, "IX_RequestAccountServices_requestId_groupCode_counterId");

                entity.HasIndex(e => new { e.RequestId, e.GroupCode, e.FromDate }, "IX_RequestAccountServices_requestId_groupCode_fromDate");

                entity.HasIndex(e => new { e.RequestId, e.Paid }, "IX_RequestAccountServices_requestId_paid_in");

                entity.HasIndex(e => new { e.RequestId, e.Period }, "IX_RequestAccountServices_requestId_period_rep");

                entity.HasIndex(e => e.RequestId, "IX_RequestAccountServices_requestId_rep");

                entity.HasIndex(e => new { e.RequestId, e.ServiceId }, "IX_RequestAccountServices_requestId_serviceId_rep");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcTotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("calcTotalPenalty");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChargeSummThreeLastMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummThreeLastMonths");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.CommissionPercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commissionPercent");

                entity.Property(e => e.CounterCount).HasColumnName("counterCount");

                entity.Property(e => e.CounterFirstIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterFirstIndication");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("counterPeriod");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.CurrentDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebtPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPenalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupCode).HasColumnName("groupCode");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.GroupPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupPaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaidPenalty");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsCashless)
                    .HasColumnName("isCashless")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsFixed).HasColumnName("isFixed");

                entity.Property(e => e.IsGosposhlina).HasColumnName("isGosposhlina");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NegativeDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeDebt");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.OpenPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodChargeSumm");

                entity.Property(e => e.OpenPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebt");

                entity.Property(e => e.OpenPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebtPenalty");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PayAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payAccount");

                entity.Property(e => e.PayCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payCode");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebtPenalty");

                entity.Property(e => e.PrevPeriodBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodBenefitSumm");

                entity.Property(e => e.PrevPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodChargeSumm");

                entity.Property(e => e.PrevPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebt");

                entity.Property(e => e.PrevPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebtPenalty");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RecalcNegativeFutureByPrefPeriods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcNegativeFutureByPrefPeriods");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecalcSummCurrentMonth)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummCurrentMonth")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecalcSummNoPayment)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummNoPayment")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndPenalty");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<RequestAccountServiceDebtByPeriod>(entity =>
            {
                entity.HasKey(e => new { e.RequestId, e.AccountServiceId, e.Period });

                entity.ToTable("RequestAccountServiceDebtByPeriod", "pay");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestAccountServiceDebtByPeriods)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_RequestAccountServiceDebtByPeriod_Requests");
            });

            modelBuilder.Entity<RequestAccountServiceFilter>(entity =>
            {
                entity.ToTable("RequestAccountServiceFilters", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateLastUse)
                    .HasColumnType("datetime")
                    .HasColumnName("dateLastUse");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsAfterJn).HasColumnName("isAfterJn");

                entity.Property(e => e.Name)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated");
            });

            modelBuilder.Entity<RequestAccountServiceFilterParameter>(entity =>
            {
                entity.ToTable("RequestAccountServiceFilterParameters", "pay");

                entity.HasIndex(e => new { e.FilterId, e.Name }, "IX_PayRequestAccountServiceFilterParameters_filterId_name");

                entity.HasIndex(e => e.Name, "IX_PayRequestAccountServiceFilterParameters_name_inc_id_value");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FilterId).HasColumnName("filterId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Filter)
                    .WithMany(p => p.RequestAccountServiceFilterParameters)
                    .HasForeignKey(d => d.FilterId)
                    .HasConstraintName("FK_RequestAccountServiceFilterParameters_RequestAccountServiceFilters");
            });

            modelBuilder.Entity<RequestAccountServiceFilterParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestAccountServiceFilterParametersView", "pay");

                entity.Property(e => e.FilterId).HasColumnName("filterId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<RequestAccountServiceFiltersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestAccountServiceFiltersView", "pay");

                entity.Property(e => e.Comment)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateLastUse)
                    .HasColumnType("datetime")
                    .HasColumnName("dateLastUse");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.IsAfterJn).HasColumnName("isAfterJn");

                entity.Property(e => e.Name)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.Sort).HasColumnName("sort");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated");
            });

            modelBuilder.Entity<RequestAccountServicePenalty>(entity =>
            {
                entity.ToTable("RequestAccountServicePenalties", "pay");

                entity.HasIndex(e => new { e.RequestId, e.AccountServiceId }, "IX_RequestAccountServicePenalties_requestId_accountServiceId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtCredit)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtCredit");

                entity.Property(e => e.DebtDays).HasColumnName("debtDays");

                entity.Property(e => e.DebtDays130).HasColumnName("debtDays130");

                entity.Property(e => e.DebtDays170).HasColumnName("debtDays170");

                entity.Property(e => e.DebtDays300).HasColumnName("debtDays300");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("debtPenalty");

                entity.Property(e => e.PayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payDate");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Penalty130)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty130");

                entity.Property(e => e.Penalty170)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty170");

                entity.Property(e => e.Penalty300)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("penalty300");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RefinancingRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("refinancingRate");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<RequestAccountServicesInfo>(entity =>
            {
                entity.HasKey(e => new { e.RequestId, e.AccountServiceId });

                entity.ToTable("RequestAccountServicesInfo", "pay");

                entity.HasIndex(e => e.RequestId, "IX_RequestAccountServicesInfo__requestId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.GroupPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaid");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");
            });

            modelBuilder.Entity<RequestAccountServicesInfoView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestAccountServicesInfoView", "pay");

                entity.Property(e => e.AccountServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceFromDate");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountServiceToDate");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.GroupPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaid");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerShortName");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceShortName");
            });

            modelBuilder.Entity<RequestApp>(entity =>
            {
                entity.ToTable("RequestApps", "mpa");

                entity.HasIndex(e => e.RequestId, "IX_RequestApps_requestId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppData)
                    .IsUnicode(false)
                    .HasColumnName("appData");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestApps)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestApps_Requests");
            });

            modelBuilder.Entity<RequestBenefit>(entity =>
            {
                entity.ToTable("RequestBenefits", "pay");

                entity.HasIndex(e => e.RequestId, "IX_RequestBenefits__requestId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("benefitName");

                entity.Property(e => e.PersonsCount).HasColumnName("personsCount");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<RequestCounter>(entity =>
            {
                entity.ToTable("RequestCounters", "pay");

                entity.HasIndex(e => e.RequestId, "IX_RequestCounters__requestId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NewValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("newValDate");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.HasOne(d => d.Counter)
                    .WithMany(p => p.RequestCounters)
                    .HasForeignKey(d => d.CounterId)
                    .HasConstraintName("FK_RequestCounters_ApartmentCounters");
            });

            modelBuilder.Entity<RequestCountersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestCountersView", "pay");

                entity.Property(e => e.CounterFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterFromDate");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("counterToDate");

                entity.Property(e => e.CounterTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<RequestGate>(entity =>
            {
                entity.ToTable("RequestGates", "pay");

                entity.HasIndex(e => e.CheckRequestId, "IX_GateRequests__checkRequestId_transactionNumberStorno");

                entity.HasIndex(e => new { e.IsConfirmed, e.StatusId }, "IX_GateRequests__isConfirmed_statusId");

                entity.HasIndex(e => new { e.IsConfirmed, e.TransactionNumber }, "IX_GateRequests__isConfirmed_transactionNumber");

                entity.HasIndex(e => new { e.IsConfirmed, e.TransactionNumberStorno }, "IX_GateRequests__isConfirmed_transactionNumberStorno");

                entity.HasIndex(e => new { e.RequestId, e.TransactionNumberStorno }, "IX_GateRequests__requestId_transactionNumberStorno");

                entity.HasIndex(e => new { e.TransactionNumber, e.Organization }, "IX_GateRequests__transactionNumber_organization_inc_id");

                entity.HasIndex(e => e.TransactionNumber, "IX_GateRequests__transactionNumber_stausId_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CheckRequestId).HasColumnName("checkRequestId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConfirmedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmedAt");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Error)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.IsConfirmed).HasColumnName("isConfirmed");

                entity.Property(e => e.Organization)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.PaidSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("paidSumm");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.RequestXml)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("requestXml");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.TransactionNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("transactionNumber");

                entity.Property(e => e.TransactionNumberStorno)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("transactionNumberStorno");

                entity.HasOne(d => d.ReesterRecord)
                    .WithMany(p => p.RequestGates)
                    .HasForeignKey(d => d.ReesterRecordId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_RequestGates_ReesterRecords");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestGates)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_RequestGates_Requests_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.RequestGates)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_RequestGates_FasetItems");
            });

            modelBuilder.Entity<RequestGatesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestGatesView", "pay");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.CashFlowType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cashFlowType");

                entity.Property(e => e.CashFlowTypeId).HasColumnName("cashFlowTypeId");

                entity.Property(e => e.CheckRequestId).HasColumnName("checkRequestId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ConfirmedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmedAt");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Email)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Error)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsConfirmed).HasColumnName("isConfirmed");

                entity.Property(e => e.Organization)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.PaidSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("paidSumm");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.PaymentOrganization)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrganization");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.RequestType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("requestType");

                entity.Property(e => e.RequestTypeFasetId).HasColumnName("requestTypeFasetId");

                entity.Property(e => e.RequestXml)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("requestXml");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.TransactionNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("transactionNumber");

                entity.Property(e => e.TransactionNumberStorno)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("transactionNumberStorno");
            });

            modelBuilder.Entity<RequestGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RequestGroups", "mpa");

                entity.Property(e => e.AddrName)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedByUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("createdByUserName");

                entity.Property(e => e.DeclarantShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("declarantShortName");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Information)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("information");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.PeriodExecution)
                    .HasColumnType("datetime")
                    .HasColumnName("periodExecution");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<RequestGroupsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestGroupsView", "mpa");

                entity.Property(e => e.AddrName)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreatedByUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("createdByUserName");

                entity.Property(e => e.DeclarantShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("declarantShortName");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Information)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("information");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.LastRequestCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("lastRequestCreated");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.PeriodExecution)
                    .HasColumnType("datetime")
                    .HasColumnName("periodExecution");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("phone");
            });

            modelBuilder.Entity<RequestItem>(entity =>
            {
                entity.ToTable("RequestItems", "mpa");

                entity.HasIndex(e => new { e.RequestId, e.Name }, "IX_RequestItems_requestId_name");

                entity.HasIndex(e => new { e.RequestId, e.Name }, "UQ_RequestItems_requestId_name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Error)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestItems)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestItems_Requests");
            });

            modelBuilder.Entity<RequestItemParam>(entity =>
            {
                entity.ToTable("RequestItemParams", "mpa");

                entity.HasIndex(e => new { e.RequestItemId, e.Name, e.Value }, "UQ_RequestItemParams_requestItemId_name_value")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.RequestItemId).HasColumnName("requestItemId");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.RequestItem)
                    .WithMany(p => p.RequestItemParams)
                    .HasForeignKey(d => d.RequestItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestItemParams_RequestItems");
            });

            modelBuilder.Entity<RequestOrganizationCommissionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestOrganizationCommissionsView", "pay");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.RequestProviderPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("requestProviderPaid");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<RequestParameter>(entity =>
            {
                entity.ToTable("RequestParameters", "mpa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LocalAddressId).HasColumnName("localAddressId");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.ServiceNewDateOpen)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceNewDateOpen");

                entity.Property(e => e.ServiceNewId).HasColumnName("serviceNewId");

                entity.Property(e => e.ServiceOldDateClose)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceOldDateClose");

                entity.Property(e => e.ServiceOldId).HasColumnName("serviceOldId");
            });

            modelBuilder.Entity<RequestParametersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestParametersView", "mpa");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LocalAddressId).HasColumnName("localAddressId");

                entity.Property(e => e.LocalAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("localAddressName");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.ServiceNewDateOpen)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceNewDateOpen");

                entity.Property(e => e.ServiceNewId).HasColumnName("serviceNewId");

                entity.Property(e => e.ServiceNewName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceNewName");

                entity.Property(e => e.ServiceOldDateClose)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceOldDateClose");

                entity.Property(e => e.ServiceOldId).HasColumnName("serviceOldId");

                entity.Property(e => e.ServiceOldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serviceOldName");
            });

            modelBuilder.Entity<RequestPinpadPack>(entity =>
            {
                entity.ToTable("RequestPinpadPacks", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PinpadCode).HasColumnName("pinpadCode");

                entity.Property(e => e.PinpadData)
                    .IsUnicode(false)
                    .HasColumnName("pinpadData");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<RequestPinpadPackContent>(entity =>
            {
                entity.HasKey(e => new { e.RequestId, e.RequestPinpadPackId })
                    .HasName("PK_PayRequestPinpadPackContents");

                entity.ToTable("RequestPinpadPackContents", "pay");

                entity.HasIndex(e => e.Id, "IX_PayRequestPinpadPackContents_id");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.RequestPinpadPackId).HasColumnName("requestPinpadPackId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RequestPinpadPackContents)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_PayRequestPinpadPackContents__requestId");

                entity.HasOne(d => d.RequestPinpadPack)
                    .WithMany(p => p.RequestPinpadPackContents)
                    .HasForeignKey(d => d.RequestPinpadPackId)
                    .HasConstraintName("FK_PayRequestPinpadPackContents__requestPinpadPackId");
            });

            modelBuilder.Entity<RequestService>(entity =>
            {
                entity.ToTable("RequestServices", "pay");

                entity.HasIndex(e => e.RequestId, "IX_RequestServices__requestId");

                entity.HasIndex(e => e.RequestId, "IX_RequestServices_requestId_counterId_counterIndication_newCounterIndication");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CalcTotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("calcTotalPenalty");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChargeSummThreeLastMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummThreeLastMonths");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CommissionPercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commissionPercent");

                entity.Property(e => e.CounterFirstIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterFirstIndication");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.CurrentDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebtPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DebtClosed)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtClosed");

                entity.Property(e => e.DebtOpened)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtOpened");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPenalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("edk")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsCashless)
                    .HasColumnName("isCashless")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsFictive).HasColumnName("isFictive");

                entity.Property(e => e.IsFixed).HasColumnName("isFixed");

                entity.Property(e => e.IsGosposhlina).HasColumnName("isGosposhlina");

                entity.Property(e => e.IsInsurance).HasColumnName("isInsurance");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NegativeDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeDebt");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.OpenPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodChargeSumm");

                entity.Property(e => e.OpenPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebt");

                entity.Property(e => e.OpenPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebtPenalty");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PayAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payAccount");

                entity.Property(e => e.PayCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payCode");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebtPenalty");

                entity.Property(e => e.PrevPeriodBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodBenefitSumm");

                entity.Property(e => e.PrevPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodChargeSumm");

                entity.Property(e => e.PrevPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebt");

                entity.Property(e => e.PrevPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebtPenalty");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecalcSummCurrentMonth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSummCurrentMonth");

                entity.Property(e => e.RecalcSummNoPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSummNoPayment");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndPenalty");
            });

            modelBuilder.Entity<RequestServicePayAmount>(entity =>
            {
                entity.ToTable("RequestServicePayAmounts", "pay");

                entity.HasIndex(e => new { e.CounterId, e.CounterIndication }, "IX_RequestServicePayAmounts__counterId_counterIndication");

                entity.HasIndex(e => e.RequestId, "IX_RequestServicePayAmounts__requestId");

                entity.HasIndex(e => new { e.RequestId, e.CounterId, e.CounterIndication }, "IX_RequestServicePayAmounts__requestId_counterId_counterIndication");

                entity.HasIndex(e => e.RequestId, "IX_RequestServicePayAmounts_requestId_paid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<RequestServicePayAmountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestServicePayAmountsView", "pay");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<RequestServicesInfoByStep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RequestServicesInfoByStep", "pay");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Step).HasColumnName("step");

                entity.HasOne(d => d.Request)
                    .WithMany()
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestServicesInfoByStep_Requests");
            });

            modelBuilder.Entity<RequestServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestServicesView", "pay");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummThreeLastMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummThreeLastMonths");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CommissionPercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commissionPercent");

                entity.Property(e => e.Consumption)
                    .HasMaxLength(95)
                    .IsUnicode(false)
                    .HasColumnName("consumption");

                entity.Property(e => e.CounterExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterExternalCode");

                entity.Property(e => e.CounterFirstIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterFirstIndication");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.CurrentDebtEnd)
                    .HasColumnType("decimal(32, 2)")
                    .HasColumnName("currentDebtEnd");

                entity.Property(e => e.CurrentDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebtPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPenalty");

                entity.Property(e => e.DebtToPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtToPay");

                entity.Property(e => e.DebtToPayWithoutPenalty)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("debtToPayWithoutPenalty");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.EndDebt)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("endDebt");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsCashless).HasColumnName("isCashless");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsFictive).HasColumnName("isFictive");

                entity.Property(e => e.IsFixed).HasColumnName("isFixed");

                entity.Property(e => e.IsInsurance).HasColumnName("isInsurance");

                entity.Property(e => e.NachSumm)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("nachSumm");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NegativeDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeDebt");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NoticeSumm).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.OpenPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodChargeSumm");

                entity.Property(e => e.OpenPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebt");

                entity.Property(e => e.OpenPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebtPenalty");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PayAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payAccount");

                entity.Property(e => e.PayCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payCode");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt");

                entity.Property(e => e.PositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebtPenalty");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ProviderPhone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("providerPhone");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcSummCurrentMonth).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecalcSummNoPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndPenalty");

                entity.Property(e => e.SignPositiveDebtPenalty).HasColumnName("signPositiveDebtPenalty");

                entity.Property(e => e.TotalDebt)
                    .HasColumnType("decimal(31, 2)")
                    .HasColumnName("totalDebt");
            });

            modelBuilder.Entity<RequestStreamFile>(entity =>
            {
                entity.ToTable("RequestStreamFiles", "mpa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MpaRequestId).HasColumnName("mpaRequestId");

                entity.Property(e => e.StreamFilesId).HasColumnName("streamFilesId");
            });

            modelBuilder.Entity<RequestStreamFilesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestStreamFilesView", "mpa");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CompletedWork)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("completedWork");

                entity.Property(e => e.FileByte)
                    .IsRequired()
                    .HasColumnName("fileByte");

                entity.Property(e => e.FileCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("fileCreated");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.HashSumm)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("hashSumm");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.MpaRequestId).HasColumnName("mpaRequestId");

                entity.Property(e => e.ObjectTitle)
                    .IsUnicode(false)
                    .HasColumnName("objectTitle");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ReplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("replyDate");

                entity.Property(e => e.RequestComment)
                    .IsUnicode(false)
                    .HasColumnName("requestComment");

                entity.Property(e => e.RequestCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("requestCreated");

                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.StreamFilesId).HasColumnName("streamFilesId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.XmlIn)
                    .IsUnicode(false)
                    .HasColumnName("xmlIn");
            });

            modelBuilder.Entity<RequestType>(entity =>
            {
                entity.ToTable("RequestTypes", "mpa");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ExternalProcessingTemplateId).HasColumnName("externalProcessingTemplateId");

                entity.Property(e => e.FillContentProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fillContentProcName");

                entity.Property(e => e.IsAutoProcess)
                    .HasColumnName("isAutoProcess")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPreview)
                    .HasColumnName("isPreview")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsShowProgress).HasColumnName("isShowProgress");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProcessRequestProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("processRequestProcName");

                entity.Property(e => e.TypeFormId).HasColumnName("typeFormId");

                entity.Property(e => e.UpdateStateRequestProcName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("updateStateRequestProcName");

                entity.Property(e => e.ViewCurrentStateProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("viewCurrentStateProcName");

                entity.Property(e => e.ViewRequestProcName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("viewRequestProcName");
            });

            modelBuilder.Entity<RequestsNoXmlview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestsNoXMLView", "mpa");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(646)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExternalProcessingTemplateId).HasColumnName("externalProcessingTemplateId");

                entity.Property(e => e.FasetItemStatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemStatusName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPreview).HasColumnName("isPreview");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");

                entity.Property(e => e.RequestTypesName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.TypeFormCode)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("typeFormCode");

                entity.Property(e => e.XmlIn).HasColumnName("xmlIn");
            });

            modelBuilder.Entity<RequestsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestsView", "mpa");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AddrId).HasColumnName("addrId");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(646)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CompletedWork)
                    .IsUnicode(false)
                    .HasColumnName("completedWork");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.ExternalProcessingTemplateId).HasColumnName("externalProcessingTemplateId");

                entity.Property(e => e.FasetItemStatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemStatusName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPreview).HasColumnName("isPreview");

                entity.Property(e => e.IsShowProgress).HasColumnName("isShowProgress");

                entity.Property(e => e.MapId).HasColumnName("mapId");

                entity.Property(e => e.Processed)
                    .HasColumnType("datetime")
                    .HasColumnName("processed");

                entity.Property(e => e.RequestTypeCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("requestTypeCode");

                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");

                entity.Property(e => e.RequestTypesName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.StatusId).HasColumnName("statusId");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("statusName");

                entity.Property(e => e.StepId).HasColumnName("stepId");

                entity.Property(e => e.TypeFormCode)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("typeFormCode");

                entity.Property(e => e.XmlIn)
                    .IsUnicode(false)
                    .HasColumnName("xmlIn");
            });

            modelBuilder.Entity<RequestsView1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RequestsView", "pay");

                entity.Property(e => e.AccountEpd)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountEpd");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountProviderCode).HasColumnName("accountProviderCode");

                entity.Property(e => e.AdditionalInfo)
                    .IsUnicode(false)
                    .HasColumnName("additionalInfo");

                entity.Property(e => e.AddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AgentId).HasColumnName("agentId");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("agentName");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.ApartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentType");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.CashFlowType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cashFlowType");

                entity.Property(e => e.CashFlowTypeId).HasColumnName("cashFlowTypeId");

                entity.Property(e => e.CashOrderPayment)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cashOrderPayment");

                entity.Property(e => e.CashPaymentOrderType).HasColumnName("cashPaymentOrderType");

                entity.Property(e => e.Comments)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.ConfirmedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("confirmedAt");

                entity.Property(e => e.CounterPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("counterPeriod");

                entity.Property(e => e.CounterWoauth).HasColumnName("CounterWOAuth");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CurrentBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentBenefitSumm");

                entity.Property(e => e.CurrentChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentChargeSumm");

                entity.Property(e => e.CurrentRecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentRecalcSumm");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DebtAffairOwnerId).HasColumnName("debtAffairOwnerId");

                entity.Property(e => e.DebtDocumentId).HasColumnName("debtDocumentId");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.DistributionType).HasColumnName("distributionType");

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .HasColumnName("error");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalTransactionId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FinancialCenterName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterName");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.GroupType).HasColumnName("groupType");

                entity.Property(e => e.HouseHolder)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("houseHolder");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsuranceSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("insuranceSumm");

                entity.Property(e => e.IsByNotice).HasColumnName("isByNotice");

                entity.Property(e => e.IsChargePenalty).HasColumnName("isChargePenalty");

                entity.Property(e => e.IsConfirmed).HasColumnName("isConfirmed");

                entity.Property(e => e.IsDebt).HasColumnName("isDebt");

                entity.Property(e => e.IsManualReturn).HasColumnName("isManualReturn");

                entity.Property(e => e.IsMaxPeriod).HasColumnName("isMaxPeriod");

                entity.Property(e => e.IsPayFixed).HasColumnName("isPayFixed");

                entity.Property(e => e.IsProcessed).HasColumnName("isProcessed");

                entity.Property(e => e.IsReester).HasColumnName("isReester");

                entity.Property(e => e.IsServiceOnlyCounters).HasColumnName("isServiceOnlyCounters");

                entity.Property(e => e.IsShowClosedServicesWithoutSaldo).HasColumnName("isShowClosedServicesWithoutSaldo");

                entity.Property(e => e.IsTransferPayment).HasColumnName("isTransferPayment");

                entity.Property(e => e.IsUseUkgroupCode).HasColumnName("isUseUKGroupCode");

                entity.Property(e => e.MinDebtPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("minDebtPeriod");

                entity.Property(e => e.NeedServiceCollapse).HasColumnName("needServiceCollapse");

                entity.Property(e => e.NotUseInsurance).HasColumnName("notUseInsurance");

                entity.Property(e => e.Office)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("office");

                entity.Property(e => e.Operator)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operator");

                entity.Property(e => e.Organization)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organization");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.PackNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packNumber");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PaidSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidSumm");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentDate");

                entity.Property(e => e.PaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentOrderDate");

                entity.Property(e => e.PaymentOrderNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentOrderNumber");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystem)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentSystem");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.Penalty3Year).HasColumnName("penalty3Year");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PinpadCode).HasColumnName("pinpadCode");

                entity.Property(e => e.PinpadData)
                    .IsUnicode(false)
                    .HasColumnName("pinpadData");

                entity.Property(e => e.ProcessedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("processedAt");

                entity.Property(e => e.ReesterRecordId).HasColumnName("reesterRecordId");

                entity.Property(e => e.ReesterTypeId).HasColumnName("reesterTypeId");

                entity.Property(e => e.RequestPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("requestPeriod");

                entity.Property(e => e.RequestType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("requestType");

                entity.Property(e => e.RequestTypeFasetId).HasColumnName("requestTypeFasetId");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ReverseRequestId).HasColumnName("reverseRequestId");

                entity.Property(e => e.ReverseStatus).HasColumnName("reverseStatus");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serviceCode");

                entity.Property(e => e.ShowClosedAdvances).HasColumnName("showClosedAdvances");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubServiceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("subServiceName");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.TotalDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalDebt");

                entity.Property(e => e.TotalDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalDebtPenalty");

                entity.Property(e => e.TotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalPenalty");

                entity.Property(e => e.TotalPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalPositiveDebt");

                entity.Property(e => e.UseBankrupt).HasColumnName("useBankrupt");

                entity.Property(e => e.UsePaidPenalty).HasColumnName("usePaidPenalty");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.WithoutClosed).HasColumnName("withoutClosed");

                entity.Property(e => e.WithoutFixed).HasColumnName("withoutFixed");
            });

            modelBuilder.Entity<ResultAccountNotice>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountId, e.NoticeTemplateSettingId })
                    .HasName("PK__noticeResultAccountNotices");

                entity.ToTable("ResultAccountNotices", "notice");

                entity.HasIndex(e => e.Id, "IX__noticeResultAccountNotices__id")
                    .IsUnique();

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.SpecificData).HasColumnName("specificData");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.ResultAccountNotices)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("FK_noticeResultAccountNotices_actionId");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.ResultAccountNotices)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("noticeResultAccountNotices_noticetemplateSettingId");
            });

            modelBuilder.Entity<ResultNotice>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.AccountServiceId, e.NoticeTemplateSettingId })
                    .HasName("PK_noticeResultNotices");

                entity.ToTable("ResultNotices", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeResultNotices_Id")
                    .IsUnique();

                entity.HasIndex(e => e.AccountBarcode, "IX_noticeResultNotices_accountBarcode");

                entity.HasIndex(e => e.AccountServiceId, "IX_noticeResultNotices_accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.AccountBarcode)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("accountBarcode");

                entity.Property(e => e.AccountToPaySummBarcode)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("accountToPaySummBarcode");

                entity.Property(e => e.BeginSaldoSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginSaldoSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CodeCalcCharge)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("codeCalcCharge");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.ToPaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySumm");

                entity.HasOne(d => d.NoticeTemplateSetting)
                    .WithMany(p => p.ResultNotices)
                    .HasForeignKey(d => d.NoticeTemplateSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("noticeResultNotices_noticetemplateSettingId");
            });

            modelBuilder.Entity<ResultNoticesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ResultNoticesView", "notice");

                entity.Property(e => e.AccountBarcode)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("accountBarcode");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountToPaySummBarcode)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("accountToPaySummBarcode");

                entity.Property(e => e.BeginSaldoSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("beginSaldoSumm");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NoticeTemplateSettingId).HasColumnName("noticeTemplateSettingId");

                entity.Property(e => e.PaymentSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paymentSumm");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.TemplateId).HasColumnName("templateId");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("templateName");

                entity.Property(e => e.TemplateSettingName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("templateSettingName");

                entity.Property(e => e.ToPaySumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toPaySumm");
            });

            modelBuilder.Entity<Right>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("Rights", "sn");

                entity.HasIndex(e => e.Id, "UQ__Rights")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Уникальныйй идентификатор записи");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название конкретного права, например, вход в систему");

                entity.Property(e => e.TypeId).HasComment("Ссылка на уникальный идентификатор ID таблицы sn.RightTypes");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Rights)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_Rights_RightTypes");
            });

            modelBuilder.Entity<RightGroup>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_RoleGroups")
                    .IsClustered(false);

                entity.ToTable("RightGroups", "sn");

                entity.HasIndex(e => new { e.GroupId, e.RightId }, "IX_RightGroups_GroupId_RightId");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.RightId).HasComment("Ссылка на уникальный идентификатор таблицы Right");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.RightGroupGroups)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_RightGroups_Groups");

                entity.HasOne(d => d.Right)
                    .WithMany(p => p.RightGroupRights)
                    .HasForeignKey(d => d.RightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RightGroups_Rights");
            });

            modelBuilder.Entity<RightType>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("RightTypes", "sn");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название типа прав");
            });

            modelBuilder.Entity<RolesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RolesView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(128)
                    .HasColumnName("printName");

                entity.Property(e => e.TypeRole)
                    .HasMaxLength(128)
                    .HasColumnName("typeRole");
            });

            modelBuilder.Entity<Run>(entity =>
            {
                entity.HasKey(e => e.AccountServiceId)
                    .HasName("PK__arcAccountServices");

                entity.ToTable("run", "arc");

                entity.Property(e => e.AccountServiceId)
                    .ValueGeneratedNever()
                    .HasColumnName("accountServiceId");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.Baseimport).HasColumnName("baseimport");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Period)
                    .HasColumnType("date")
                    .HasColumnName("period");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");
            });

            modelBuilder.Entity<Run1>(entity =>
            {
                entity.ToTable("Runs", "test");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("endTime");

                entity.Property(e => e.ErrorText)
                    .IsUnicode(false)
                    .HasColumnName("errorText");

                entity.Property(e => e.IsError).HasColumnName("isError");

                entity.Property(e => e.StartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("startTime");
            });

            modelBuilder.Entity<SaveApartmentCounterIndicationsNotChek>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SaveApartmentCounterIndicationsNotChek", "sn");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InvoiceNumber).HasColumnName("invoiceNumber");

                entity.Property(e => e.MethodValInsert).HasColumnName("methodValInsert");

                entity.Property(e => e.Pack).HasColumnName("pack");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.SourceValType).HasColumnName("sourceValType");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.Val)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("val");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");

                entity.Property(e => e.ValRevert)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("valRevert");

                entity.Property(e => e.ValType).HasColumnName("valType");
            });

            modelBuilder.Entity<SendMessage>(entity =>
            {
                entity.ToTable("SendMessages", "bot");

                entity.HasIndex(e => e.Status, " botSendMessages_status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErrorText)
                    .IsUnicode(false)
                    .HasColumnName("errorText");

                entity.Property(e => e.MessageText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("messageText");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<SendQuery>(entity =>
            {
                entity.ToTable("SendQuery", "sms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Respond)
                    .HasColumnType("xml")
                    .HasColumnName("respond");

                entity.Property(e => e.Result).HasColumnName("result");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.SendQueries)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_sendQuery_AccountId");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.SendQueries)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_sendQuery_RequestId");
            });

            modelBuilder.Entity<SendingXmlToServiceData>(entity =>
            {
                entity.ToTable("SendingXmlToServiceDatas", "ext");

                entity.HasIndex(e => new { e.ParentId, e.Id }, "IX__SendingXmlToServiceDatas_parentId_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("data");

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.Response)
                    .IsUnicode(false)
                    .HasColumnName("response");
            });

            modelBuilder.Entity<SendingXmlToServiceGetXmlsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SendingXmlToServiceGetXMLsView", "ext");

                entity.Property(e => e.AuthUserPasswd)
                    .IsUnicode(false)
                    .HasColumnName("authUserPasswd");

                entity.Property(e => e.CountDatas).HasColumnName("countDatas");

                entity.Property(e => e.CountResponses).HasColumnName("countResponses");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DataId).HasColumnName("dataId");

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("errorMessage");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("reportNumber");

                entity.Property(e => e.Response)
                    .IsUnicode(false)
                    .HasColumnName("response");

                entity.Property(e => e.ServiceAddress)
                    .IsUnicode(false)
                    .HasColumnName("serviceAddress");

                entity.Property(e => e.Xmldata).HasColumnName("xmldata");
            });

            modelBuilder.Entity<SendingXmlToServiceHeader>(entity =>
            {
                entity.ToTable("SendingXmlToServiceHeaders", "ext");

                entity.HasIndex(e => new { e.ParentId, e.Id }, "IX__SendingXmlToServiceHeaders_parentId_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthUserPasswd)
                    .IsUnicode(false)
                    .HasColumnName("authUserPasswd");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Footer)
                    .IsUnicode(false)
                    .HasColumnName("footer");

                entity.Property(e => e.Header)
                    .IsUnicode(false)
                    .HasColumnName("header");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ServiceAddress)
                    .IsUnicode(false)
                    .HasColumnName("serviceAddress");
            });

            modelBuilder.Entity<SendingXmlToServiceView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SendingXmlToServiceView", "ext");

                entity.Property(e => e.AuthUserPasswd)
                    .IsUnicode(false)
                    .HasColumnName("authUserPasswd");

                entity.Property(e => e.CountDatas).HasColumnName("countDatas");

                entity.Property(e => e.CountResponses).HasColumnName("countResponses");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DataId).HasColumnName("dataId");

                entity.Property(e => e.ErrorMessage).HasColumnName("errorMessage");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(266)
                    .IsUnicode(false)
                    .HasColumnName("reportNumber");

                entity.Property(e => e.Response).HasColumnName("response");

                entity.Property(e => e.ServiceAddress)
                    .IsUnicode(false)
                    .HasColumnName("serviceAddress");

                entity.Property(e => e.Xmldata)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("xmldata");
            });

            modelBuilder.Entity<Server>(entity =>
            {
                entity.ToTable("Servers", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DbName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dbName");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ipAddress");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.Property(e => e.UserPwd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userPwd");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => new { e.Period, e.ServiceId })
                    .HasName("PK_rep_Services");

                entity.ToTable("Services", "rep");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.ServiceApartmentTypeId).HasColumnName("serviceApartmentTypeId");

                entity.Property(e => e.ServiceApartmentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceApartmentTypeName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<Service1>(entity =>
            {
                entity.ToTable("Services", "sn");

                entity.HasIndex(e => e.TypeId, "IX_Service_typeId");

                entity.HasIndex(e => e.AlgorithmId, "IX_Services_algorithmId_inc_Id");

                entity.HasIndex(e => e.MonthShift, "IX_Services_monthShift_Id");

                entity.HasIndex(e => e.ProviderId, "IX_Services_providerId_Id");

                entity.HasIndex(e => e.Code, "UIX_Service_code")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.AdrId)
                    .HasColumnName("adrId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы LocalAddresses");

                entity.Property(e => e.AlgorithmId)
                    .HasColumnName("algorithmId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы Calcalgorithms. Если алгоритмы периодичные - то использовать таблицу sn.ServiceCalcAlgs");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.CalcAccuracyCount)
                    .HasColumnName("calcAccuracyCount")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.CanHaveNegativeCharge)
                    .HasColumnName("canHaveNegativeCharge")
                    .HasComment("Возможность отрицательных начислений");

                entity.Property(e => e.CanRecalcInCloseAccount)
                    .HasColumnName("canRecalcInCloseAccount")
                    .HasComment("Производить перерасчет на закрытых лс");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.ClUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_usl");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasComment("Код сервиса / услуги (Внутренняя нумерация по порядку)");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарии");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate")
                    .HasDefaultValueSql("(CONVERT([datetime],'01.01.2000',(104)))")
                    .HasComment("Дата начала предоставления услуги");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.HouseHolderId)
                    .HasColumnName("houseHolderId")
                    .HasComment("Управляющая компания. Ссылка на уникальный идентификатор ID таблицы Organizations");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment)
                    .IsRequired()
                    .HasColumnName("isAvailableAvancePayment")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsBankrupt)
                    .HasColumnName("isBankrupt")
                    .HasComment("Банкрот");

                entity.Property(e => e.IsFixedPayment)
                    .HasColumnName("isFixedPayment")
                    .HasComment("Фиксированная оплата");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod)
                    .HasColumnName("isNotRecalculationOldPeriod")
                    .HasComment("Не производить расчета за старые периоды");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume)
                    .HasColumnName("isRecalcOldPeriodWithDifferenceVolume")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSeasonal)
                    .HasColumnName("isSeasonal")
                    .HasComment("Сезонная");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance)
                    .IsRequired()
                    .HasColumnName("isUseInPaymentWithClosedAvance")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName")
                    .HasComment("Наименование сервиса / услуги (ГВС, ХВС и т.д.)");

                entity.Property(e => e.MonthShift)
                    .HasColumnName("monthShift")
                    .HasComment("Рассчитывать за ранний период");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("providerId")
                    .HasComment("Поставщик услуги. Ссылка на уникальный идентификатор ID таблицы Organizations");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth)
                    .HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderId)
                    .HasColumnName("resourceProviderId")
                    .HasComment("Ресурсоснабжающая организация. Ссылка на уникальный идентификатор ID таблицы Organizations");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName")
                    .HasComment("Наименование сервиса / услуги (ГВС, ХВС и т.д.)");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate")
                    .HasComment("Дата окончания действия услуги");

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeId")
                    .HasComment("Ссылка на уникальный идентификатор ID таблицы ServiceTypes");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");

                entity.Property(e => e.UsePaymentPeriodForCounterPeriod).HasColumnName("usePaymentPeriodForCounterPeriod");

                entity.HasOne(d => d.Adr)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.AdrId)
                    .HasConstraintName("FK_Services_LocalAddresses");

                entity.HasOne(d => d.Algorithm)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.AlgorithmId)
                    .HasConstraintName("FK_Services_CalcAlgs");

                entity.HasOne(d => d.ApartmentTypeFasetItem)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.ApartmentTypeFasetItemId)
                    .HasConstraintName("FK_Services_FasetItems");

                entity.HasOne(d => d.Canonical)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.CanonicalId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Services_CanonicalServices");

                entity.HasOne(d => d.ExecutorGis)
                    .WithMany(p => p.Service1ExecutorGis)
                    .HasForeignKey(d => d.ExecutorGisId)
                    .HasConstraintName("FK_Services_Organizations4");

                entity.HasOne(d => d.FinancialCenter)
                    .WithMany(p => p.Service1FinancialCenters)
                    .HasForeignKey(d => d.FinancialCenterId)
                    .HasConstraintName("FK_Services_Organizations_FinancialCenter");

                entity.HasOne(d => d.GeneralContractor)
                    .WithMany(p => p.Service1GeneralContractors)
                    .HasForeignKey(d => d.GeneralContractorId)
                    .HasConstraintName("FK_Services_Organizations3");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.Service1HouseHolders)
                    .HasForeignKey(d => d.HouseHolderId)
                    .HasConstraintName("FK_Services_Organizations2");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.OrgDocId)
                    .HasConstraintName("FK_Services_OrgDocuments");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.Service1Providers)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Services_Organizations");

                entity.HasOne(d => d.ResourceProvider)
                    .WithMany(p => p.Service1ResourceProviders)
                    .HasForeignKey(d => d.ResourceProviderId)
                    .HasConstraintName("FK_Services_Organizations1");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Service1s)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Services_ServiceTypes");
            });

            modelBuilder.Entity<Service2>(entity =>
            {
                entity.ToTable("Services", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<ServiceBinding>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ServiceBindings", "bc");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ServiceBenefitName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceBenefitName");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ServiceCalcAlg>(entity =>
            {
                entity.ToTable("ServiceCalcAlgs", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate }, "UIX_ServiceCalcAlgs__serviceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CalcAlgId).HasColumnName("calcAlgId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.CalcAlg)
                    .WithMany(p => p.ServiceCalcAlgs)
                    .HasForeignKey(d => d.CalcAlgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCalcAlgs_CalcAlgs");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceCalcAlgs)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCalcAlgs_Services");
            });

            modelBuilder.Entity<ServiceCalcAlgsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceCalcAlgsView", "sn");

                entity.Property(e => e.CalcAlgId).HasColumnName("calcAlgId");

                entity.Property(e => e.CalcAlgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("calcAlgName");

                entity.Property(e => e.ChargeFormulaName)
                    .IsRequired()
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("chargeFormulaName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<ServiceChange>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("PK_auditServiceChange");

                entity.ToTable("ServiceChange", "audit");

                entity.Property(e => e.ServiceId)
                    .ValueGeneratedNever()
                    .HasColumnName("serviceId");

                entity.Property(e => e.NewCode).HasColumnName("newCode");

                entity.Property(e => e.OldCode).HasColumnName("oldCode");
            });

            modelBuilder.Entity<ServiceCommission>(entity =>
            {
                entity.ToTable("ServiceCommissions", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.Dateb }, "IUX_ServiceCommissions_serviceId_dateb")
                    .IsUnique();

                entity.HasIndex(e => e.Dateb, "IX_ServiceCommissions_dateb_serviceId_commission");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commission");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ServiceCommissions)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_ServiceCommissions_OrgDocuments");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceCommissions)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCommissions_Services");
            });

            modelBuilder.Entity<ServiceCommissionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceCommissionsView", "sn");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commission");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<ServiceGroup>(entity =>
            {
                entity.ToTable("ServiceGroups", "sn");

                entity.HasIndex(e => e.Code, "IUX_ServiceGroups")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ServiceGroupLink>(entity =>
            {
                entity.ToTable("ServiceGroupLinks", "sn");

                entity.HasIndex(e => e.ServiceId, "IUX_ServiceGroupLinks__serviceId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ServiceGroupLinks)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceGroups_ServiceGlobalGroups");

                entity.HasOne(d => d.Service)
                    .WithOne(p => p.ServiceGroupLink)
                    .HasForeignKey<ServiceGroupLink>(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceGroups_Services");
            });

            modelBuilder.Entity<ServiceGroupLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceGroupLinksView", "sn");

                entity.Property(e => e.CodeService).HasColumnName("codeService");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceGroupName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceGroupName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceProviderCode).HasColumnName("serviceProviderCode");

                entity.Property(e => e.ServiceProviderId).HasColumnName("serviceProviderId");

                entity.Property(e => e.ServiceProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceProviderName");
            });

            modelBuilder.Entity<ServiceNorm>(entity =>
            {
                entity.ToTable("ServiceNorms", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.Dateb, e.FromValue }, "UX_ServiceNorms_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppartmentType)
                    .HasColumnName("appartmentType")
                    .HasDefaultValueSql("([sn].[FasetItem_GetId]('Тип квартирности дома','Многоквартирный жилой дом'))");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fromValue");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toValue");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.HasOne(d => d.ByUnit)
                    .WithMany(p => p.ServiceNormByUnits)
                    .HasForeignKey(d => d.ByUnitId)
                    .HasConstraintName("FK_ServiceNorms_ByUnits");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ServiceNorms)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_ServiceNorms_OrgDocuments");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ServiceNormUnits)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceNorms_Units");
            });

            modelBuilder.Entity<ServiceNormBenefit>(entity =>
            {
                entity.ToTable("ServiceNormBenefits", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.Benefit)
                    .WithMany(p => p.ServiceNormBenefits)
                    .HasForeignKey(d => d.BenefitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceNormBenefits_Benefits");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceNormBenefits)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_ServiceNormBenefits_Services");
            });

            modelBuilder.Entity<ServiceNormBenefitsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceNormBenefitsView", "sn");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Code)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");
            });

            modelBuilder.Entity<ServiceNormType>(entity =>
            {
                entity.ToTable("ServiceNormTypes", "sn");

                entity.HasIndex(e => new { e.ServiceNormId, e.ApartmentPropertyId }, "IX__ServiceNormTypes_serviceNormId_apartmentPropertiyId_inc_rate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.HasOne(d => d.ApartmentProperty)
                    .WithMany(p => p.ServiceNormTypes)
                    .HasForeignKey(d => d.ApartmentPropertyId)
                    .HasConstraintName("FK_ServiceNormTypes_FasetItems");

                entity.HasOne(d => d.ServiceNorm)
                    .WithMany(p => p.ServiceNormTypes)
                    .HasForeignKey(d => d.ServiceNormId)
                    .HasConstraintName("FK_ServiceNormTypes_ServiceNorm");
            });

            modelBuilder.Entity<ServiceNormTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceNormTypesView", "sn");

                entity.Property(e => e.ApartmentPropertyId).HasColumnName("apartmentPropertyId");

                entity.Property(e => e.ApartmentPropertyName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentPropertyName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fasetName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");
            });

            modelBuilder.Entity<ServiceNormsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceNormsView", "sn");

                entity.Property(e => e.AppartmentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("appartmentType");

                entity.Property(e => e.ByUnitId).HasColumnName("byUnitId");

                entity.Property(e => e.ByUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("byUnitName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.FromValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fromValue");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.ToValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toValue");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<ServicePenaltiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServicePenaltiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.DocName)
                    .HasMaxLength(547)
                    .IsUnicode(false)
                    .HasColumnName("docName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PenaltyDay).HasColumnName("penaltyDay");

                entity.Property(e => e.PenaltyPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("penaltyPercent");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ServicePenalty>(entity =>
            {
                entity.ToTable("ServicePenalties", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate }, "IX_ServicePenalties_serviceId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.PenaltyDay).HasColumnName("penaltyDay");

                entity.Property(e => e.PenaltyPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("penaltyPercent");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ServicePenalties)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_ServicePenalties_OrgDocuments");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServicePenalties)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicePenalties_Services");
            });

            modelBuilder.Entity<ServiceProvider>(entity =>
            {
                entity.ToTable("ServiceProviders", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ServiceProviders)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spServiceProviders_orgId");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceProviders)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_spServiceProviders_spServiceId");
            });

            modelBuilder.Entity<ServiceProvidersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceProvidersView", "sp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<ServiceSeasonal>(entity =>
            {
                entity.ToTable("ServiceSeasonals", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.FromDate }, "IX__ServiceSeasonals_serviceId_fromDate");

                entity.HasIndex(e => new { e.ServiceId, e.ToDate }, "IX__ServiceSeasonals_serviceId_toDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceSeasonals)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSeasonals_ServiceId");
            });

            modelBuilder.Entity<ServiceSplitBalance>(entity =>
            {
                entity.ToTable("ServiceSplitBalance", "sn");

                entity.HasIndex(e => new { e.OrgId, e.OrgDocId, e.OnEndOfDate }, "UX_ServiceSplitBalance__orgId_orgDocId_onEndOfDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Balance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balance");

                entity.Property(e => e.OnEndOfDate)
                    .HasColumnType("datetime")
                    .HasColumnName("onEndOfDate");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.ServiceSplitBalances)
                    .HasForeignKey(d => d.OrgDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitBalance_OrgDocuments");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ServiceSplitBalances)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitBalance_Organizations");
            });

            modelBuilder.Entity<ServiceSplitDocument>(entity =>
            {
                entity.ToTable("ServiceSplitDocuments", "sn");

                entity.HasIndex(e => new { e.MainOrgDocumentId, e.FromDate }, "UX_ServiceSplitDocuments__mainOrgDocumentId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.MainOrgDocumentId).HasColumnName("mainOrgDocumentId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.MainOrgDocument)
                    .WithMany(p => p.ServiceSplitDocuments)
                    .HasForeignKey(d => d.MainOrgDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SchemeSplittingCalcs_OrgDocuments");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.ServiceSplitDocuments)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SchemeSplittingCalcs_Organizations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ServiceSplitDocuments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_SchemeSplittingCalcs_Users");
            });

            modelBuilder.Entity<ServiceSplitDocumentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceSplitDocumentsView", "sn");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MainOrgDocumentId).HasColumnName("mainOrgDocumentId");

                entity.Property(e => e.MainProviderDocName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("mainProviderDocName");

                entity.Property(e => e.MainProviderId).HasColumnName("mainProviderId");

                entity.Property(e => e.MainProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("mainProviderName");

                entity.Property(e => e.MainProviderNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mainProviderNumber");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<ServiceSplitJn>(entity =>
            {
                entity.ToTable("ServiceSplitJn", "sn");

                entity.HasIndex(e => e.SplitDate, "IX_ServiceSplitJn_transferDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.IsLiveMoney).HasColumnName("isLiveMoney");

                entity.Property(e => e.IsRecalc).HasColumnName("isRecalc");

                entity.Property(e => e.JnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("jnDate");

                entity.Property(e => e.JnId).HasColumnName("jnId");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.SplitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("splitDate");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.TransferToOrgId).HasColumnName("transferToOrgId");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.ServiceSplitJns)
                    .HasForeignKey(d => d.OrgDocId)
                    .HasConstraintName("FK_ServiceSplitJn_OrgDocuments");

                entity.HasOne(d => d.TransferToOrg)
                    .WithMany(p => p.ServiceSplitJns)
                    .HasForeignKey(d => d.TransferToOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitJn_Organizations");
            });

            modelBuilder.Entity<ServiceSplitJnTransfer>(entity =>
            {
                entity.ToTable("ServiceSplitJnTransfers", "sn");

                entity.HasIndex(e => e.SplitJnId, "IX_ServiceSplitJnTransfers__splitJnId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SplitJnId).HasColumnName("splitJnId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transferDate");

                entity.HasOne(d => d.SplitJn)
                    .WithMany(p => p.ServiceSplitJnTransfers)
                    .HasForeignKey(d => d.SplitJnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitJnTransfers_ServiceSplitJn");
            });

            modelBuilder.Entity<ServiceSplitLink>(entity =>
            {
                entity.ToTable("ServiceSplitLinks", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.HouseHolderId }, "IX_ServiceSplitLinks__serviceId_houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.HasOne(d => d.HouseHolder)
                    .WithMany(p => p.ServiceSplitLinks)
                    .HasForeignKey(d => d.HouseHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSchemeSplittingCalcs_Organizations");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.ServiceSplitLinks)
                    .HasForeignKey(d => d.OrgDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSchemeSplittingCalcs_OrgDocuments");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceSplitLinks)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSchemeSplittingCalcs_Services");
            });

            modelBuilder.Entity<ServiceSplitLinksView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceSplitLinksView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("organizationName");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");
            });

            modelBuilder.Entity<ServiceSplitPaymentPercent>(entity =>
            {
                entity.ToTable("ServiceSplitPaymentPercents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.ServiceSplitPaymentPercents)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitComissionPercents_OrgDocuments");
            });

            modelBuilder.Entity<ServiceSplitPercent>(entity =>
            {
                entity.ToTable("ServiceSplitPercents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplyPaymentPercentHere).HasColumnName("applyPaymentPercentHere");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.ServiceSplitDocumentId).HasColumnName("serviceSplitDocumentId");

                entity.HasOne(d => d.OrgDocument)
                    .WithMany(p => p.ServiceSplitPercents)
                    .HasForeignKey(d => d.OrgDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SchemeSplittingCalcOrganizations_OrgDocuments");

                entity.HasOne(d => d.ServiceSplitDocument)
                    .WithMany(p => p.ServiceSplitPercents)
                    .HasForeignKey(d => d.ServiceSplitDocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SchemeSplittingCalcOrganizations_SchemeSplittingCalcs");
            });

            modelBuilder.Entity<ServiceSplitPercentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceSplitPercentsView", "sn");

                entity.Property(e => e.ApplyPaymentPercentHere).HasColumnName("applyPaymentPercentHere");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentId).HasColumnName("orgDocumentId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.ServiceSplitDocumentId).HasColumnName("serviceSplitDocumentId");
            });

            modelBuilder.Entity<ServiceSplitTransfer>(entity =>
            {
                entity.ToTable("ServiceSplitTransfers", "sn");

                entity.HasIndex(e => e.TransferDate, "IX_ServiceSplitTransfers_transferDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.IsExported).HasColumnName("isExported");

                entity.Property(e => e.IsRecalc).HasColumnName("isRecalc");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transferDate");

                entity.Property(e => e.TransferToOrgId).HasColumnName("transferToOrgId");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.ServiceSplitTransfers)
                    .HasForeignKey(d => d.OrgDocId)
                    .HasConstraintName("FK_ServiceSplitTransfers_OrgDocuments");

                entity.HasOne(d => d.TransferToOrg)
                    .WithMany(p => p.ServiceSplitTransfers)
                    .HasForeignKey(d => d.TransferToOrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceSplitTransfers_Organizations");
            });

            modelBuilder.Entity<ServiceSplitTransfersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceSplitTransfersView", "sn");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DocComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("docComment");

                entity.Property(e => e.DocIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("docIssueDate");

                entity.Property(e => e.DocNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docNumber");

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("docTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsExported).HasColumnName("isExported");

                entity.Property(e => e.IsRecalc).HasColumnName("isRecalc");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.OrgInn).HasColumnName("orgINN");

                entity.Property(e => e.OrgKpp).HasColumnName("orgKPP");

                entity.Property(e => e.OrgLongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgLongName");

                entity.Property(e => e.OrgShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgShortName");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transferDate");

                entity.Property(e => e.TransferToOrgId).HasColumnName("transferToOrgId");
            });

            modelBuilder.Entity<ServiceTariff>(entity =>
            {
                entity.ToTable("ServiceTariffs", "sn");

                entity.HasIndex(e => new { e.ServiceId, e.Dateb }, "IUX_ServiceTariffs_serviceId_dateb")
                    .IsUnique();

                entity.HasIndex(e => e.Dateb, "IX_ServiceTariffs_dateb_serviceId_rate");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Capacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("capacity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate")
                    .HasComment("Собственно тариф");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("serviceId")
                    .HasComment("Ссылка на уникаотный идентификатор ID таблицы Services. Фактически ссыылка на услугу");

                entity.Property(e => e.SuperRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("superRate");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ServiceTariffs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("FK_ServiceTariffs_OrgDocuments");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceTariffs)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTariffs_Services");
            });

            modelBuilder.Entity<ServiceTariffType>(entity =>
            {
                entity.ToTable("ServiceTariffTypes", "sn");

                entity.HasIndex(e => new { e.ServiceTariffId, e.TariffTypeId }, "IX_ServiceTariffTypes")
                    .IsUnique();

                entity.HasIndex(e => e.TariffTypeId, "IX_ServiceTariffTypes_tariffTypeId_serviceTariffId_rate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceTariffId).HasColumnName("serviceTariffId");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.HasOne(d => d.ServiceTariff)
                    .WithMany(p => p.ServiceTariffTypes)
                    .HasForeignKey(d => d.ServiceTariffId)
                    .HasConstraintName("FK_ServiceTariffTypes_ServiceTariff");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.ServiceTariffTypes)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTariffTypes_FasetItems");
            });

            modelBuilder.Entity<ServiceTariffTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTariffTypesView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceTariffId).HasColumnName("serviceTariffId");

                entity.Property(e => e.TariffTypeId).HasColumnName("tariffTypeId");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tariffTypeName");
            });

            modelBuilder.Entity<ServiceTariffsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTariffsView", "sn");

                entity.Property(e => e.AdrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adrName");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.ProviderCode).HasColumnName("providerCode");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerName");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceCode).HasColumnName("serviceCode");

                entity.Property(e => e.ServiceFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceFromDate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceToDate");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.SuperRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("superRate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<ServiceTreatiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTreatiesView", "sn");

                entity.Property(e => e.AddressName)
                    .IsRequired()
                    .HasMaxLength(454)
                    .IsUnicode(false)
                    .HasColumnName("addressName");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.Count)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("count");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ServiceTypeGroupCode).HasColumnName("serviceTypeGroupCode");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Tariff)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("tariff");

                entity.Property(e => e.TreatieId).HasColumnName("treatieId");
            });

            modelBuilder.Entity<ServiceTreaty>(entity =>
            {
                entity.ToTable("ServiceTreaties", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.Count)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("count");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("summ");

                entity.Property(e => e.Tariff)
                    .HasColumnType("decimal(8, 2)")
                    .HasColumnName("tariff");

                entity.Property(e => e.TreatieId).HasColumnName("treatieId");

                entity.HasOne(d => d.Adr)
                    .WithMany(p => p.ServiceTreaties)
                    .HasForeignKey(d => d.AdrId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceTr__adrId");

                entity.HasOne(d => d.Treatie)
                    .WithMany(p => p.ServiceTreaties)
                    .HasForeignKey(d => d.TreatieId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ServiceTr__treatieId");
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.ToTable("ServiceTypes", "sn");

                entity.HasIndex(e => e.Code, "UIX_ServiceTypes__code")
                    .IsUnique();

                entity.HasIndex(e => e.ShortName, "UIX_ServiceTypes__shortName");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.ClT)
                    .HasColumnName("cl_t")
                    .HasComment("Не используется");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasComment("Код");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.ExternalCodeId).HasColumnName("externalCodeId");

                entity.Property(e => e.IsGroup)
                    .HasColumnName("isGroup")
                    .HasComment("Признак группы услуг");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName")
                    .HasComment("Название услуги (полное)");

                entity.Property(e => e.ObjT)
                    .HasColumnName("obj_t")
                    .HasComment("Не используется");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parentId")
                    .HasComment("Ссыллка на родителя (ID в этой же таблице)");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName")
                    .HasComment("Название услуги (короткое)");

                entity.Property(e => e.TypeId)
                    .HasColumnName("typeId")
                    .HasComment("Вид услуги. Ссылка на таблицу sn.FasetItems  (FasetName = Вид услуги; FasetId=52)");

                entity.Property(e => e.UnitId)
                    .HasColumnName("unitId")
                    .HasComment("Ед.измерения. Ссылка на таблицу sn.FasetItems  (FasetName = Единицы измерения; FasetId=3)");

                entity.Property(e => e.UnloadDbfName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unloadDbfName")
                    .HasComment("Сокращение для выгрузок");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_ServiceTypes_ServiceTypes");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ServiceTypeTypes)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_ServiceTypes_FasetItems__typeId");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.ServiceTypeUnits)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_ServiceTypes_FasetItems__unitId");
            });

            modelBuilder.Entity<ServiceTypeContext>(entity =>
            {
                entity.ToTable("ServiceTypeContext", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.TypeContextId).HasColumnName("typeContextId");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ServiceTypeContexts)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ServiceTypeContext_ServicesTypes");

                entity.HasOne(d => d.TypeContext)
                    .WithMany(p => p.ServiceTypeContexts)
                    .HasForeignKey(d => d.TypeContextId)
                    .HasConstraintName("FK_ServiceTypeContext_FasetItem");
            });

            modelBuilder.Entity<ServiceTypeContextView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeContextView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiseTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviseTypeName");

                entity.Property(e => e.TypeContextId).HasColumnName("typeContextId");

                entity.Property(e => e.TypeContextName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeContextName");
            });

            modelBuilder.Entity<ServiceTypeGroup>(entity =>
            {
                entity.ToTable("ServiceTypeGroups", "sn");

                entity.HasIndex(e => new { e.ChildId, e.GroupTypeId }, "IX_ServiceTypeGroups_childId_groupTypeId");

                entity.HasIndex(e => new { e.ChildId, e.GroupTypeId }, "IX_ServiceTypeGroups_childId_groupTypeId_withName");

                entity.HasIndex(e => new { e.GroupTypeId, e.ParentId }, "IX_ServiceTypeGroups_groupTypeId_parentId");

                entity.HasIndex(e => new { e.ParentId, e.Name, e.GroupTypeId }, "IX_ServiceTypeGroups_name_parentId_groupTypeId");

                entity.HasIndex(e => new { e.ParentId, e.GroupTypeId }, "IX_ServiceTypeGroups_parentId_groupTypeId");

                entity.HasIndex(e => new { e.Code, e.ParentId, e.GroupTypeId, e.ChildId }, "UN_ServiceTypeGroups_code_parentId_groupTypeId_childId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.GroupTypeId).HasColumnName("groupTypeId");

                entity.Property(e => e.IsTariffZero).HasColumnName("isTariffZero");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.ServiceTypeGroupChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeGroups_childId");

                entity.HasOne(d => d.GroupType)
                    .WithMany(p => p.ServiceTypeGroups)
                    .HasForeignKey(d => d.GroupTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeGroups_groupTypeId");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.ServiceTypeGroupParents)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_ServiceTypeGroups_parentId");
            });

            modelBuilder.Entity<ServiceTypeGroupCondition>(entity =>
            {
                entity.ToTable("ServiceTypeGroupConditions", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.NormRateDecimalPlace).HasColumnName("normRateDecimalPlace");

                entity.Property(e => e.RateDecimalPlace).HasColumnName("rateDecimalPlace");

                entity.Property(e => e.ResourceDecimalPlace).HasColumnName("resourceDecimalPlace");

                entity.Property(e => e.RuleNormRateId).HasColumnName("ruleNormRateId");

                entity.Property(e => e.RuleRateId).HasColumnName("ruleRateId");

                entity.Property(e => e.RuleResurceId).HasColumnName("ruleResurceId");

                entity.Property(e => e.SplitByPeriod).HasColumnName("splitByPeriod");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.ServiceTypeGroupConditions)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeGroupConditions_groupId");

                entity.HasOne(d => d.RuleNormRate)
                    .WithMany(p => p.ServiceTypeGroupConditionRuleNormRates)
                    .HasForeignKey(d => d.RuleNormRateId)
                    .HasConstraintName("FK_ServiceTypeGroupConditions_ruleNormRateId");

                entity.HasOne(d => d.RuleRate)
                    .WithMany(p => p.ServiceTypeGroupConditionRuleRates)
                    .HasForeignKey(d => d.RuleRateId)
                    .HasConstraintName("FK_ServiceTypeGroupConditions_ruleRateId");

                entity.HasOne(d => d.RuleResurce)
                    .WithMany(p => p.ServiceTypeGroupConditionRuleResurces)
                    .HasForeignKey(d => d.RuleResurceId)
                    .HasConstraintName("FK_ServiceTypeGroupConditions_ruleResurceId");
            });

            modelBuilder.Entity<ServiceTypeGroupConditionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeGroupConditionsView", "sn");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NormRateDecimalPlace).HasColumnName("normRateDecimalPlace");

                entity.Property(e => e.RateDecimalPlace).HasColumnName("rateDecimalPlace");

                entity.Property(e => e.ResourceDecimalPlace).HasColumnName("resourceDecimalPlace");

                entity.Property(e => e.RuleNormRateId).HasColumnName("ruleNormRateId");

                entity.Property(e => e.RuleNormRateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ruleNormRateName");

                entity.Property(e => e.RuleRateId).HasColumnName("ruleRateId");

                entity.Property(e => e.RuleRateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ruleRateName");

                entity.Property(e => e.RuleResurceId).HasColumnName("ruleResurceId");

                entity.Property(e => e.RuleResurceName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ruleResurceName");

                entity.Property(e => e.SplitByPeriod).HasColumnName("splitByPeriod");
            });

            modelBuilder.Entity<ServiceTypeGroupPermit>(entity =>
            {
                entity.ToTable("ServiceTypeGroupPermits", "sn");

                entity.HasIndex(e => e.Id, "IX_ServiceTypeGroupPermits_Id");

                entity.HasIndex(e => new { e.GroupTypeId, e.Name }, "IX_ServiceTypeGroupPermits_groupTypeId_name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.GroupTypeId).HasColumnName("groupTypeId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.HasOne(d => d.GroupType)
                    .WithMany(p => p.ServiceTypeGroupPermits)
                    .HasForeignKey(d => d.GroupTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeGroupPermits_groupTypeId");
            });

            modelBuilder.Entity<ServiceTypeGroupsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeGroupsView", "sn");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.ChildShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("childShortName");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.GroupTypeId).HasColumnName("groupTypeId");

                entity.Property(e => e.GroupTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ParentShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("parentShortName");
            });

            modelBuilder.Entity<ServiceTypeReplacement>(entity =>
            {
                entity.ToTable("ServiceTypeReplacement", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChildId).HasColumnName("childId");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.ServiceTypeReplacementChildren)
                    .HasForeignKey(d => d.ChildId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeReplacement_childId");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.ServiceTypeReplacementParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeReplacement_parentId");
            });

            modelBuilder.Entity<ServiceTypeSubQuality>(entity =>
            {
                entity.ToTable("ServiceTypeSubQuality", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchive).HasColumnName("isArchive");

                entity.Property(e => e.Normativ).HasColumnName("normativ");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.QualityName).HasColumnName("qualityName");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SuspensionRule)
                    .IsRequired()
                    .HasColumnName("suspensionRule");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.ServiceTypeSubQualities)
                    .HasForeignKey(d => d.OrgDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubQuality_OrgDocuments");

                entity.HasOne(d => d.QualityType)
                    .WithMany(p => p.ServiceTypeSubQualities)
                    .HasForeignKey(d => d.QualityTypeId)
                    .HasConstraintName("FK_ServiceTypeSubQuality_ServiceTypeSuspensionTypes");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ServiceTypeSubQualities)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubQuality_ServiceTypes");
            });

            modelBuilder.Entity<ServiceTypeSubQualityAcceptableDuration>(entity =>
            {
                entity.ToTable("ServiceTypeSubQualityAcceptableDurations", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DayTemperatureAcceptableDifference)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("dayTemperatureAcceptableDifference");

                entity.Property(e => e.HoursAtOnce).HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursTotal).HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear).HasColumnName("hoursTotalYear");

                entity.Property(e => e.NightTemperatureAcceptableDifference)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTemperatureAcceptableDifference");

                entity.Property(e => e.NightTimeEnd)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTimeEnd");

                entity.Property(e => e.NightTimeStart)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTimeStart");

                entity.Property(e => e.OverTemperatureAcceptable)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("overTemperatureAcceptable");

                entity.Property(e => e.PressureAcceptableDifference)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureAcceptableDifference");

                entity.Property(e => e.PressureEnd)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureEnd");

                entity.Property(e => e.PressureStart)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureStart");

                entity.Property(e => e.ServiceTypeSubQualityId).HasColumnName("serviceTypeSubQualityId");

                entity.Property(e => e.TemperatureEnd)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureEnd");

                entity.Property(e => e.TemperatureStart)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureStart");

                entity.HasOne(d => d.ServiceTypeSubQuality)
                    .WithMany(p => p.ServiceTypeSubQualityAcceptableDurations)
                    .HasForeignKey(d => d.ServiceTypeSubQualityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubQualityAcceptableDurations_ServiceTypeSubQuality");
            });

            modelBuilder.Entity<ServiceTypeSubQualityAcceptableDurationsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSubQualityAcceptableDurationsView", "sn");

                entity.Property(e => e.AcceptableDurationName)
                    .HasMaxLength(211)
                    .IsUnicode(false)
                    .HasColumnName("acceptableDurationName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DayTemperatureAcceptableDifference)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("dayTemperatureAcceptableDifference");

                entity.Property(e => e.HoursAtOnce).HasColumnName("hoursAtOnce");

                entity.Property(e => e.HoursTotal).HasColumnName("hoursTotal");

                entity.Property(e => e.HoursTotalYear).HasColumnName("hoursTotalYear");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NightTemperatureAcceptableDifference)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTemperatureAcceptableDifference");

                entity.Property(e => e.NightTimeEnd)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTimeEnd");

                entity.Property(e => e.NightTimeStart)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("nightTimeStart");

                entity.Property(e => e.OverTemperatureAcceptable)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("overTemperatureAcceptable");

                entity.Property(e => e.PressureAcceptableDifference)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureAcceptableDifference");

                entity.Property(e => e.PressureEnd)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureEnd");

                entity.Property(e => e.PressureStart)
                    .HasColumnType("decimal(8, 4)")
                    .HasColumnName("pressureStart");

                entity.Property(e => e.QualityName).HasColumnName("qualityName");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeSubQualityId).HasColumnName("serviceTypeSubQualityId");

                entity.Property(e => e.TemperatureEnd)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureEnd");

                entity.Property(e => e.TemperatureStart)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureStart");
            });

            modelBuilder.Entity<ServiceTypeSubQualityAlias>(entity =>
            {
                entity.ToTable("ServiceTypeSubQualityAliases", "sn");

                entity.HasIndex(e => new { e.ServiceTypeId, e.Name }, "UX_ServiceTypeSubQualityAlias_ServiceTypeId_Name")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ServiceTypeSubQualityAliases)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubQualityAlias_ServiceTypes");
            });

            modelBuilder.Entity<ServiceTypeSubQualityAliasesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSubQualityAliasesView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ServiceTypeSubQualityPercent>(entity =>
            {
                entity.ToTable("ServiceTypeSubQualityPercents", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.DeviationEnd)
                    .HasColumnType("decimal(6, 0)")
                    .HasColumnName("deviationEnd");

                entity.Property(e => e.DeviationStart)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("deviationStart");

                entity.Property(e => e.HotTemperatureLimit)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("hotTemperatureLimit");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.ServiceTypeSubQualityId).HasColumnName("serviceTypeSubQualityId");

                entity.Property(e => e.TemperatureGradationStep)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureGradationStep");

                entity.HasOne(d => d.ServiceTypeSubQuality)
                    .WithMany(p => p.ServiceTypeSubQualityPercents)
                    .HasForeignKey(d => d.ServiceTypeSubQualityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubQualityPercents_ServiceTypeSubQuality");
            });

            modelBuilder.Entity<ServiceTypeSubQualityPercentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSubQualityPercentsView", "sn");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.DeviationEnd)
                    .HasColumnType("decimal(6, 0)")
                    .HasColumnName("deviationEnd");

                entity.Property(e => e.DeviationStart)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("deviationStart");

                entity.Property(e => e.HotTemperatureLimit)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("hotTemperatureLimit");

                entity.Property(e => e.HoursCount)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("hoursCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("percent");

                entity.Property(e => e.QualityName).HasColumnName("qualityName");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeSubQualityId).HasColumnName("serviceTypeSubQualityId");

                entity.Property(e => e.StsqpName)
                    .HasMaxLength(323)
                    .IsUnicode(false)
                    .HasColumnName("stsqpName");

                entity.Property(e => e.TemperatureGradationStep)
                    .HasColumnType("decimal(4, 2)")
                    .HasColumnName("temperatureGradationStep");
            });

            modelBuilder.Entity<ServiceTypeSubQualityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSubQualityView", "sn");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchive).HasColumnName("isArchive");

                entity.Property(e => e.Normativ).HasColumnName("normativ");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgDocumentName)
                    .HasMaxLength(383)
                    .IsUnicode(false)
                    .HasColumnName("orgDocumentName");

                entity.Property(e => e.QualityName).HasColumnName("qualityName");

                entity.Property(e => e.QualityTypeId).HasColumnName("qualityTypeId");

                entity.Property(e => e.QualityTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("qualityTypeName");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");

                entity.Property(e => e.ServiceTypeNameAlias)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeNameAlias");

                entity.Property(e => e.SuspensionRule)
                    .IsRequired()
                    .HasColumnName("suspensionRule");
            });

            modelBuilder.Entity<ServiceTypeSubstitution>(entity =>
            {
                entity.ToTable("ServiceTypeSubstitutions", "sn");

                entity.HasIndex(e => new { e.SourceServiceTypeId, e.SourceServiceTypeIdByReport, e.DestinationServiceTypeId }, "UX_ServiceTypeSubstitutions__sourceServiceTypeId_destinationServiceTypeId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DestinationServiceTypeId).HasColumnName("destinationServiceTypeId");

                entity.Property(e => e.SourceServiceTypeId).HasColumnName("sourceServiceTypeId");

                entity.Property(e => e.SourceServiceTypeIdByReport).HasColumnName("sourceServiceTypeIdByReport");

                entity.HasOne(d => d.DestinationServiceType)
                    .WithMany(p => p.ServiceTypeSubstitutionDestinationServiceTypes)
                    .HasForeignKey(d => d.DestinationServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceTypeSubstitutions_ServiceTypes");

                entity.HasOne(d => d.SourceServiceType)
                    .WithMany(p => p.ServiceTypeSubstitutionSourceServiceTypes)
                    .HasForeignKey(d => d.SourceServiceTypeId)
                    .HasConstraintName("FK_ServiceTypeSubstitutions_ServiceTypes1");

                entity.HasOne(d => d.SourceServiceTypeIdByReportNavigation)
                    .WithMany(p => p.ServiceTypeSubstitutionSourceServiceTypeIdByReportNavigations)
                    .HasForeignKey(d => d.SourceServiceTypeIdByReport)
                    .HasConstraintName("FK_ServiceTypeSubstitutions_ServiceTypes2");
            });

            modelBuilder.Entity<ServiceTypeSubstitutionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSubstitutionsView", "sn");

                entity.Property(e => e.DestinationServiceTypeId).HasColumnName("destinationServiceTypeId");

                entity.Property(e => e.DestinationServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("destinationServiceTypeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SourceServiceTypeId).HasColumnName("sourceServiceTypeId");

                entity.Property(e => e.SourceServiceTypeIdByReport).HasColumnName("sourceServiceTypeIdByReport");

                entity.Property(e => e.SourceServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sourceServiceTypeName");

                entity.Property(e => e.SourceServiceTypeNameByReport)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sourceServiceTypeNameByReport");
            });

            modelBuilder.Entity<ServiceTypeSynonym>(entity =>
            {
                entity.HasKey(e => new { e.OrgId, e.ServiceName });

                entity.ToTable("ServiceTypeSynonyms", "sn");

                entity.HasIndex(e => e.Id, "UX_ServiceTypeSynonyms_id")
                    .IsUnique();

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.ServiceTypeSynonyms)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ServiceTypeSynonyms)
                    .HasForeignKey(d => d.ServiceTypeId);
            });

            modelBuilder.Entity<ServiceTypeSynonymsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypeSynonymsView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrganizationName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeCode).HasColumnName("serviceTypeCode");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ServiceTypesKbkview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypesKBKView", "sn");

                entity.Property(e => e.ConsumerGroupId).HasColumnName("consumerGroupId");

                entity.Property(e => e.ConsumerGroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("consumerGroupName");

                entity.Property(e => e.ExternalServiceTypeId).HasColumnName("externalServiceTypeId");

                entity.Property(e => e.ExternalServiceTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalServiceTypeName");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KBK");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ServiceTypesSynonym>(entity =>
            {
                entity.ToTable("ServiceTypesSynonyms", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceName");

                entity.Property(e => e.ServiceTypeName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("serviceTypeName");
            });

            modelBuilder.Entity<ServiceTypesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypesView", "sn");

                entity.Property(e => e.ClT).HasColumnName("cl_t");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.ExternalCodeId).HasColumnName("externalCodeId");

                entity.Property(e => e.ExternalCodeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCodeName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsGroup).HasColumnName("isGroup");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.ObjT).HasColumnName("obj_t");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.UnloadDbfName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unloadDbfName");
            });

            modelBuilder.Entity<ServiceTypesWithBenefitSrvTypeLinkView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServiceTypesWithBenefitSrvTypeLinkView", "sn");

                entity.Property(e => e.BenefitServiceTypeId).HasColumnName("benefitServiceTypeId");

                entity.Property(e => e.ClT).HasColumnName("cl_t");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.ExternalCodeId).HasColumnName("externalCodeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsGroup).HasColumnName("isGroup");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.ObjT).HasColumnName("obj_t");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.UnitId).HasColumnName("unitId");
            });

            modelBuilder.Entity<ServicesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServicesView", "sn");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("algorithmName");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.ApartmentTypeFasetItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentTypeFasetItemName");

                entity.Property(e => e.CalcAccuracyCount).HasColumnName("calcAccuracyCount");

                entity.Property(e => e.CanHaveNegativeCharge).HasColumnName("canHaveNegativeCharge");

                entity.Property(e => e.CanRecalcInCloseAccount).HasColumnName("canRecalcInCloseAccount");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.ClUsl).HasColumnName("cl_usl");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.CurrentRateId).HasColumnName("currentRateId");

                entity.Property(e => e.CurrentTariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("currentTariffFromDate");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterCode).HasColumnName("financialCenterCode");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FinancialCenterLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterLongName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorCode).HasColumnName("generalContractorCode");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.GeneralContractorLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorLongName");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderLongName");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFinancialCenter).HasColumnName("isFinancialCenter");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod).HasColumnName("isNotRecalculationOldPeriod");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume).HasColumnName("isRecalcOldPeriodWithDifferenceVolume");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsServiceBankrupt).HasColumnName("isServiceBankrupt");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance).HasColumnName("isUseInPaymentWithClosedAvance");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.LastRateId).HasColumnName("lastRateId");

                entity.Property(e => e.LastTariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastTariffFromDate");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl).HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgDocComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("orgDocComment");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerLongName");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth).HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderCode).HasColumnName("resourceProviderCode");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderLongName");

                entity.Property(e => e.ResourceProviderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderShortName");

                entity.Property(e => e.SeasonalCount).HasColumnName("seasonalCount");

                entity.Property(e => e.ServiceNormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceNormFromDate");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceNormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceNormUnitName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCode).HasColumnName("typeCode");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.TypeParentId).HasColumnName("typeParentId");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");
            });

            modelBuilder.Entity<ServicesViewLight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ServicesViewLight", "sn");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.Adr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("algorithmName");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.ApartmentTypeFasetItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentTypeFasetItemName");

                entity.Property(e => e.CalcAccuracyCount).HasColumnName("calcAccuracyCount");

                entity.Property(e => e.CanHaveNegativeCharge).HasColumnName("canHaveNegativeCharge");

                entity.Property(e => e.CanRecalcInCloseAccount).HasColumnName("canRecalcInCloseAccount");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.CanonicalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("canonicalName");

                entity.Property(e => e.ClUsl).HasColumnName("cl_usl");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CurrentRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("currentRate");

                entity.Property(e => e.CurrentRateId).HasColumnName("currentRateId");

                entity.Property(e => e.CurrentTariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("currentTariffFromDate");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.ExecutorGisName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("executorGisName");

                entity.Property(e => e.FinancialCenterCode).HasColumnName("financialCenterCode");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FinancialCenterLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterLongName");

                entity.Property(e => e.FinancialCenterShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("financialCenterShortName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorCode).HasColumnName("generalContractorCode");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.GeneralContractorLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorLongName");

                entity.Property(e => e.GeneralContractorShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("generalContractorShortName");

                entity.Property(e => e.HouseHolderCode).HasColumnName("houseHolderCode");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.HouseHolderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderLongName");

                entity.Property(e => e.HouseHolderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseHolderShortName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFinancialCenter).HasColumnName("isFinancialCenter");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod).HasColumnName("isNotRecalculationOldPeriod");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume).HasColumnName("isRecalcOldPeriodWithDifferenceVolume");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsServiceBankrupt).HasColumnName("isServiceBankrupt");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance).HasColumnName("isUseInPaymentWithClosedAvance");

                entity.Property(e => e.LastRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastRate");

                entity.Property(e => e.LastRateId).HasColumnName("lastRateId");

                entity.Property(e => e.LastTariffFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastTariffFromDate");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl).HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgDocComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgDocComment");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.ProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("providerLongName");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth).HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderCode).HasColumnName("resourceProviderCode");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ResourceProviderLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderLongName");

                entity.Property(e => e.ResourceProviderShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceProviderShortName");

                entity.Property(e => e.SeasonalCount).HasColumnName("seasonalCount");

                entity.Property(e => e.ServiceNormFromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("serviceNormFromDate");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.Property(e => e.ServiceNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("serviceNormRate");

                entity.Property(e => e.ServiceNormUnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serviceNormUnitName");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeCode).HasColumnName("typeCode");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("typeName");

                entity.Property(e => e.TypeParentId).HasColumnName("typeParentId");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unitName");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.ToTable("Sessions", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ArmName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("armName");

                entity.Property(e => e.ConnectionId).HasColumnName("connection_id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Host)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("host");

                entity.Property(e => e.Ip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ip");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Sessions)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Sessions_Users");
            });

            modelBuilder.Entity<SessionInfo>(entity =>
            {
                entity.ToTable("SessionInfo", "db");

                entity.HasIndex(e => e.SessionId, "IX_dbSessionInfo_sessionId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionName)
                    .IsUnicode(false)
                    .HasColumnName("actionName");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.OfStep).HasColumnName("ofStep");

                entity.Property(e => e.OfSubStep).HasColumnName("ofSubStep");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ParentTypeId).HasColumnName("parentTypeId");

                entity.Property(e => e.ProcedureName)
                    .IsUnicode(false)
                    .HasColumnName("procedureName");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Step).HasColumnName("step");

                entity.Property(e => e.SubStep).HasColumnName("subStep");

                entity.Property(e => e.Updated)
                    .HasColumnType("datetime")
                    .HasColumnName("updated");
            });

            modelBuilder.Entity<SessionLockDatum>(entity =>
            {
                entity.HasKey(e => new { e.LockTableCode, e.LockId })
                    .HasName("PK_dbSessionLockData");

                entity.ToTable("SessionLockData", "db");

                entity.HasIndex(e => e.SessionId, "IX_SessionLockData_sessionId");

                entity.HasIndex(e => new { e.SessionId, e.LoginTime, e.LockTableCode }, "IX_SessionLockData_sessionId_loginTime_lockTableCode_inc_lockId")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.LockTableCode).HasColumnName("lockTableCode");

                entity.Property(e => e.LockId).HasColumnName("lockId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.LockSubId).HasColumnName("lockSubId");

                entity.Property(e => e.LoginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("loginTime");

                entity.Property(e => e.Message)
                    .IsUnicode(false)
                    .HasColumnName("message");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");
            });

            modelBuilder.Entity<SessionsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SessionsView", "sn");

                entity.Property(e => e.ArmName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("armName");

                entity.Property(e => e.ConnectionId).HasColumnName("connection_id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Host)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("host");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ip");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.ToTable("Settings", "sn");

                entity.HasIndex(e => new { e.GroupId, e.Name }, "UX_Settings_groupId_name")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UX_Settings_name");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Уникальный идентификатор записи");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("name")
                    .HasComment("Название параметра для которого устанавливается значение");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value")
                    .HasComment("Значение установленное для параметра");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Settings)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Settings_FasetItems__groupId");
            });

            modelBuilder.Entity<SettingPeriodic>(entity =>
            {
                entity.ToTable("SettingPeriodics", "sn");

                entity.HasIndex(e => new { e.SettingId, e.FromDate }, "UX_SettingPeriodics_settingId_fromDate")
                    .IsUnique();

                entity.HasIndex(e => new { e.SettingId, e.FromDate }, "UX_SettingPeriodics_settingId_fromDate_inc_value")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.SettingId).HasColumnName("settingId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.SettingPeriodics)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("FK_SettingPeriodics_Settings");
            });

            modelBuilder.Entity<SettingPeriodicsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SettingPeriodicsView", "sn");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SettingGroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("settingGroupName");

                entity.Property(e => e.SettingId).HasColumnName("settingId");

                entity.Property(e => e.SettingName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("settingName");

                entity.Property(e => e.SettingValue)
                    .IsUnicode(false)
                    .HasColumnName("settingValue");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<SettingsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SettingsView", "sn");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPeriodic).HasColumnName("isPeriodic");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Value)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<SnCounterModels19012022Arman>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("sn_CounterModels_19012022_arman", "tmp");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<StreamFile>(entity =>
            {
                entity.ToTable("StreamFiles", "sn");

                entity.HasIndex(e => e.Id, "IX_ApartmentIndicationsFiles");

                entity.HasIndex(e => e.Id, "IX_HouseIndicationsFiles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FileByte)
                    .IsRequired()
                    .HasColumnName("fileByte");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.HashSumm)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("hashSumm");

                entity.Property(e => e.ObjectData).HasColumnName("objectData");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("objectName");

                entity.Property(e => e.ObjectTitle)
                    .IsUnicode(false)
                    .HasColumnName("objectTitle");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.HasOne(d => d.OrgDoc)
                    .WithMany(p => p.StreamFiles)
                    .HasForeignKey(d => d.OrgDocId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StreamFiles_Organizations");
            });

            modelBuilder.Entity<StreamFilesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StreamFilesView", "sn");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FileByte)
                    .IsRequired()
                    .HasColumnName("fileByte");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.HashSumm)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("hashSumm");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ObjectData).HasColumnName("objectData");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("objectName");

                entity.Property(e => e.ObjectTitle)
                    .IsUnicode(false)
                    .HasColumnName("objectTitle");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");
            });

            modelBuilder.Entity<SupportToDistrict>(entity =>
            {
                entity.ToTable("SupportToDistricts", "lk");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Fio)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fio");
            });

            modelBuilder.Entity<T78900AccountService>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t78900_AccountServices", "tmp");

                entity.Property(e => e.Accid).HasColumnName("accid");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FlatId).HasColumnName("flatId");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.ItogPercentAffected).HasColumnName("itogPercentAffected");

                entity.Property(e => e.PercentAffected).HasColumnName("percentAffected");

                entity.Property(e => e.PercentAffected2).HasColumnName("percentAffected2");

                entity.Property(e => e.StreetId).HasColumnName("streetId");
            });

            modelBuilder.Entity<T78900Source>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t78900_Source", "tmp");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .HasColumnName("address");

                entity.Property(e => e.ItogPercentAffected).HasColumnName("itogPercentAffected");

                entity.Property(e => e.PercentAffected).HasColumnName("percentAffected");

                entity.Property(e => e.PercentAffected2).HasColumnName("percentAffected2");
            });

            modelBuilder.Entity<T80040>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t80040", "tmp");

                entity.Property(e => e.Ind3)
                    .HasMaxLength(255)
                    .HasColumnName("IND3");

                entity.Property(e => e.Абонент).HasMaxLength(255);

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.ДатаСнятия)
                    .HasMaxLength(255)
                    .HasColumnName("Дата снятия");

                entity.Property(e => e.День).HasMaxLength(255);

                entity.Property(e => e.Договор).HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(255);

                entity.Property(e => e.МодельПрибора)
                    .HasMaxLength(255)
                    .HasColumnName("Модель прибора");

                entity.Property(e => e.Ночь).HasMaxLength(255);

                entity.Property(e => e.Разрядность).HasMaxLength(255);

                entity.Property(e => e.СерийныйНомер)
                    .HasMaxLength(255)
                    .HasColumnName("Серийный номер");

                entity.Property(e => e.ТочкаУчета)
                    .HasMaxLength(255)
                    .HasColumnName("Точка учета");
            });

            modelBuilder.Entity<T80213Account>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t80213_Accounts", "tmp");

                entity.Property(e => e.AdministrationDistrictId).HasColumnName("administrationDistrictId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.DateComment)
                    .HasColumnType("datetime")
                    .HasColumnName("dateComment");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("docInfo");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdentityCardHolderName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("identityCardHolderName");

                entity.Property(e => e.IdentityCardNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("identityCardNumber");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsCloseInPaymentSystem).HasColumnName("isCloseInPaymentSystem");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.NeedEmailNotice).HasColumnName("needEmailNotice");

                entity.Property(e => e.NeedOnlyEmailNotice).HasColumnName("needOnlyEmailNotice");

                entity.Property(e => e.NeedOwnerPresence).HasColumnName("needOwnerPresence");

                entity.Property(e => e.NeedPrintNotice).HasColumnName("needPrintNotice");

                entity.Property(e => e.NeedSendAndPrintNotice).HasColumnName("needSendAndPrintNotice");

                entity.Property(e => e.NoticeAdrId).HasColumnName("noticeAdrId");

                entity.Property(e => e.NoticeAdrName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrName");

                entity.Property(e => e.NoticeAdrPostalIndex)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("noticeAdrPostalIndex");

                entity.Property(e => e.NoticeEmail)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("noticeEmail");

                entity.Property(e => e.Number)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ownerName");

                entity.Property(e => e.SetCounterIndicationWoauth).HasColumnName("setCounterIndicationWOAuth");

                entity.Property(e => e.TypeBudget).HasColumnName("typeBudget");

                entity.Property(e => e.UseAccountServiceGroups).HasColumnName("useAccountServiceGroups");
            });

            modelBuilder.Entity<T80213ApartmentRequestAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t80213_ApartmentRequestAccounts", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ApartmentRequestId).HasColumnName("apartmentRequestId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<T81859AreaAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t81859_AreaAddresses", "tmp");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<T81859AreaAddresses2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t81859_AreaAddresses_2", "tmp");

                entity.Property(e => e.AddressId).HasColumnName("addressId");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.P1).HasColumnName("p1");

                entity.Property(e => e.P2).HasColumnName("p2");

                entity.Property(e => e.P3).HasColumnName("p3");
            });

            modelBuilder.Entity<T82038Apartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82038_Apartments", "tmp");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.CadastralNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("cadastralNumber");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DoorWay).HasColumnName("doorWay");

                entity.Property(e => e.EnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("energoAccount");

                entity.Property(e => e.FloorHouse).HasColumnName("floorHouse");

                entity.Property(e => e.FloorsCount).HasColumnName("floorsCount");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.ObjectCategoryId).HasColumnName("objectCategoryId");

                entity.Property(e => e.OkvedTypeId).HasColumnName("okvedTypeId");

                entity.Property(e => e.Phone)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone2");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.TLoad)
                    .IsUnicode(false)
                    .HasColumnName("tLoad");

                entity.Property(e => e.ToDateDocId).HasColumnName("toDateDocId");

                entity.Property(e => e.VolumeTko)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("volumeTko");
            });

            modelBuilder.Entity<T82038ApartmentHouseHolder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82038_ApartmentHouseHolders", "tmp");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");
            });

            modelBuilder.Entity<T82038ApartmentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82038_ApartmentTypes", "tmp");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<T823231gvsApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_1gvs_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T823231hvsApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_1hvs_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T823232hvsApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_2hvs_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T82323ElApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_el_ApartmentCounters", "tmp");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");
            });

            modelBuilder.Entity<T82323GasApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_gas_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T82323Hvs3ApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82323_hvs3_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T82927Organization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82927_Organizations", "tmp");

                entity.Property(e => e.AddrInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.AddrInternetInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInternetInfo");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.BudgetType).HasColumnName("budgetType");

                entity.Property(e => e.ChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chiefAccountant");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ConsumersType).HasColumnName("consumersType");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DepartmentId).HasColumnName("departmentId");

                entity.Property(e => e.DistributionPayment).HasColumnName("distributionPayment");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FactAdrId).HasColumnName("factAdrId");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fax");

                entity.Property(e => e.FkkoType).HasColumnName("fkkoType");

                entity.Property(e => e.FromDateOfAccrualPenalties)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDateOfAccrualPenalties");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Info)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.IsBankPaymentAgent).HasColumnName("isBankPaymentAgent");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsBenefitTransferrer).HasColumnName("isBenefitTransferrer");

                entity.Property(e => e.IsCashlessTransferrer).HasColumnName("isCashlessTransferrer");

                entity.Property(e => e.IsContractEnded).HasColumnName("isContractEnded");

                entity.Property(e => e.IsFinancialCenter).HasColumnName("isFinancialCenter");

                entity.Property(e => e.IsFlatOwner).HasColumnName("isFlatOwner");

                entity.Property(e => e.IsGeneralContractor).HasColumnName("isGeneralContractor");

                entity.Property(e => e.IsHouseHolder).HasColumnName("isHouseHolder");

                entity.Property(e => e.IsPaymentAgent).HasColumnName("isPaymentAgent");

                entity.Property(e => e.IsPaymentUseNegativeSumm).HasColumnName("isPaymentUseNegativeSumm");

                entity.Property(e => e.IsPaymentUseNotice).HasColumnName("isPaymentUseNotice");

                entity.Property(e => e.IsResourceProvider).HasColumnName("isResourceProvider");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.IsTerritorialManage).HasColumnName("isTerritorialManage");

                entity.Property(e => e.IsUnitOrganization).HasColumnName("isUnitOrganization");

                entity.Property(e => e.JuridicAdrId).HasColumnName("juridicAdrId");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("KBK");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MailAdrId).HasColumnName("mailAdrId");

                entity.Property(e => e.Manager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("manager");

                entity.Property(e => e.ManagerPosition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("managerPosition");

                entity.Property(e => e.ModeWork)
                    .IsUnicode(false)
                    .HasColumnName("modeWork");

                entity.Property(e => e.NoticeInformation)
                    .IsUnicode(false)
                    .HasColumnName("noticeInformation");

                entity.Property(e => e.NoticeInformationOnlyAddressesInfo).HasColumnName("noticeInformationOnlyAddressesInfo");

                entity.Property(e => e.NoticeInformationWithAddressesInfo).HasColumnName("noticeInformationWithAddressesInfo");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.Ogrnip)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OGRNIP");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("OKTMO");

                entity.Property(e => e.OkvedType).HasColumnName("okvedType");

                entity.Property(e => e.OrgLegalForm).HasColumnName("orgLegalForm");

                entity.Property(e => e.OrgRegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("orgRegistrationDate");

                entity.Property(e => e.OrgType).HasColumnName("orgType");

                entity.Property(e => e.OrganizationType).HasColumnName("organizationType");

                entity.Property(e => e.OrpKey).HasColumnName("orp_key");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PurchaseMethod).HasColumnName("purchaseMethod");

                entity.Property(e => e.ReportsSignature)
                    .IsUnicode(false)
                    .HasColumnName("reportsSignature");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TelephoneEmergencyDispatchService)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephoneEmergencyDispatchService");

                entity.Property(e => e.TkoType).HasColumnName("tkoType");
            });

            modelBuilder.Entity<T82927Owner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t82927_Owners", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.TypeOwner).HasColumnName("typeOwner");
            });

            modelBuilder.Entity<T832291ApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t83229_1_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T832292ApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t83229_2_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T832293ApartmentCounter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t83229_3_ApartmentCounters", "tmp");

                entity.Property(e => e.Act).HasColumnName("act");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.CloseReasonId).HasColumnName("closeReasonId");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.CommunalShareTypeId).HasColumnName("communalShareTypeId");

                entity.Property(e => e.CounterCodeProvider)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("counterCodeProvider");

                entity.Property(e => e.CounterName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterName");

                entity.Property(e => e.CounterNumber)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterNumber");

                entity.Property(e => e.CounterNumberAismeter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("counterNumberAISMeter");

                entity.Property(e => e.CounterRelease)
                    .HasColumnType("datetime")
                    .HasColumnName("counterRelease");

                entity.Property(e => e.CounterServiceTypeId).HasColumnName("counterServiceTypeId");

                entity.Property(e => e.CounterSize).HasColumnName("counterSize");

                entity.Property(e => e.CounterSmallName)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("counterSmallName");

                entity.Property(e => e.CounterSmallNameId).HasColumnName("counterSmallNameId");

                entity.Property(e => e.DateSealing)
                    .HasColumnType("datetime")
                    .HasColumnName("dateSealing");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("factor");

                entity.Property(e => e.Fraction).HasColumnName("fraction");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InfoSensorPressure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorPressure");

                entity.Property(e => e.InfoSensorTemperature)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("infoSensorTemperature");

                entity.Property(e => e.IsRemotelyRemoteIndications).HasColumnName("isRemotelyRemoteIndications");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LiquidationRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("liquidationRefDate");

                entity.Property(e => e.MaddleType).HasColumnName("maddleType");

                entity.Property(e => e.MarkId).HasColumnName("markId");

                entity.Property(e => e.ModelId).HasColumnName("modelId");

                entity.Property(e => e.OldCounterId).HasColumnName("oldCounterId");

                entity.Property(e => e.PlaceId).HasColumnName("placeId");

                entity.Property(e => e.PointAccounting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pointAccounting");

                entity.Property(e => e.Power)
                    .HasColumnType("decimal(3, 1)")
                    .HasColumnName("power");

                entity.Property(e => e.ReesterOrderNumber).HasColumnName("reesterOrderNumber");

                entity.Property(e => e.SessionId).HasColumnName("sessionId");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("stamp");

                entity.Property(e => e.StampDate)
                    .HasColumnType("datetime")
                    .HasColumnName("stampDate");

                entity.Property(e => e.StatusAskupe).HasColumnName("statusASKUPE");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.TypeScaleCounterId).HasColumnName("typeScaleCounterId");

                entity.Property(e => e.UnitMeasureId).HasColumnName("unitMeasureId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<T84139BankAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84139_BankAccounts", "tmp");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountNumber");

                entity.Property(e => e.BankId).HasColumnName("bankId");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalSystemCode)
                    .IsUnicode(false)
                    .HasColumnName("externalSystemCode");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PropertyId).HasColumnName("propertyId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<T84139Organization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84139_Organizations", "tmp");

                entity.Property(e => e.AddrInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInfo");

                entity.Property(e => e.AddrInternetInfo)
                    .IsUnicode(false)
                    .HasColumnName("addrInternetInfo");

                entity.Property(e => e.AddrName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("addrName");

                entity.Property(e => e.BudgetType).HasColumnName("budgetType");

                entity.Property(e => e.ChiefAccountant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("chiefAccountant");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ConsumersType).HasColumnName("consumersType");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DepartmentId).HasColumnName("departmentId");

                entity.Property(e => e.DistributionPayment).HasColumnName("distributionPayment");

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FactAdrId).HasColumnName("factAdrId");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fax");

                entity.Property(e => e.FkkoType).HasColumnName("fkkoType");

                entity.Property(e => e.FromDateOfAccrualPenalties)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDateOfAccrualPenalties");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Info)
                    .IsUnicode(false)
                    .HasColumnName("info");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("INN");

                entity.Property(e => e.IsBankPaymentAgent).HasColumnName("isBankPaymentAgent");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsBenefitTransferrer).HasColumnName("isBenefitTransferrer");

                entity.Property(e => e.IsCashlessTransferrer).HasColumnName("isCashlessTransferrer");

                entity.Property(e => e.IsContractEnded).HasColumnName("isContractEnded");

                entity.Property(e => e.IsFinancialCenter).HasColumnName("isFinancialCenter");

                entity.Property(e => e.IsFlatOwner).HasColumnName("isFlatOwner");

                entity.Property(e => e.IsGeneralContractor).HasColumnName("isGeneralContractor");

                entity.Property(e => e.IsHouseHolder).HasColumnName("isHouseHolder");

                entity.Property(e => e.IsPaymentAgent).HasColumnName("isPaymentAgent");

                entity.Property(e => e.IsPaymentUseNegativeSumm).HasColumnName("isPaymentUseNegativeSumm");

                entity.Property(e => e.IsPaymentUseNotice).HasColumnName("isPaymentUseNotice");

                entity.Property(e => e.IsResourceProvider).HasColumnName("isResourceProvider");

                entity.Property(e => e.IsServiceProvider).HasColumnName("isServiceProvider");

                entity.Property(e => e.IsTerritorialManage).HasColumnName("isTerritorialManage");

                entity.Property(e => e.IsUnitOrganization).HasColumnName("isUnitOrganization");

                entity.Property(e => e.JuridicAdrId).HasColumnName("juridicAdrId");

                entity.Property(e => e.Kbk)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("KBK");

                entity.Property(e => e.KodObj)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("kodObj");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("KPP");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MailAdrId).HasColumnName("mailAdrId");

                entity.Property(e => e.Manager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("manager");

                entity.Property(e => e.ManagerPosition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("managerPosition");

                entity.Property(e => e.ModeWork)
                    .IsUnicode(false)
                    .HasColumnName("modeWork");

                entity.Property(e => e.NoticeInformation)
                    .IsUnicode(false)
                    .HasColumnName("noticeInformation");

                entity.Property(e => e.NoticeInformationOnlyAddressesInfo).HasColumnName("noticeInformationOnlyAddressesInfo");

                entity.Property(e => e.NoticeInformationWithAddressesInfo).HasColumnName("noticeInformationWithAddressesInfo");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("OGRN");

                entity.Property(e => e.Ogrnip)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("OGRNIP");

                entity.Property(e => e.Oktmo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("OKTMO");

                entity.Property(e => e.OkvedType).HasColumnName("okvedType");

                entity.Property(e => e.OrgLegalForm).HasColumnName("orgLegalForm");

                entity.Property(e => e.OrgRegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("orgRegistrationDate");

                entity.Property(e => e.OrgType).HasColumnName("orgType");

                entity.Property(e => e.OrganizationType).HasColumnName("organizationType");

                entity.Property(e => e.OrpKey).HasColumnName("orp_key");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.PurchaseMethod).HasColumnName("purchaseMethod");

                entity.Property(e => e.ReportsSignature)
                    .IsUnicode(false)
                    .HasColumnName("reportsSignature");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephone");

                entity.Property(e => e.TelephoneEmergencyDispatchService)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("telephoneEmergencyDispatchService");

                entity.Property(e => e.TkoType).HasColumnName("tkoType");
            });

            modelBuilder.Entity<T84139Owner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84139_Owners", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.TypeOwner).HasColumnName("typeOwner");
            });

            modelBuilder.Entity<T841941Service>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84194_1_Services", "tmp");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.CalcAccuracyCount).HasColumnName("calcAccuracyCount");

                entity.Property(e => e.CanHaveNegativeCharge).HasColumnName("canHaveNegativeCharge");

                entity.Property(e => e.CanRecalcInCloseAccount).HasColumnName("canRecalcInCloseAccount");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.ClUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_usl");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod).HasColumnName("isNotRecalculationOldPeriod");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume).HasColumnName("isRecalcOldPeriodWithDifferenceVolume");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance).HasColumnName("isUseInPaymentWithClosedAvance");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth).HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");

                entity.Property(e => e.UsePaymentPeriodForCounterPeriod).HasColumnName("usePaymentPeriodForCounterPeriod");
            });

            modelBuilder.Entity<T841942Service>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84194_2_Services", "tmp");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.CalcAccuracyCount).HasColumnName("calcAccuracyCount");

                entity.Property(e => e.CanHaveNegativeCharge).HasColumnName("canHaveNegativeCharge");

                entity.Property(e => e.CanRecalcInCloseAccount).HasColumnName("canRecalcInCloseAccount");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.ClUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_usl");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod).HasColumnName("isNotRecalculationOldPeriod");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume).HasColumnName("isRecalcOldPeriodWithDifferenceVolume");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance).HasColumnName("isUseInPaymentWithClosedAvance");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth).HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");

                entity.Property(e => e.UsePaymentPeriodForCounterPeriod).HasColumnName("usePaymentPeriodForCounterPeriod");
            });

            modelBuilder.Entity<T84310ServiceType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t84310_ServiceTypes", "tmp");

                entity.Property(e => e.ClT).HasColumnName("cl_t");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.ExternalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("externalCode");

                entity.Property(e => e.ExternalCodeId).HasColumnName("externalCodeId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsGroup).HasColumnName("isGroup");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.ObjT).HasColumnName("obj_t");

                entity.Property(e => e.ParentId).HasColumnName("parentId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UnitId).HasColumnName("unitId");

                entity.Property(e => e.UnloadDbfName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("unloadDbfName");
            });

            modelBuilder.Entity<T85131Pa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t85131_pa", "tmp");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.RequestId).HasColumnName("requestId");
            });

            modelBuilder.Entity<T85131Ra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t85131_ras", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcTotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("calcTotalPenalty");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummThreeLastMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummThreeLastMonths");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.CommissionPercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commissionPercent");

                entity.Property(e => e.CounterCount).HasColumnName("counterCount");

                entity.Property(e => e.CounterFirstIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterFirstIndication");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("counterPeriod");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.CurrentDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebtPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPenalty");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupCode).HasColumnName("groupCode");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.GroupPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaid");

                entity.Property(e => e.GroupPaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaidPenalty");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsCashless).HasColumnName("isCashless");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsFixed).HasColumnName("isFixed");

                entity.Property(e => e.IsGosposhlina).HasColumnName("isGosposhlina");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NegativeDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeDebt");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.OpenPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodChargeSumm");

                entity.Property(e => e.OpenPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebt");

                entity.Property(e => e.OpenPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebtPenalty");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PayAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payAccount");

                entity.Property(e => e.PayCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payCode");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt");

                entity.Property(e => e.PositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebtPenalty");

                entity.Property(e => e.PrevPeriodBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodBenefitSumm");

                entity.Property(e => e.PrevPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodChargeSumm");

                entity.Property(e => e.PrevPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebt");

                entity.Property(e => e.PrevPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebtPenalty");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RecalcNegativeFutureByPrefPeriods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcNegativeFutureByPrefPeriods");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcSummCurrentMonth)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummCurrentMonth");

                entity.Property(e => e.RecalcSummNoPayment)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummNoPayment");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndPenalty");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.Step)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("step");
            });

            modelBuilder.Entity<T85131Ras3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("t85131_ras_3", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("benefitSumm");

                entity.Property(e => e.CalcTotalPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("calcTotalPenalty");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummThreeLastMonths)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("chargeSummThreeLastMonths");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Commission)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("commission");

                entity.Property(e => e.CommissionPercent)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("commissionPercent");

                entity.Property(e => e.CounterCount).HasColumnName("counterCount");

                entity.Property(e => e.CounterFirstIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterFirstIndication");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("counterIndication");

                entity.Property(e => e.CounterPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("counterPeriod");

                entity.Property(e => e.CurrentDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebt");

                entity.Property(e => e.CurrentDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("currentDebtPenalty");

                entity.Property(e => e.Debt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debt");

                entity.Property(e => e.DebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("debtPenalty");

                entity.Property(e => e.DiffBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffBenefitSumm");

                entity.Property(e => e.DiffChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("diffChargeSumm");

                entity.Property(e => e.Edk)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("edk");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GroupCode).HasColumnName("groupCode");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("groupName");

                entity.Property(e => e.GroupPaid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaid");

                entity.Property(e => e.GroupPaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("groupPaidPenalty");

                entity.Property(e => e.GroupUkCode).HasColumnName("groupUkCode");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsCashless).HasColumnName("isCashless");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsCounter).HasColumnName("isCounter");

                entity.Property(e => e.IsFixed).HasColumnName("isFixed");

                entity.Property(e => e.IsGosposhlina).HasColumnName("isGosposhlina");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.NegativeDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("negativeDebt");

                entity.Property(e => e.NewCounterIndication)
                    .HasColumnType("decimal(12, 3)")
                    .HasColumnName("newCounterIndication");

                entity.Property(e => e.NoticeSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("noticeSumm");

                entity.Property(e => e.OpenPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodChargeSumm");

                entity.Property(e => e.OpenPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebt");

                entity.Property(e => e.OpenPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("openPeriodPositiveDebtPenalty");

                entity.Property(e => e.Paid)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paid");

                entity.Property(e => e.PaidPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("paidPenalty");

                entity.Property(e => e.PayAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("payAccount");

                entity.Property(e => e.PayCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("payCode");

                entity.Property(e => e.Penalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("penalty");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.PositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebt");

                entity.Property(e => e.PositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("positiveDebtPenalty");

                entity.Property(e => e.PrevPeriodBenefitSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodBenefitSumm");

                entity.Property(e => e.PrevPeriodChargeSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodChargeSumm");

                entity.Property(e => e.PrevPeriodPositiveDebt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebt");

                entity.Property(e => e.PrevPeriodPositiveDebtPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("prevPeriodPositiveDebtPenalty");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(12, 4)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RecalcNegativeFutureByPrefPeriods)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcNegativeFutureByPrefPeriods");

                entity.Property(e => e.RecalcSumm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("recalcSumm");

                entity.Property(e => e.RecalcSummCurrentMonth)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummCurrentMonth");

                entity.Property(e => e.RecalcSummNoPayment)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("recalcSummNoPayment");

                entity.Property(e => e.RequestId).HasColumnName("requestId");

                entity.Property(e => e.Saldo)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("saldo");

                entity.Property(e => e.SaldoEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEnd");

                entity.Property(e => e.SaldoEndPenalty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("saldoEndPenalty");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");
            });

            modelBuilder.Entity<Table>(entity =>
            {
                entity.ToTable("Tables", "audit");

                entity.HasIndex(e => new { e.TableName, e.SchemaName }, "IX_auditTables_schemaName_tableName")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuditEnabled).HasColumnName("auditEnabled");

                entity.Property(e => e.AuditFor)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("auditFor")
                    .HasDefaultValueSql("('insert, update, delete')");

                entity.Property(e => e.AuditMaxRowsCount).HasColumnName("auditMaxRowsCount");

                entity.Property(e => e.CountMonth).HasColumnName("countMonth");

                entity.Property(e => e.SchemaName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("schemaName");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("tableName");

                entity.Property(e => e.TablePk)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("tablePK");
            });

            modelBuilder.Entity<TableTestConstraint>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TableTestConstraints", "db");

                entity.Property(e => e.DataFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dataFieldName");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetItemFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fasetItemFieldName");

                entity.Property(e => e.FromDataFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fromDataFieldName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.KeyFieldsNameWithoutData)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("keyFieldsNameWithoutData");

                entity.Property(e => e.SchemaName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("schemaName");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tableName");

                entity.Property(e => e.ToDataFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("toDataFieldName");

                entity.HasOne(d => d.Faset)
                    .WithMany()
                    .HasForeignKey(d => d.FasetId)
                    .HasConstraintName("FK__dbTableTestConstraints_fasetId");
            });

            modelBuilder.Entity<TablesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TablesView", "audit");

                entity.Property(e => e.AuditEnabled).HasColumnName("auditEnabled");

                entity.Property(e => e.AuditFor)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("auditFor");

                entity.Property(e => e.AuditMaxRowsCount).HasColumnName("auditMaxRowsCount");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SchemaName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("schemaName");

                entity.Property(e => e.TableDescription)
                    .HasColumnType("sql_variant")
                    .HasColumnName("tableDescription");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("tableName");

                entity.Property(e => e.TablePk)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("tablePK");
            });

            modelBuilder.Entity<Tbl79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl79011", "tmp");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.Cnt).HasColumnName("cnt");

                entity.Property(e => e.FName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.PmainId).HasColumnName("pmainId");

                entity.Property(e => e.Rnk).HasColumnName("rnk");
            });

            modelBuilder.Entity<Tbl79976>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl79976", "tmp");

                entity.Property(e => e.Adr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("adr");

                entity.Property(e => e.Adrid).HasColumnName("adrid");

                entity.Property(e => e.Dts1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dts1");

                entity.Property(e => e.Dts2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dts2");

                entity.Property(e => e.Dts3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dts3");

                entity.Property(e => e.Dts4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dts4");

                entity.Property(e => e.Err)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("err");

                entity.Property(e => e.Field1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("field1");

                entity.Property(e => e.Field2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("field2");

                entity.Property(e => e.Fio1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fio1");

                entity.Property(e => e.Fio2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fio2");

                entity.Property(e => e.Id1).HasColumnName("id1");

                entity.Property(e => e.Id2).HasColumnName("id2");
            });

            modelBuilder.Entity<Tbl80916>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl80916", "tmp");

                entity.Property(e => e.Adrname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("adrname");

                entity.Property(e => e.House).HasColumnName("house");

                entity.Property(e => e.Nm).HasColumnName("nm");

                entity.Property(e => e.Prc1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("prc1");

                entity.Property(e => e.Prc2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("prc2");

                entity.Property(e => e.Street).HasColumnName("street");
            });

            modelBuilder.Entity<TblDapartmentOwners79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDApartmentOwners79011", "tmp");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.Denom).HasColumnName("denom");

                entity.Property(e => e.Doc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("doc");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");

                entity.Property(e => e.PrintName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("printName");

                entity.Property(e => e.SaleContract)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("saleContract");

                entity.Property(e => e.SaleContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("saleContractDate");

                entity.Property(e => e.TypeOwnerId).HasColumnName("typeOwnerId");
            });

            modelBuilder.Entity<TblDeathPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDeathPersons", "tmp");

                entity.Property(e => e.Adrown)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("adrown");

                entity.Property(e => e.Adrownid).HasColumnName("adrownid");

                entity.Property(e => e.Adrres)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("adrres");

                entity.Property(e => e.Apartmentid).HasColumnName("apartmentid");

                entity.Property(e => e.Birthdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("birthdate");

                entity.Property(e => e.Dateexit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dateexit");

                entity.Property(e => e.Datemorto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("datemorto");

                entity.Property(e => e.Err)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("err");

                entity.Property(e => e.Fio)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("fio");

                entity.Property(e => e.Flat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("flat");

                entity.Property(e => e.House)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("house");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Personid).HasColumnName("personid");

                entity.Property(e => e.Street)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("street");

                entity.Property(e => e.Tmpadr)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("tmpadr");
            });

            modelBuilder.Entity<TblDowners79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDowners79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PersonId).HasColumnName("personId");

                entity.Property(e => e.TypeOwner).HasColumnName("typeOwner");
            });

            modelBuilder.Entity<TblDpersonBenefits79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDPersonBenefits79011", "tmp");

                entity.Property(e => e.BenefitId).HasColumnName("benefitId");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblDpersons79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDPersons79011", "tmp");

                entity.Property(e => e.AccountBenefit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("accountBenefit");

                entity.Property(e => e.AllowPersonalDataUsage).HasColumnName("allowPersonalDataUsage");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("birthDate");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("birthPlace");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DateBenefit)
                    .HasColumnType("datetime")
                    .HasColumnName("dateBenefit");

                entity.Property(e => e.DateChange)
                    .HasColumnType("datetime")
                    .HasColumnName("dateChange");

                entity.Property(e => e.DateDoc)
                    .HasColumnType("datetime")
                    .HasColumnName("dateDoc");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("fName");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(602)
                    .IsUnicode(false)
                    .HasColumnName("fullName");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inn");

                entity.Property(e => e.InsuranceCertificate)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("insuranceCertificate");

                entity.Property(e => e.IsDelete).HasColumnName("isDelete");

                entity.Property(e => e.IsUnknown).HasColumnName("isUnknown");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.LName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lName");

                entity.Property(e => e.MName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mName");

                entity.Property(e => e.NumDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("numDoc");

                entity.Property(e => e.OrgBenefitId).HasColumnName("orgBenefitId");

                entity.Property(e => e.OrgDoc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("orgDoc");

                entity.Property(e => e.SerDoc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("serDoc");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.SubdivisionCodeDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subdivisionCodeDoc");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDoc).HasColumnName("typeDoc");
            });

            modelBuilder.Entity<TblDserviceCalcAlgs79513>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDServiceCalcAlgs79513", "tmp");

                entity.Property(e => e.CalcAlgId).HasColumnName("calcAlgId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            });

            modelBuilder.Entity<TblDservicePenalty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDServicePenalties", "tmp");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PenaltyDay).HasColumnName("penaltyDay");

                entity.Property(e => e.PenaltyPercent)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("penaltyPercent");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<TblDserviceTariffTypes79513>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDServiceTariffTypes79513", "tmp");

                entity.Property(e => e.Capacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("capacity");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.SuperRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("superRate");
            });

            modelBuilder.Entity<TblDserviceTariffs79513>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDServiceTariffs79513", "tmp");

                entity.Property(e => e.Capacity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("capacity");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.SuperRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("superRate");
            });

            modelBuilder.Entity<TblDservices79513>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDservices79513", "tmp");

                entity.Property(e => e.AddPenaltyDays).HasColumnName("addPenaltyDays");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.ApartmentTypeFasetItemId).HasColumnName("apartmentTypeFasetItemId");

                entity.Property(e => e.CalcAccuracyCount).HasColumnName("calcAccuracyCount");

                entity.Property(e => e.CanHaveNegativeCharge).HasColumnName("canHaveNegativeCharge");

                entity.Property(e => e.CanRecalcInCloseAccount).HasColumnName("canRecalcInCloseAccount");

                entity.Property(e => e.CanonicalId).HasColumnName("canonicalId");

                entity.Property(e => e.ClUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cl_usl");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.ExecutorGisId).HasColumnName("executorGisId");

                entity.Property(e => e.FinancialCenterId).HasColumnName("financialCenterId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.GeneralContractorId).HasColumnName("generalContractorId");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.IsAvailableAvancePayment).HasColumnName("isAvailableAvancePayment");

                entity.Property(e => e.IsBankrupt).HasColumnName("isBankrupt");

                entity.Property(e => e.IsFixedPayment).HasColumnName("isFixedPayment");

                entity.Property(e => e.IsNds).HasColumnName("isNDS");

                entity.Property(e => e.IsNotRecalc).HasColumnName("isNotRecalc");

                entity.Property(e => e.IsNotRecalculationOldPeriod).HasColumnName("isNotRecalculationOldPeriod");

                entity.Property(e => e.IsRecalcOldPeriodWithDifferenceVolume).HasColumnName("isRecalcOldPeriodWithDifferenceVolume");

                entity.Property(e => e.IsSeasonal).HasColumnName("isSeasonal");

                entity.Property(e => e.IsTransferPaymentRestriction).HasColumnName("isTransferPaymentRestriction");

                entity.Property(e => e.IsUseInPaymentWithClosedAvance).HasColumnName("isUseInPaymentWithClosedAvance");

                entity.Property(e => e.LongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("longName");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NotUseDeltaLastPeriod).HasColumnName("notUseDeltaLastPeriod");

                entity.Property(e => e.ObjUsl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obj_usl");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OrgDocId).HasColumnName("orgDocId");

                entity.Property(e => e.ProviderId).HasColumnName("providerId");

                entity.Property(e => e.RecalcOldPeriodWithDifferenceVolumeCountMonth).HasColumnName("recalcOldPeriodWithDifferenceVolumeCountMonth");

                entity.Property(e => e.RecalculationOldPeriodCountMonth).HasColumnName("recalculationOldPeriodCountMonth");

                entity.Property(e => e.ResourceProviderId).HasColumnName("resourceProviderId");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("shortName");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UseChargePeriodCloseService).HasColumnName("useChargePeriodCloseService");

                entity.Property(e => e.UsePaymentPeriodForCounterPeriod).HasColumnName("usePaymentPeriodForCounterPeriod");
            });

            modelBuilder.Entity<TblUaccountCashlessProperties79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUAccountCashlessProperties79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUaccounts79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUAccounts79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");
            });

            modelBuilder.Entity<TblUaccountservicecounters80016>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUaccountservicecounters80016", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Todate)
                    .HasColumnType("datetime")
                    .HasColumnName("todate");
            });

            modelBuilder.Entity<TblUapartmentCounterIndications79756>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentCounterIndications79756", "tmp");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");
            });

            modelBuilder.Entity<TblUapartmentOwners79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentOwners79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");
            });

            modelBuilder.Entity<TblUapartmentRequests79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentRequests79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUapartmentResidentBenefits79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentResidentBenefits79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");
            });

            modelBuilder.Entity<TblUapartmentResidentBenefits790112>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentResidentBenefits79011_2", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUapartmentResidents79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUApartmentResidents79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUapartmentresidents79976>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUapartmentresidents79976", "tmp");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TblUbcBenefitApartments79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUbcBenefitApartments79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUdebtAffairOwners79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUDebtAffairOwners79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OwnerId).HasColumnName("ownerId");
            });

            modelBuilder.Entity<TblUdebtAffairOwners790112>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUDebtAffairOwners79011_2", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonResidentId).HasColumnName("personResidentId");
            });

            modelBuilder.Entity<TblUjnBenefits79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUJnBenefits79011", "tmp");

                entity.Property(e => e.BenefitOwnerId).HasColumnName("benefitOwnerId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TblUjnBenefits790112>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUJnBenefits79011_2", "tmp");

                entity.Property(e => e.ExploitingPersonId).HasColumnName("exploitingPersonId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TblUpayPaymentMoreFixedSums79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUpayPaymentMoreFixedSums79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TblUpersonBenefitDocuments79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUPersonBenefitDocuments79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonBenefitId).HasColumnName("personBenefitId");
            });

            modelBuilder.Entity<TblUpersonFamily79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUPersonFamily79011", "tmp");

                entity.Property(e => e.FromPersonId).HasColumnName("fromPersonId");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TblUpersonProperties79011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUPersonProperties79011", "tmp");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<TempCopyTerehinApartmentDelete>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempCopyTerehinApartmentDelete", "db");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.Datec)
                    .HasColumnType("datetime")
                    .HasColumnName("datec");

                entity.Property(e => e.Datee)
                    .HasColumnType("datetime")
                    .HasColumnName("datee");

                entity.Property(e => e.DoorWay).HasColumnName("doorWay");

                entity.Property(e => e.EnergoAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("energoAccount");

                entity.Property(e => e.FloorHouse).HasColumnName("floorHouse");

                entity.Property(e => e.FloorsCount).HasColumnName("floorsCount");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.NumberEx)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("numberEx");

                entity.Property(e => e.Phone)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.TLoad)
                    .IsUnicode(false)
                    .HasColumnName("tLoad");

                entity.Property(e => e.ToDateDocId).HasColumnName("toDateDocId");
            });

            modelBuilder.Entity<TempDebtAccountsForException>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempDebtAccountsForException", "db");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");
            });

            modelBuilder.Entity<TempRecalc>(entity =>
            {
                entity.HasKey(e => new { e.GroupOperId, e.AccountServiceId, e.Period })
                    .HasName("PK__cpTemp_Recalcs");

                entity.ToTable("Temp_Recalcs", "cp");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.AvgConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumptionDelta");

                entity.Property(e => e.CounterConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterConsumptionDelta");

                entity.Property(e => e.NormConsumptionDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normConsumptionDelta");

                entity.Property(e => e.ResourceDelta)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("resourceDelta");
            });

            modelBuilder.Entity<TemperatureAverage>(entity =>
            {
                entity.ToTable("TemperatureAverages", "sn");

                entity.HasIndex(e => new { e.AreaId, e.FromDate }, "IX_TemperatureAverages_areaId_fromDate")
                    .IsUnique();

                entity.HasIndex(e => e.FromDate, "IX_TemperatureAverages_fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("temperature");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.TemperatureAverages)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_TemperatureAverages_Areas");
            });

            modelBuilder.Entity<TemperatureAveragesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TemperatureAveragesView", "sn");

                entity.Property(e => e.Adrname)
                    .IsUnicode(false)
                    .HasColumnName("adrname");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("temperature");
            });

            modelBuilder.Entity<TemperatureDesignLoad>(entity =>
            {
                entity.ToTable("TemperatureDesignLoads", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alpha)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("alpha");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("temperature");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.TemperatureDesignLoads)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_TemperatureDesignLoads_Areas");
            });

            modelBuilder.Entity<TemperatureDesignLoadsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TemperatureDesignLoadsView", "sn");

                entity.Property(e => e.Adrname)
                    .IsUnicode(false)
                    .HasColumnName("adrname");

                entity.Property(e => e.Alpha)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("alpha");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("temperature");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<TemperatureInternal>(entity =>
            {
                entity.ToTable("TemperatureInternals", "sn");

                entity.HasIndex(e => e.FromDate, "IX_TemperatureInternals_fromDate");

                entity.HasIndex(e => new { e.HouseTypeId, e.FromDate }, "IX_TemperatureInternals_houseTypeId_fromDate")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseTypeId).HasColumnName("houseTypeId");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("temperature");

                entity.HasOne(d => d.HouseType)
                    .WithMany(p => p.TemperatureInternals)
                    .HasForeignKey(d => d.HouseTypeId)
                    .HasConstraintName("FK_TemperatureInternals_Fasets");
            });

            modelBuilder.Entity<TemperatureInternalsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TemperatureInternalsView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HouseType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("houseType");

                entity.Property(e => e.HouseTypeId).HasColumnName("houseTypeId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Temperature)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("temperature");
            });

            modelBuilder.Entity<TemporaryTablesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TemporaryTablesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RowCounts).HasColumnName("rowCounts");

                entity.Property(e => e.SchemaName)
                    .HasMaxLength(128)
                    .HasColumnName("schemaName");

                entity.Property(e => e.TableName)
                    .HasMaxLength(128)
                    .HasColumnName("tableName");

                entity.Property(e => e.TotalSpaceKb).HasColumnName("totalSpaceKB");

                entity.Property(e => e.TotalSpaceMb)
                    .HasColumnType("numeric(36, 2)")
                    .HasColumnName("totalSpaceMB");

                entity.Property(e => e.UsedSpaceKb).HasColumnName("usedSpaceKB");

                entity.Property(e => e.UsedSpaceMb)
                    .HasColumnType("numeric(36, 2)")
                    .HasColumnName("usedSpaceMB");
            });

            modelBuilder.Entity<Terminal>(entity =>
            {
                entity.ToTable("Terminals", "pay");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<TmpCalcOperationGroupContents7506509112021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpCalcOperationGroupContents75065_09112021", "tmp");

                entity.Property(e => e.GroupId).HasColumnName("groupId");

                entity.Property(e => e.OperId).HasColumnName("operId");
            });

            modelBuilder.Entity<TmpCalcOperations1C7506509112021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpCalcOperations1C75065_09112021", "tmp");

                entity.Property(e => e.AllowEditingInAnyPeriod).HasColumnName("allowEditingInAnyPeriod");

                entity.Property(e => e.AllowEditingInCurrentPeriod).HasColumnName("allowEditingInCurrentPeriod");

                entity.Property(e => e.AllowManuallyAdding).HasColumnName("allowManuallyAdding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ko)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ko");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OffBalance).HasColumnName("offBalance");

                entity.Property(e => e.OffBalanceBenefit).HasColumnName("offBalanceBenefit");

                entity.Property(e => e.Opsign).HasColumnName("opsign");

                entity.Property(e => e.Split)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("split");
            });

            modelBuilder.Entity<TmpCounterJune>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#counterJune", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentHeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("apartmentHeatingSquare");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentIsNonResidential).HasColumnName("apartmentIsNonResidential");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("avgConsumptionRevert");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.EndPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("endPeriod");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsByCounter).HasColumnName("isByCounter");

                entity.Property(e => e.LastDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastDate");

                entity.Property(e => e.LastInd)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("lastInd");

                entity.Property(e => e.LastIndRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("lastIndRevert");

                entity.Property(e => e.NewInd)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("newInd");

                entity.Property(e => e.NewIndRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("newIndRevert");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NotUseMonthCloseCounter).HasColumnName("notUseMonthCloseCounter");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.UseOwners).HasColumnName("useOwners");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");
            });

            modelBuilder.Entity<TmpCounterJune3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#counterJune3", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.ApartmentHeatingSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("apartmentHeatingSquare");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentIsNonResidential).HasColumnName("apartmentIsNonResidential");

                entity.Property(e => e.ApartmentNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("apartmentNumber");

                entity.Property(e => e.ApartmentTotalSquare)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("apartmentTotalSquare");

                entity.Property(e => e.AvgConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("avgConsumption");

                entity.Property(e => e.AvgConsumptionRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("avgConsumptionRevert");

                entity.Property(e => e.CounterFactor)
                    .HasColumnType("decimal(10, 6)")
                    .HasColumnName("counterFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.EndPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("endPeriod");

                entity.Property(e => e.HasInfoIndications).HasColumnName("hasInfoIndications");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.IsByCounter).HasColumnName("isByCounter");

                entity.Property(e => e.LastDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastDate");

                entity.Property(e => e.LastInd)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("lastInd");

                entity.Property(e => e.LastIndRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("lastIndRevert");

                entity.Property(e => e.MonthShift).HasColumnName("monthShift");

                entity.Property(e => e.NewInd)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("newInd");

                entity.Property(e => e.NewIndRevert)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("newIndRevert");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NotUseMonthCloseCounter).HasColumnName("notUseMonthCloseCounter");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ResidentsCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCount");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceNormId).HasColumnName("serviceNormId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.UseOwners).HasColumnName("useOwners");

                entity.Property(e => e.ValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("valDate");
            });

            modelBuilder.Entity<TmpCsbdCounters3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#csbdCounters3", "tmp");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.Dateb)
                    .HasColumnType("datetime")
                    .HasColumnName("dateb");

                entity.Property(e => e.LastIndicationValDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationValDate");

                entity.Property(e => e.PaymentInd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("paymentInd");
            });

            modelBuilder.Entity<TmpCsbdNorm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#csbdNorms", "tmp");

                entity.Property(e => e.ByNorm).HasColumnName("byNorm");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TmpCsbdNorms3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#csbdNorms3", "tmp");

                entity.Property(e => e.ByNorm).HasColumnName("byNorm");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<TmpGroupOperations0301022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpGroupOperations0301022", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreditOrgId).HasColumnName("creditOrgId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.NoticeRecalcUseByPeriod).HasColumnName("noticeRecalcUseByPeriod");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordPaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordPaymentDate");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<TmpGroupOperations16092021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpGroupOperations16092021", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.ArrivalBankAccountId).HasColumnName("arrivalBankAccountId");

                entity.Property(e => e.BankPaymentOrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bankPaymentOrderDate");

                entity.Property(e => e.BankPaymentOrderId).HasColumnName("bankPaymentOrderId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.Comment)
                    .IsUnicode(false)
                    .HasColumnName("comment");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.CreditOrgId).HasColumnName("creditOrgId");

                entity.Property(e => e.DebtActionId).HasColumnName("debtActionId");

                entity.Property(e => e.DocId).HasColumnName("docId");

                entity.Property(e => e.FiscalDoc).HasColumnName("fiscalDoc");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IncomingTransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("incomingTransferDate");

                entity.Property(e => e.IncomingTransferNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferNumber");

                entity.Property(e => e.IncomingTransferPack)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("incomingTransferPack");

                entity.Property(e => e.IsUseRecalc).HasColumnName("isUseRecalc");

                entity.Property(e => e.NoticeRecalcUseByPeriod).HasColumnName("noticeRecalcUseByPeriod");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.OperatorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("operatorName");

                entity.Property(e => e.PayCurrentReceipt).HasColumnName("payCurrentReceipt");

                entity.Property(e => e.PayFiscalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payFiscalDate");

                entity.Property(e => e.PayFiscalId).HasColumnName("payFiscalId");

                entity.Property(e => e.PaymentAgentId).HasColumnName("paymentAgentId");

                entity.Property(e => e.PaymentOrderId).HasColumnName("paymentOrderId");

                entity.Property(e => e.PaymentOrderPackId).HasColumnName("paymentOrderPackId");

                entity.Property(e => e.PaymentSystemId).HasColumnName("paymentSystemId");

                entity.Property(e => e.PenaltyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("penaltyDate");

                entity.Property(e => e.ReesterDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterDate");

                entity.Property(e => e.ReesterNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reesterNumber");

                entity.Property(e => e.ReesterRecordPaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reesterRecordPaymentDate");

                entity.Property(e => e.SubService).HasColumnName("subService");

                entity.Property(e => e.SubTypeId).HasColumnName("subTypeId");

                entity.Property(e => e.Terminal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("terminal");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transactionDate");

                entity.Property(e => e.TransactionNumber).HasColumnName("transactionNumber");

                entity.Property(e => e.TypeId).HasColumnName("typeId");

                entity.Property(e => e.UsePaymentDate).HasColumnName("usePaymentDate");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<TmpJn03012022>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpJn03012022", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.CloseDocId).HasColumnName("closeDocId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Guid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.HouseHolderId).HasColumnName("houseHolderId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KodCl).HasColumnName("kod_cl");

                entity.Property(e => e.KodObj).HasColumnName("kod_obj");

                entity.Property(e => e.OpenDocId).HasColumnName("openDocId");

                entity.Property(e => e.OpenedByError).HasColumnName("openedByError");

                entity.Property(e => e.RecalcStartPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("recalcStartPeriod");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<TmpJn03012022J>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpJn03012022_j", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<TmpJn03012022J2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpJn03012022_j2", "tmp");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.BankPaymentOrderRecordInputId).HasColumnName("bankPaymentOrderRecordInputId");

                entity.Property(e => e.BankPaymentOrderRecordOutputId).HasColumnName("bankPaymentOrderRecordOutputId");

                entity.Property(e => e.CalcOperId).HasColumnName("calcOperId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.GroupOperId).HasColumnName("groupOperId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OldId).HasColumnName("old_id");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.RemitteePaymentOrderId).HasColumnName("remitteePaymentOrderId");

                entity.Property(e => e.Summ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("summ");
            });

            modelBuilder.Entity<TmpSnCalcServiceCountersByDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServiceCountersByDays", "tmp");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsFictiveCheckInterval).HasColumnName("isFictiveCheckInterval");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.PaymentInd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("paymentInd");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<TmpSnCalcServiceCountersByDays2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServiceCountersByDays2", "tmp");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsFictiveCheckInterval).HasColumnName("isFictiveCheckInterval");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.PaymentInd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("paymentInd");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<TmpSnCalcServiceCountersByDays3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServiceCountersByDays3", "tmp");

                entity.Property(e => e.AccountServiceRelationsId).HasColumnName("accountServiceRelationsId");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.CsbdId).HasColumnName("csbdId");

                entity.Property(e => e.FactorConsumption)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("factorConsumption");

                entity.Property(e => e.FirstIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("firstIndication");

                entity.Property(e => e.FirstIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("firstIndicationDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsClosed).HasColumnName("isClosed");

                entity.Property(e => e.IsFictiveCheckInterval).HasColumnName("isFictiveCheckInterval");

                entity.Property(e => e.IsSuspensionChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isSuspensionChargeSumm");

                entity.Property(e => e.LastIndication)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lastIndication");

                entity.Property(e => e.LastIndicationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastIndicationDate");

                entity.Property(e => e.LastIndicationType).HasColumnName("lastIndicationType");

                entity.Property(e => e.NormCounterConsumption)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normCounterConsumption");

                entity.Property(e => e.PaymentInd)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("paymentInd");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<TmpSnCalcServicesByDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServicesByDays", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CoefficientByDays).HasColumnName("coefficientByDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");

                entity.Property(e => e.UseSeasonalFactor).HasColumnName("useSeasonalFactor");
            });

            modelBuilder.Entity<TmpSnCalcServicesByDays2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServicesByDays2", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CoefficientByDays).HasColumnName("coefficientByDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");

                entity.Property(e => e.UseSeasonalFactor).HasColumnName("useSeasonalFactor");
            });

            modelBuilder.Entity<TmpSnCalcServicesByDays3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmp#snCalcServicesByDays3", "tmp");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.AccountServiceNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceNormRate");

                entity.Property(e => e.AccountServiceRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRate");

                entity.Property(e => e.AccountServiceRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("accountServiceRateForDay");

                entity.Property(e => e.AlgorithmId).HasColumnName("algorithmId");

                entity.Property(e => e.AlgorithmParamId).HasColumnName("algorithmParamId");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.ApartmentProperty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("apartmentProperty");

                entity.Property(e => e.ApartmentTypeId).HasColumnName("apartmentTypeId");

                entity.Property(e => e.AvgConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("avgConsumptionSaveParam");

                entity.Property(e => e.BalconySquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("balconySquare");

                entity.Property(e => e.BigRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRate");

                entity.Property(e => e.BigRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("bigRateForDay");

                entity.Property(e => e.CalcFactor)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("calcFactor");

                entity.Property(e => e.CalcId).HasColumnName("calcId");

                entity.Property(e => e.ChargeFormulaId).HasColumnName("chargeFormulaId");

                entity.Property(e => e.ChargeSumm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSumm");

                entity.Property(e => e.ChargeSummForBenefit)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("chargeSummForBenefit");

                entity.Property(e => e.CoefficientByDays).HasColumnName("coefficientByDays");

                entity.Property(e => e.CounterConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumption");

                entity.Property(e => e.CounterConsumptionHighQuality)
                    .HasColumnType("decimal(22, 10)")
                    .HasColumnName("counterConsumptionHighQuality");

                entity.Property(e => e.CounterConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterConsumptionSaveParam");

                entity.Property(e => e.CounterConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("counterConsumptionSumm");

                entity.Property(e => e.CounterExternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterExternalFactor");

                entity.Property(e => e.CounterId).HasColumnName("counterId");

                entity.Property(e => e.CounterInternalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterInternalFactor");

                entity.Property(e => e.CounterMaddleType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("counterMaddleType");

                entity.Property(e => e.CounterPaymentShare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("counterPaymentShare");

                entity.Property(e => e.CounterTurnoverSize).HasColumnName("counterTurnoverSize");

                entity.Property(e => e.DaysInPeriod).HasColumnName("daysInPeriod");

                entity.Property(e => e.DaysInRange).HasColumnName("daysInRange");

                entity.Property(e => e.DeductionRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("deductionRate");

                entity.Property(e => e.Floor).HasColumnName("floor");

                entity.Property(e => e.Formula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.HeatingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("heatingSquare");

                entity.Property(e => e.HouseFloor).HasColumnName("houseFloor");

                entity.Property(e => e.HouseId).HasColumnName("houseId");

                entity.Property(e => e.HouseNormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseNormRate");

                entity.Property(e => e.HouseRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("houseRate");

                entity.Property(e => e.HousekeepingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("housekeepingSquare");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IsCalc).HasColumnName("isCalc");

                entity.Property(e => e.IsCalcByOwners).HasColumnName("isCalcByOwners");

                entity.Property(e => e.IsSixthFormula).HasColumnName("isSixthFormula");

                entity.Property(e => e.LivingSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("livingSquare");

                entity.Property(e => e.NeedApartmentProperties).HasColumnName("needApartmentProperties");

                entity.Property(e => e.NeedApartmentSquares).HasColumnName("needApartmentSquares");

                entity.Property(e => e.NeedCounters).HasColumnName("needCounters");

                entity.Property(e => e.NeedHousekeepingSquares).HasColumnName("needHousekeepingSquares");

                entity.Property(e => e.NormConsumption)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumption");

                entity.Property(e => e.NormConsumptionSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normConsumptionSaveParam");

                entity.Property(e => e.NormConsumptionSumm)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("normConsumptionSumm");

                entity.Property(e => e.NormRate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRate");

                entity.Property(e => e.NormRateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("normRateForDay");

                entity.Property(e => e.NormRateGiga)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGiga");

                entity.Property(e => e.NormRateGigaForDay)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("normRateGigaForDay");

                entity.Property(e => e.NoticeCoefficientCalc)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeCoefficientCalc");

                entity.Property(e => e.NoticeInfoCalcFasetId).HasColumnName("noticeInfoCalcFasetId");

                entity.Property(e => e.NoticeInfoCalcValue)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue");

                entity.Property(e => e.NoticeInfoCalcValue2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue2");

                entity.Property(e => e.NoticeInfoCalcValue3)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("noticeInfoCalcValue3");

                entity.Property(e => e.NoticeSaveFromCounters).HasColumnName("noticeSaveFromCounters");

                entity.Property(e => e.OwnersCount).HasColumnName("ownersCount");

                entity.Property(e => e.ParamsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("paramsPeriod");

                entity.Property(e => e.Period)
                    .HasColumnType("datetime")
                    .HasColumnName("period");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("procName");

                entity.Property(e => e.RangeEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeEnd");

                entity.Property(e => e.RangeStart)
                    .HasColumnType("datetime")
                    .HasColumnName("rangeStart");

                entity.Property(e => e.RangeStartReason)
                    .IsUnicode(false)
                    .HasColumnName("rangeStartReason");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rate");

                entity.Property(e => e.RateCapacity)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateCapacity");

                entity.Property(e => e.RateCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateCounter");

                entity.Property(e => e.RateForDay)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateForDay");

                entity.Property(e => e.RateGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral");

                entity.Property(e => e.RateGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateGeneral2");

                entity.Property(e => e.RateNormVolume)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rateNormVolume");

                entity.Property(e => e.RateSaveParam)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateSaveParam");

                entity.Property(e => e.RateWithoutNds)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("rateWithoutNDS");

                entity.Property(e => e.ResidentVacationsCount).HasColumnName("residentVacationsCount");

                entity.Property(e => e.ResidentsCount).HasColumnName("residentsCount");

                entity.Property(e => e.ResidentsCountActual).HasColumnName("residentsCountActual");

                entity.Property(e => e.ResidentsCountAvg)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountAvg");

                entity.Property(e => e.ResidentsCountCounter)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountCounter");

                entity.Property(e => e.ResidentsCountNorm)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("residentsCountNorm");

                entity.Property(e => e.Resource)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resource");

                entity.Property(e => e.ResourceAltGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceAltGeneral");

                entity.Property(e => e.ResourceGeneral)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral");

                entity.Property(e => e.ResourceGeneral2)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("resourceGeneral2");

                entity.Property(e => e.ResourceGeneral2UnitId).HasColumnName("resourceGeneral2UnitId");

                entity.Property(e => e.ResourceGeneralUnitId).HasColumnName("resourceGeneralUnitId");

                entity.Property(e => e.ResourceUnitId).HasColumnName("resourceUnitId");

                entity.Property(e => e.RoomsCount).HasColumnName("roomsCount");

                entity.Property(e => e.SeasonalFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("seasonalFactor");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");

                entity.Property(e => e.ServiceTypeId).HasColumnName("serviceTypeId");

                entity.Property(e => e.SocialNormRate)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("socialNormRate");

                entity.Property(e => e.SubQualityChargeSumm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityChargeSumm");

                entity.Property(e => e.SubQualityFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactor");

                entity.Property(e => e.SubQualityFactorNorm)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("subQualityFactorNorm");

                entity.Property(e => e.SubQualityHoursCount)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCount");

                entity.Property(e => e.SubQualityHoursCountCalcedByColdWaterTarif)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("subQualityHoursCountCalcedByColdWaterTarif");

                entity.Property(e => e.SubstitutionTarif)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("substitutionTarif");

                entity.Property(e => e.SuspensionFactor)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactor");

                entity.Property(e => e.SuspensionFactorCounter)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("suspensionFactorCounter");

                entity.Property(e => e.SuspensionFactorNorm)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("suspensionFactorNorm");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.TotalResidentsCount).HasColumnName("totalResidentsCount");

                entity.Property(e => e.TotalResidentsCountActual).HasColumnName("totalResidentsCountActual");

                entity.Property(e => e.TotalSquare)
                    .HasColumnType("decimal(18, 10)")
                    .HasColumnName("totalSquare");

                entity.Property(e => e.UiFormula)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("uiFormula");

                entity.Property(e => e.UseNormRate).HasColumnName("useNormRate");

                entity.Property(e => e.UseSeasonalFactor).HasColumnName("useSeasonalFactor");
            });

            modelBuilder.Entity<Treaty>(entity =>
            {
                entity.ToTable("Treaties", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.ServiceTypeGroupCode).HasColumnName("serviceTypeGroupCode");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.Treaties)
                    .HasForeignKey(d => d.OrgId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Treaties__orgId");
            });

            modelBuilder.Entity<TypeChange>(entity =>
            {
                entity.HasKey(e => new { e.OldTypeId, e.NewTypeId, e.ServiceId })
                    .HasName("PK__auditTypeChange");

                entity.ToTable("TypeChange", "audit");

                entity.Property(e => e.OldTypeId).HasColumnName("oldTypeId");

                entity.Property(e => e.NewTypeId).HasColumnName("newTypeId");

                entity.Property(e => e.ServiceId).HasColumnName("serviceId");
            });

            modelBuilder.Entity<SNModels.TypeCode>(entity =>
            {
                entity.HasKey(e => new { e.OldTypeId, e.NewTypeId, e.OldCode, e.NewCode })
                    .HasName("PK__TypeCode");

                entity.ToTable("TypeCode", "audit");

                entity.Property(e => e.OldTypeId).HasColumnName("oldTypeId");

                entity.Property(e => e.NewTypeId).HasColumnName("newTypeId");

                entity.Property(e => e.OldCode).HasColumnName("oldCode");

                entity.Property(e => e.NewCode).HasColumnName("newCode");
            });

            modelBuilder.Entity<Unload>(entity =>
            {
                entity.HasKey(e => new { e.ActionId, e.NumberRow })
                    .HasName("PK_noticeUnloads");

                entity.ToTable("Unloads", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeUnloads_ID")
                    .IsUnique();

                entity.Property(e => e.ActionId).HasColumnName("actionId");

                entity.Property(e => e.NumberRow)
                    .HasColumnName("numberRow")
                    .HasComment("Номер строки этой таблицы по actionId по порядку");

                entity.Property(e => e.AccountId)
                    .HasColumnName("accountId")
                    .HasComment("К какому accountId относиться эта запись");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataPost)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("dataPost")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataPref)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("dataPref")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DataUnion)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("dataUnion")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FileName)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("fileName")
                    .HasComment("Имя файла в конец которого добавляется информация, если пусто берется имя PDF-файла с расширением csv");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndexPart)
                    .HasColumnName("indexPart")
                    .HasComment("К какому sn.AreaAccounts.indexPart относиться эта запись");

                entity.Property(e => e.NumberInAction)
                    .HasColumnName("numberInAction")
                    .HasComment("К какому sn.AreaAccounts.number относиться эта запись");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasComment("Информация для конкретной процедуры выгрузки, если нужна");
            });

            modelBuilder.Entity<UnloadData>(entity =>
            {
                entity.HasKey(e => new { e.UnloadId, e.Number })
                    .HasName("PK_noticeUnloadDatas");

                entity.ToTable("UnloadDatas", "notice");

                entity.HasIndex(e => e.Id, "IX_noticeUnloadDatas_ID")
                    .IsUnique();

                entity.Property(e => e.UnloadId).HasColumnName("unloadId");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("data");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("Users", "sn");

                entity.HasIndex(e => e.Login, "IXU_Users_login")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.IsLocked).HasColumnName("isLocked");

                entity.Property(e => e.IsWindowsLogin).HasColumnName("isWindowsLogin");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("login");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.PaymentAgentTypeId).HasColumnName("paymentAgentTypeId");

                entity.Property(e => e.PositionId).HasColumnName("positionId");

                entity.Property(e => e.SsoSubjectId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ssoSubjectId");

                entity.Property(e => e.UserJobId).HasColumnName("userJobId");

                entity.HasOne(d => d.Org)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.OrgId)
                    .HasConstraintName("FK_Users_Organizations");

                entity.HasOne(d => d.PaymentAgentType)
                    .WithMany(p => p.UserPaymentAgentTypes)
                    .HasForeignKey(d => d.PaymentAgentTypeId)
                    .HasConstraintName("FK_Users_FasetItems__paymentAgentTypeId");

                entity.HasOne(d => d.Position)
                    .WithMany(p => p.UserPositions)
                    .HasForeignKey(d => d.PositionId)
                    .HasConstraintName("FK_Users_FasetItems__positionId");

                entity.HasOne(d => d.UserJob)
                    .WithMany(p => p.UserUserJobs)
                    .HasForeignKey(d => d.UserJobId)
                    .HasConstraintName("FK_Users_FasetItems__userJobId");
            });

            modelBuilder.Entity<UserAccountService>(entity =>
            {
                entity.ToTable("UserAccountServices", "CRM");

                entity.HasIndex(e => e.UserId, "IX_UserAccountServices__userId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("accountId");

                entity.Property(e => e.AccountServiceId).HasColumnName("accountServiceId");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.UserAccountServices)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccountServices_accountId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserAccountServices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccountServices_userId");
            });

            modelBuilder.Entity<UserAddrAccess>(entity =>
            {
                entity.ToTable("UserAddrAccess", "sn");

                entity.HasIndex(e => e.UserId, "IX_UserAddrAccess__userId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<UserAddress>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.UserId, e.AdrId });

                entity.ToTable("UserAddresses", "sn");

                entity.HasIndex(e => new { e.UserId, e.AdrId }, "UIX_UserAddresses__userId_adrId")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.AdrId).HasColumnName("adrId");

                entity.HasOne(d => d.Adr)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.AdrId)
                    .HasConstraintName("FK_UserAddresses_LocalAddresses");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAddresses_Users");
            });

            modelBuilder.Entity<UserLocalAddressesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserLocalAddressesView", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<UserMenuItemGroup>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.MenuItemGroupId });

                entity.ToTable("UserMenuItemGroups", "sn");

                entity.HasIndex(e => e.Id, "IX_UserMenuItemGroups_id")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.MenuItemGroupId).HasColumnName("menuItemGroupId");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.HasOne(d => d.MenuItemGroup)
                    .WithMany(p => p.UserMenuItemGroups)
                    .HasForeignKey(d => d.MenuItemGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserMenuItemGroups_MenuItemGroups");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserMenuItemGroups)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserMenuItemGroups_Users");
            });

            modelBuilder.Entity<UserOrganization>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.OrganizationId });

                entity.ToTable("UserOrganizations", "sn");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.UserOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserOrganizations_Organizations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserOrganizations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserOrganizations_Users");
            });

            modelBuilder.Entity<UserOrganizationCommissionIgnore>(entity =>
            {
                entity.ToTable("UserOrganizationCommissionIgnore", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<UserPropertiesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserPropertiesView", "sn");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PropertiesId).HasColumnName("propertiesId");

                entity.Property(e => e.PropertiesName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("propertiesName");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.UserLogin)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<UserProperty>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PropertiesId });

                entity.ToTable("UserProperties", "sn");

                entity.HasIndex(e => new { e.UserId, e.PropertiesId }, "UIX_UserProperties__userId_propertiesId")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.PropertiesId).HasColumnName("propertiesId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<UserReportTemplate>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ReportTemplateId });

                entity.ToTable("UserReportTemplates", "sn");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.ReportTemplateId).HasColumnName("reportTemplateId");

                entity.HasOne(d => d.ReportTemplate)
                    .WithMany(p => p.UserReportTemplates)
                    .HasForeignKey(d => d.ReportTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserReportTemplates_ReportTemplates");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserReportTemplates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserReportTemplates_Users");
            });

            modelBuilder.Entity<UserRight>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("UserRights", "sn");

                entity.HasIndex(e => new { e.RightId, e.UserId }, "IX_UserRights_RightId_UserId");

                entity.HasIndex(e => new { e.UserId, e.RightId }, "UIX_UserRights_UserId_RightsId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.HasOne(d => d.Right)
                    .WithMany(p => p.UserRights)
                    .HasForeignKey(d => d.RightId)
                    .HasConstraintName("FK_UserRights_Rights");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRights)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_UserRights_Users");
            });

            modelBuilder.Entity<UserServiceType>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ServiceTypeId });

                entity.ToTable("UserServiceTypes", "sn");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.UserServiceTypes)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserServiceTypes_ServiceTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserServiceTypes)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserServiceTypes_Users");
            });

            modelBuilder.Entity<UserTemplateSetting>(entity =>
            {
                entity.ToTable("UserTemplateSettings", "CRM");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.UserId).HasColumnName("userId");
            });

            modelBuilder.Entity<UserUnitOrganization>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.OrganizationId });

                entity.ToTable("UserUnitOrganizations", "sn");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.Property(e => e.OrganizationId).HasColumnName("organizationId");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.UserUnitOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUnitOrganizations_Organizations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserUnitOrganizations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUnitOrganizations_Users");
            });

            modelBuilder.Entity<UserUpdate>(entity =>
            {
                entity.ToTable("UserUpdate", "CRM");

                entity.HasIndex(e => e.UserId, "IX_UserUpdate__userId");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dateUpdate");

                entity.Property(e => e.FullPermisson)
                    .HasColumnName("fullPermisson")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("userId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserUpdates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUpdate_userId");
            });

            modelBuilder.Entity<UsersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UsersView", "sn");

                entity.Property(e => e.AreaId).HasColumnName("areaId");

                entity.Property(e => e.DatabasePrincipalId).HasColumnName("databasePrincipalId");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsLocked).HasColumnName("isLocked");

                entity.Property(e => e.IsWindowsLogin).HasColumnName("isWindowsLogin");

                entity.Property(e => e.JobName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("jobName");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("login");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.OrgCode).HasColumnName("orgCode");

                entity.Property(e => e.OrgId).HasColumnName("orgId");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("orgName");

                entity.Property(e => e.PaymentAgentTypeId).HasColumnName("paymentAgentTypeId");

                entity.Property(e => e.PaymentAgentTypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("paymentAgentTypeName");

                entity.Property(e => e.PositionId).HasColumnName("positionId");

                entity.Property(e => e.ServerPrincipalByNameId).HasColumnName("serverPrincipalByNameId");

                entity.Property(e => e.ServerPrincipalId).HasColumnName("serverPrincipalId");

                entity.Property(e => e.ServerPrincipalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("serverPrincipalName");

                entity.Property(e => e.SsoSubjectId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ssoSubjectId");

                entity.Property(e => e.UserJobId).HasColumnName("userJobId");
            });

            modelBuilder.Entity<WorkTimeTableTemplate>(entity =>
            {
                entity.ToTable("WorkTimeTableTemplate", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Friday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Saturday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Sunday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Thursday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tuesday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Wednesday).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<WorkTimeTemplate>(entity =>
            {
                entity.ToTable("WorkTimeTemplates", "sn");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DefaultTemplate).HasColumnName("defaultTemplate");

                entity.Property(e => e.Friday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Monday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Saturday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Sunday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Thursday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Tuesday).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Wednesday).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<_79647ApartmentTypesFasetId6>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("79647_ApartmentTypesFasetId=6", "tmp");

                entity.Property(e => e.ApartmentId).HasColumnName("apartmentId");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasColumnName("created");

                entity.Property(e => e.FasetId).HasColumnName("fasetId");

                entity.Property(e => e.FasetItemId).HasColumnName("fasetItemId");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<_82430L>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("82430_ls", "tmp");

                entity.Property(e => e.Nn).HasColumnName("NN");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Инн).HasColumnName("ИНН");

                entity.Property(e => e.КодОргЦии).HasColumnName("код орг-ции");

                entity.Property(e => e.Название).HasMaxLength(255);

                entity.Property(e => e.УдаленаЛи)
                    .HasMaxLength(255)
                    .HasColumnName("Удалена ли");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
